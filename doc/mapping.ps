%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
  {1 sub dup mul exch 1 sub dup mul add 1 sub }
  {dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%  sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
 FMLevel1 {
  false
  /colorimage where {pop pop true} if
 } {
  true
 } ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
  errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
 /readline {
  /gstring exch def
  /gfile exch def
  /gindex 0 def
  {
   gfile read pop 
   dup 10 eq {exit} if 
   dup 13 eq {exit} if 
   gstring exch gindex exch put 
   /gindex gindex 1 add def 
  } loop
  pop 
  gstring 0 gindex getinterval true 
  } bind def
 } if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
 dup = flush 
 FMshowpage 
 /Helvetica findfont 12 scalefont setfont
 72 200 moveto
 show FMshowpage 
 FMquit 
 } def 
/FMVERSION {
 FMversion ne {
  (Frame product version does not match ps_prolog!) FMFAILURE
  } if
 } def 
/FMBADEPSF { 
 (PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
 dup dup (X) search pop exch pop exch pop length 
 4 -1 roll 
 putinterval 
 FMFAILURE
 } def
/FMLOCAL {
 FrameDict begin
 0 def 
 end 
 } def 
/concatprocs
 {
 /proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
 newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def 
/eqepsilon {  
 sub dup 0 lt {neg} if
 FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
 2 copy 0 get exch 0 get eqepsilon {
  2 copy 1 get exch 1 get eqepsilon {
   2 copy 2 get exch 2 get eqepsilon {
    3 get exch 3 get eqepsilon
   } {pop pop false} ifelse
  }{pop pop false} ifelse
 } {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
 2 copy 4 get exch 0 get eqepsilon {
  2 copy 5 get exch 1 get eqepsilon {
   6 get exch 2 get eqepsilon
  }{pop pop false} ifelse
 } {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
 1 exch sub 
 3 1 roll 
 1 exch sub 
 3 1 roll 
 1 exch sub 
 3 1 roll 
 3 copy 
 2 copy 
 le { pop } { exch pop } ifelse 
 2 copy 
 le { pop } { exch pop } ifelse 
 dup dup dup 
 6 1 roll 
 4 1 roll 
 7 1 roll 
 sub 
 6 1 roll 
 sub 
 5 1 roll 
 sub 
 4 1 roll 
} bind def
/CMYKtoRGB { 
 dup dup 4 -1 roll add         
 5 1 roll 3 -1 roll add         
 4 1 roll add           
 1 exch sub dup 0 lt {pop 0} if 3 1 roll    
 1 exch sub dup 0 lt {pop 0} if exch        
 1 exch sub dup 0 lt {pop 0} if exch       
} bind def
/FrameSepInit {
 1.0 RealSetgray
} bind def
/FrameSetSepColor { 
 /FrameSepBlue exch def
 /FrameSepGreen exch def
 /FrameSepRed exch def
 /FrameSepBlack exch def
 /FrameSepYellow exch def
 /FrameSepMagenta exch def
 /FrameSepCyan exch def
 /FrameSepIs FMcustom def
 setCurrentScreen 
} bind def
/FrameSetCyan {
 /FrameSepBlue 1.0 def
 /FrameSepGreen 1.0 def
 /FrameSepRed 0.0 def
 /FrameSepBlack 0.0 def
 /FrameSepYellow 0.0 def
 /FrameSepMagenta 0.0 def
 /FrameSepCyan 1.0 def
 /FrameSepIs FMcyan def
 setCurrentScreen 
} bind def
 
/FrameSetMagenta {
 /FrameSepBlue 1.0 def
 /FrameSepGreen 0.0 def
 /FrameSepRed 1.0 def
 /FrameSepBlack 0.0 def
 /FrameSepYellow 0.0 def
 /FrameSepMagenta 1.0 def
 /FrameSepCyan 0.0 def
 /FrameSepIs FMmagenta def
 setCurrentScreen
} bind def
 
/FrameSetYellow {
 /FrameSepBlue 0.0 def
 /FrameSepGreen 1.0 def
 /FrameSepRed 1.0 def
 /FrameSepBlack 0.0 def
 /FrameSepYellow 1.0 def
 /FrameSepMagenta 0.0 def
 /FrameSepCyan 0.0 def
 /FrameSepIs FMyellow def
 setCurrentScreen
} bind def
 
/FrameSetBlack {
 /FrameSepBlue 0.0 def
 /FrameSepGreen 0.0 def
 /FrameSepRed 0.0 def
 /FrameSepBlack 1.0 def
 /FrameSepYellow 0.0 def
 /FrameSepMagenta 0.0 def
 /FrameSepCyan 0.0 def
 /FrameSepIs FMblack def
 setCurrentScreen
} bind def
 
/FrameNoSep { 
 /FrameSepIs FMnone def
 setCurrentScreen
} bind def
/FrameSetSepColors { 
 FrameDict begin
 [ exch 1 add 1 roll ]
 /FrameSepColors  
 exch def end
 } bind def
/FrameColorInSepListCMYK { 
 FrameSepColors {  
         exch dup 3 -1 roll 
         FrameCmpColorsCMYK 
         { pop true exit } if
     } forall 
 dup true ne {pop false} if
 } bind def
/FrameColorInSepListRGB { 
 FrameSepColors {  
         exch dup 3 -1 roll 
         FrameCmpColorsRGB 
         { pop true exit } if
     } forall 
 dup true ne {pop false} if
 } bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
 FrameDict begin
 FrameSepIs FMnone eq
  { RealSetgray } 
  { 
  FrameSepIs FMblack eq 
   { RealSetgray } 
   { FrameSepIs FMcustom eq 
     FrameSepRed 0 eq and
     FrameSepGreen 0 eq and
     FrameSepBlue 0 eq and {
      RealSetgray
     } {
    1 RealSetgray pop 
     } ifelse
   } ifelse
  } ifelse
 end
} bind def
/setrgbcolor { 
 FrameDict begin
 FrameSepIs FMnone eq
 {  RealSetrgbcolor }
 {
  3 copy [ 4 1 roll ] 
  FrameColorInSepListRGB
  {
    FrameSepBlue eq exch 
     FrameSepGreen eq and exch 
     FrameSepRed eq and
     { 0 } { 1 } ifelse
  }
  {
   FMPColor {
    RealSetrgbcolor
    currentcmykcolor
   } {
    RGBtoCMYK
   } ifelse
   FrameSepIs FMblack eq
   {1.0 exch sub 4 1 roll pop pop pop} {
   FrameSepIs FMyellow eq
   {pop 1.0 exch sub 3 1 roll pop pop} {
   FrameSepIs FMmagenta eq
   {pop pop 1.0 exch sub exch pop } {
   FrameSepIs FMcyan eq
   {pop pop pop 1.0 exch sub } 
   {pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
  } ifelse
  RealSetgray
 } 
 ifelse
 end
} bind def
/sethsbcolor {
 FrameDict begin
 FrameSepIs FMnone eq 
 { RealSethsbcolor } 
 {
  RealSethsbcolor 
  currentrgbcolor  
  setrgbcolor 
 } 
 ifelse
 end
} bind def
FrameDict begin
/setcmykcolor where {
 pop /RealSetcmykcolor /setcmykcolor load def
} {
 /RealSetcmykcolor {
  4 1 roll
  3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
  setrgbcolor pop
 } bind def
} ifelse
userdict /setcmykcolor { 
  FrameDict begin
  FrameSepIs FMnone eq
  { RealSetcmykcolor } 
  {
   4 copy [ 5 1 roll ]
   FrameColorInSepListCMYK
   {
    FrameSepBlack eq exch 
    FrameSepYellow eq and exch 
    FrameSepMagenta eq and exch 
    FrameSepCyan eq and 
    { 0 } { 1 } ifelse
   }
   {
    FrameSepIs FMblack eq
    {1.0 exch sub 4 1 roll pop pop pop} {
    FrameSepIs FMyellow eq
    {pop 1.0 exch sub 3 1 roll pop pop} {
    FrameSepIs FMmagenta eq
    {pop pop 1.0 exch sub exch pop } {
    FrameSepIs FMcyan eq
    {pop pop pop 1.0 exch sub } 
    {pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
   } ifelse
   RealSetgray
  }
  ifelse
  end
 } bind put
FMLevel1 not { 
 
 /patProcDict 5 dict dup begin
  <0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
           4 -4 moveto 12 4 lineto stroke
           -4 4 moveto 4 12 lineto stroke} bind def
  <0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
           -4 4 moveto 4 -4 lineto stroke
           4 12 moveto 12 4 lineto stroke} bind def
  <8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
           -1 -1 moveto 9 9 lineto stroke } bind def
  <03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
           4 -4 moveto 12 4 lineto stroke
           -4 4 moveto 4 12 lineto stroke} bind def
  <8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
           -4 4 moveto 4 -4 lineto stroke
           4 12 moveto 12 4 lineto stroke} bind def
 end def
 /patDict 15 dict dup begin
  /PatternType 1 def  
  /PaintType 2 def  
  /TilingType 3 def  
  /BBox [ 0 0 8 8 ] def  
  /XStep 8 def   
  /YStep 8 def   
  /PaintProc {
   begin
   patProcDict bstring known {
    patProcDict bstring get exec
   } {
    8 8 true [1 0 0 -1 0 8] bstring imagemask
   } ifelse
   end
  } bind def
 end def
} if
/combineColor {
    FrameSepIs FMnone eq
 {
  graymode FMLevel1 or not {
   
   [/Pattern [/DeviceCMYK]] setcolorspace
   FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
  } {
   FrameCurColors 3 get 1.0 ge {
    FrameCurGray RealSetgray
   } {
    FMPColor graymode and {
     0 1 3 { 
      FrameCurColors exch get
      1 FrameCurGray sub mul
     } for
     RealSetcmykcolor
    } {
     4 1 6 {
      FrameCurColors exch get
      graymode {
       1 exch sub 1 FrameCurGray sub mul 1 exch sub
      } {
       1.0 lt {FrameCurGray} {1} ifelse
      } ifelse
     } for
     RealSetrgbcolor
    } ifelse
   } ifelse
  } ifelse
 } { 
  FrameCurColors 0 4 getinterval aload
  FrameColorInSepListCMYK {
   FrameSepBlack eq exch 
   FrameSepYellow eq and exch 
   FrameSepMagenta eq and exch 
   FrameSepCyan eq and
   FrameSepIs FMcustom eq and
   { FrameCurGray } { 1 } ifelse
  } {
   FrameSepIs FMblack eq
   {FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
   FrameSepIs FMyellow eq
   {pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
   FrameSepIs FMmagenta eq
   {pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
   FrameSepIs FMcyan eq
   {pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
   {pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
  } ifelse
  graymode FMLevel1 or not {
   
   [/Pattern [/DeviceGray]] setcolorspace
   FrameCurPat setcolor
  } { 
   graymode not FMLevel1 and {
    
    dup 1 lt {pop FrameCurGray} if
   } if
   RealSetgray
  } ifelse
 } ifelse
} bind def
/savematrix {
 orgmatrix currentmatrix pop
 } bind def
/restorematrix {
 orgmatrix setmatrix
 } bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
 
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [ 10.5833 10.0     9.4055  10.5833 10.0   10.5833  10.0    9.375   ] def
/screenIndex {
 0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
 FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
  screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
 FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
  screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
 FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
  screenIndex dup 3 1 roll get 3 1 roll get { 3 div
   {2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
   FMSpotFunction } } {/FMSpotFunction load } ifelse
   0.0 exch
} bind def
/getBlackScreen  {
 FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
  screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
 getBlackScreen
} bind def
/getCompositeScreen {
 getBlackScreen
} bind def
/FMSetScreen 
 FMLevel1 { /setscreen load 
 }{ {
  8 dict begin
  /HalftoneType 1 def
  /SpotFunction exch def
  /Angle exch def
  /Frequency exch def
  /AccurateScreens FMUseAcccurateScreens def
  currentdict end sethalftone
 } bind } ifelse
def
/setDefaultScreen {
 FMPColor {
  orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
 }
 {
  orgxfer cvx settransfer
 } ifelse
 orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
 FrameSepIs FMnone eq {
  FMUseDefaultNoSeparationScreen {
   setDefaultScreen
  } {
   getCompositeScreen FMSetScreen
  } ifelse
 } {
  FrameSepIs FMcustom eq {
   FMUseDefaultSpotSeparationScreen {
    setDefaultScreen
   } {
    getSpotScreen FMSetScreen
   } ifelse
  } {
   FMUseDefaultProcessSeparationScreen {
    setDefaultScreen
   } {
    FrameSepIs FMcyan eq {
     getCyanScreen FMSetScreen
    } {
     FrameSepIs FMmagenta eq {
      getMagentaScreen FMSetScreen
     } {
      FrameSepIs FMyellow eq {
       getYellowScreen FMSetScreen
      } {
       getBlackScreen FMSetScreen
      } ifelse
     } ifelse
    } ifelse
   } ifelse
  } ifelse
 } ifelse 
} bind def
end
 /gstring FMLOCAL
 /gfile FMLOCAL
 /gindex FMLOCAL
 /orgrxfer FMLOCAL
 /orggxfer FMLOCAL
 /orgbxfer FMLOCAL
 /orgxfer FMLOCAL
 /orgproc FMLOCAL
 /orgrproc FMLOCAL
 /orggproc FMLOCAL
 /orgbproc FMLOCAL
 /organgle FMLOCAL
 /orgrangle FMLOCAL
 /orggangle FMLOCAL
 /orgbangle FMLOCAL
 /orgfreq FMLOCAL
 /orgrfreq FMLOCAL
 /orggfreq FMLOCAL
 /orgbfreq FMLOCAL
 /yscale FMLOCAL
 /xscale FMLOCAL
 /edown FMLOCAL
 /manualfeed FMLOCAL
 /paperheight FMLOCAL
 /paperwidth FMLOCAL
/FMDOCUMENT { 
 array /FMfonts exch def 
 /#copies exch def
 FrameDict begin
 0 ne /manualfeed exch def
 /paperheight exch def
 /paperwidth exch def
 0 ne /FrameNegative exch def 
 0 ne /edown exch def 
 /yscale exch def
 /xscale exch def
 FMLevel1 {
  manualfeed {setmanualfeed} if
  /FMdicttop countdictstack 1 add def 
  /FMoptop count def 
  setpapername 
  manualfeed {true} {papersize} ifelse 
  {manualpapersize} {false} ifelse 
  {desperatepapersize} {false} ifelse 
  { (Can't select requested paper size for Frame print job!) FMFAILURE } if
  count -1 FMoptop {pop pop} for
  countdictstack -1 FMdicttop {pop end} for 
  }
  {{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
  { (Can't select requested paper size for Frame print job!) FMFAILURE } if
   {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
 ifelse 
 
 FMPColor {
  currentcolorscreen
   cvlit /orgproc exch def
      /organgle exch def 
      /orgfreq exch def
   cvlit /orgbproc exch def
      /orgbangle exch def 
      /orgbfreq exch def
   cvlit /orggproc exch def
      /orggangle exch def 
      /orggfreq exch def
   cvlit /orgrproc exch def
      /orgrangle exch def 
      /orgrfreq exch def
   currentcolortransfer 
   FrameNegative {
    1 1 4 { 
     pop { 1 exch sub } concatprocs 4 1 roll
    } for
    4 copy
    setcolortransfer
   } if
   cvlit /orgxfer exch def
   cvlit /orgbxfer exch def
   cvlit /orggxfer exch def
   cvlit /orgrxfer exch def
 } {
  currentscreen 
   cvlit /orgproc exch def
      /organgle exch def 
      /orgfreq exch def
      
  currenttransfer 
  FrameNegative {
   { 1 exch sub } concatprocs
   dup settransfer
  } if 
  cvlit /orgxfer exch def
 } ifelse
 end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
 FrameDict begin 
 /pagesave save def
 3.86 setmiterlimit
 /landscape exch 0 ne def
 landscape { 
  90 rotate 0 exch dup /pwid exch def neg translate pop 
 }{
  pop /pwid exch def
 } ifelse
 edown { [-1 0 0 1 pwid 0] concat } if
 0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
 0 paperheight lineto 0 0 lineto 1 setgray fill
 xscale yscale scale
 /orgmatrix matrix def
 gsave 
} def 
/FMENDPAGE {
 grestore 
 pagesave restore
 end 
 showpage
 } def 
/FMFONTDEFINE { 
 FrameDict begin
 findfont 
 ReEncode 
 1 index exch 
 definefont 
 FMfonts 3 1 roll 
 put
 end 
 } def 
/FMFILLS {
 FrameDict begin dup
 array /fillvals exch def
 dict /patCache exch def
 end 
 } def 
/FMFILL {
 FrameDict begin
  fillvals 3 1 roll put
 end 
 } def 
/FMNORMALIZEGRAPHICS { 
 newpath
 0.0 0.0 moveto
 1 setlinewidth
 0 setlinecap
 0 0 0 sethsbcolor
 0 setgray 
 } bind def
 /fx FMLOCAL
 /fy FMLOCAL
 /fh FMLOCAL
 /fw FMLOCAL
 /llx FMLOCAL
 /lly FMLOCAL
 /urx FMLOCAL
 /ury FMLOCAL
/FMBEGINEPSF { 
 end 
 /FMEPSF save def 
 /showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
 /banddevice {(banddevice) FMBADEPSF} def
 /clear {(clear) FMBADEPSF} def
 /cleardictstack {(cleardictstack) FMBADEPSF} def 
 /copypage {(copypage) FMBADEPSF} def
 /erasepage {(erasepage) FMBADEPSF} def
 /exitserver {(exitserver) FMBADEPSF} def
 /framedevice {(framedevice) FMBADEPSF} def
 /grestoreall {(grestoreall) FMBADEPSF} def
 /initclip {(initclip) FMBADEPSF} def
 /initgraphics {(initgraphics) FMBADEPSF} def
 /initmatrix {(initmatrix) FMBADEPSF} def
 /quit {(quit) FMBADEPSF} def
 /renderbands {(renderbands) FMBADEPSF} def
 /setglobal {(setglobal) FMBADEPSF} def
 /setpagedevice {(setpagedevice) FMBADEPSF} def
 /setshared {(setshared) FMBADEPSF} def
 /startjob {(startjob) FMBADEPSF} def
 /lettertray {(lettertray) FMBADEPSF} def
 /letter {(letter) FMBADEPSF} def
 /lettersmall {(lettersmall) FMBADEPSF} def
 /11x17tray {(11x17tray) FMBADEPSF} def
 /11x17 {(11x17) FMBADEPSF} def
 /ledgertray {(ledgertray) FMBADEPSF} def
 /ledger {(ledger) FMBADEPSF} def
 /legaltray {(legaltray) FMBADEPSF} def
 /legal {(legal) FMBADEPSF} def
 /statementtray {(statementtray) FMBADEPSF} def
 /statement {(statement) FMBADEPSF} def
 /executivetray {(executivetray) FMBADEPSF} def
 /executive {(executive) FMBADEPSF} def
 /a3tray {(a3tray) FMBADEPSF} def
 /a3 {(a3) FMBADEPSF} def
 /a4tray {(a4tray) FMBADEPSF} def
 /a4 {(a4) FMBADEPSF} def
 /a4small {(a4small) FMBADEPSF} def
 /b4tray {(b4tray) FMBADEPSF} def
 /b4 {(b4) FMBADEPSF} def
 /b5tray {(b5tray) FMBADEPSF} def
 /b5 {(b5) FMBADEPSF} def
 FMNORMALIZEGRAPHICS 
 [/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
 fx fw 2 div add fy fh 2 div add  translate
 rotate
 fw 2 div neg fh 2 div neg translate
 fw urx llx sub div fh ury lly sub div scale 
 llx neg lly neg translate 
 /FMdicttop countdictstack 1 add def 
 /FMoptop count def 
 } bind def
/FMENDEPSF {
 count -1 FMoptop {pop pop} for 
 countdictstack -1 FMdicttop {pop end} for 
 FMEPSF restore
 FrameDict begin 
 } bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
  statusdict /manualfeed true put
%%EndFeature
 } bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
 paperheight sub abs 16 lt exch 
 paperwidth sub abs 16 lt and
 {/papername exch def} {pop} ifelse
 } bind def
 /papersizedict FMLOCAL
/setpapername { 
 /papersizedict 14 dict def 
 papersizedict begin
 /papername /unknown def 
  /Letter 8.5 inch 11.0 inch pagedimen
  /LetterSmall 7.68 inch 10.16 inch pagedimen
  /Tabloid 11.0 inch 17.0 inch pagedimen
  /Ledger 17.0 inch 11.0 inch pagedimen
  /Legal 8.5 inch 14.0 inch pagedimen
  /Statement 5.5 inch 8.5 inch pagedimen
  /Executive 7.5 inch 10.0 inch pagedimen
  /A3 11.69 inch 16.5 inch pagedimen
  /A4 8.26 inch 11.69 inch pagedimen
  /A4Small 7.47 inch 10.85 inch pagedimen
  /B4 10.125 inch 14.33 inch pagedimen
  /B5 7.16 inch 10.125 inch pagedimen
 end
 } bind def
/papersize {
 papersizedict begin
  /Letter {lettertray letter} def
  /LetterSmall {lettertray lettersmall} def
  /Tabloid {11x17tray 11x17} def
  /Ledger {ledgertray ledger} def
  /Legal {legaltray legal} def
  /Statement {statementtray statement} def
  /Executive {executivetray executive} def
  /A3 {a3tray a3} def
  /A4 {a4tray a4} def
  /A4Small {a4tray a4small} def
  /B4 {b4tray b4} def
  /B5 {b5tray b5} def
  /unknown {unknown} def
 papersizedict dup papername known {papername} {/unknown} ifelse get
 end
 statusdict begin stopped end 
 } bind def
/manualpapersize {
 papersizedict begin
  /Letter {letter} def
  /LetterSmall {lettersmall} def
  /Tabloid {11x17} def
  /Ledger {ledger} def
  /Legal {legal} def
  /Statement {statement} def
  /Executive {executive} def
  /A3 {a3} def
  /A4 {a4} def
  /A4Small {a4small} def
  /B4 {b4} def
  /B5 {b5} def
  /unknown {unknown} def
 papersizedict dup papername known {papername} {/unknown} ifelse get
 end
 stopped 
 } bind def
/desperatepapersize {
 statusdict /setpageparams known
  {
  paperwidth paperheight 0 1 
  statusdict begin
  {setpageparams} stopped 
  end
  } {true} ifelse 
 } bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
 dup 
 length 
 dict begin 
 {
 1 index /FID ne 
  {def} 
  {pop pop} ifelse 
 } forall 
 0 eq {/Encoding DiacriticEncoding def} if 
 currentdict 
 end 
 } bind def
FMPColor 
 
 {
 /BEGINBITMAPCOLOR { 
  BITMAPCOLOR} def
 /BEGINBITMAPCOLORc { 
  BITMAPCOLORc} def
 /BEGINBITMAPTRUECOLOR { 
  BITMAPTRUECOLOR } def
 /BEGINBITMAPTRUECOLORc { 
  BITMAPTRUECOLORc } def
 }
 
 {
 /BEGINBITMAPCOLOR { 
  BITMAPGRAY} def
 /BEGINBITMAPCOLORc { 
  BITMAPGRAYc} def
 /BEGINBITMAPTRUECOLOR { 
  BITMAPTRUEGRAY } def
 /BEGINBITMAPTRUECOLORc { 
  BITMAPTRUEGRAYc } def
 }
ifelse
/K { 
 FMPrintAllColorsAsBlack {
  dup 1 eq 2 index 1 eq and 3 index 1 eq and not
   {7 {pop} repeat 0 0 0 1 0 0 0} if
 } if 
 FrameCurColors astore 
 pop combineColor
} bind def
/graymode true def
 /bwidth FMLOCAL
 /bpside FMLOCAL
 /bstring FMLOCAL
 /onbits FMLOCAL
 /offbits FMLOCAL
 /xindex FMLOCAL
 /yindex FMLOCAL
 /x FMLOCAL
 /y FMLOCAL
/setPatternMode {
 FMLevel1 {
  /bwidth  exch def
  /bpside  exch def
  /bstring exch def
  /onbits 0 def  /offbits 0 def
  freq sangle landscape {90 add} if 
   {/y exch def
    /x exch def
    /xindex x 1 add 2 div bpside mul cvi def
    /yindex y 1 add 2 div bpside mul cvi def
    bstring yindex bwidth mul xindex 8 idiv add get
    1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
    {/onbits  onbits  1 add def 1}
    {/offbits offbits 1 add def 0}
    ifelse
   }
   setscreen
  offbits offbits onbits add div FrameNegative {1.0 exch sub} if
  /FrameCurGray exch def
 } { 
  pop pop
  dup patCache exch known {
   patCache exch get
  } { 
   dup
   patDict /bstring 3 -1 roll put
   patDict 
   9 PatFreq screenIndex get div dup matrix scale
   makepattern
   dup 
   patCache 4 -1 roll 3 -1 roll put
  } ifelse
  /FrameCurGray 0 def
  /FrameCurPat exch def
 } ifelse
 /graymode false def
 combineColor
} bind def
/setGrayScaleMode {
 graymode not {
  /graymode true def
  FMLevel1 {
   setCurrentScreen
  } if
 } if
 /FrameCurGray exch def
 combineColor
} bind def
/normalize {
 transform round exch round exch itransform
 } bind def
/dnormalize {
 dtransform round exch round exch idtransform
 } bind def
/lnormalize { 
 0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
 } bind def
/H { 
 lnormalize setlinewidth
 } bind def
/Z {
 setlinecap
 } bind def
 
/PFill {
 graymode FMLevel1 or not {
  gsave 1 setgray eofill grestore
 } if
} bind def
/PStroke {
 graymode FMLevel1 or not {
  gsave 1 setgray stroke grestore
 } if
 stroke
} bind def
 /fillvals FMLOCAL
/X { 
 fillvals exch get
 dup type /stringtype eq
 {8 1 setPatternMode} 
 {setGrayScaleMode}
 ifelse
 } bind def
/V { 
 PFill gsave eofill grestore
 } bind def
/Vclip {
 clip
 } bind def
/Vstrk {
 currentlinewidth exch setlinewidth PStroke setlinewidth
 } bind def
/N { 
 PStroke
 } bind def
/Nclip {
 strokepath clip newpath
 } bind def
/Nstrk {
 currentlinewidth exch setlinewidth PStroke setlinewidth
 } bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
 /n FMLOCAL
/L { 
  /n exch def
 newpath
 normalize
 moveto 
 2 1 n {pop normalize lineto} for
 } bind def
/Y { 
 L 
 closepath
 } bind def
 /x1 FMLOCAL
 /x2 FMLOCAL
 /y1 FMLOCAL
 /y2 FMLOCAL
/R { 
 /y2 exch def
 /x2 exch def
 /y1 exch def
 /x1 exch def
 x1 y1
 x2 y1
 x2 y2
 x1 y2
 4 Y 
 } bind def
 /rad FMLOCAL
/rarc 
 {rad 
  arcto
 } bind def
/RR { 
 /rad exch def
 normalize
 /y2 exch def
 /x2 exch def
 normalize
 /y1 exch def
 /x1 exch def
 mark
 newpath
 {
 x1 y1 rad add moveto
 x1 y2 x2 y2 rarc
 x2 y2 x2 y1 rarc
 x2 y1 x1 y1 rarc
 x1 y1 x1 y2 rarc
 closepath
 } stopped {x1 y1 x2 y2 R} if 
 cleartomark
 } bind def
/RRR { 
 /rad exch def
 normalize /y4 exch def /x4 exch def
 normalize /y3 exch def /x3 exch def
 normalize /y2 exch def /x2 exch def
 normalize /y1 exch def /x1 exch def
 newpath
 normalize moveto 
 mark
 {
 x2 y2 x3 y3 rarc
 x3 y3 x4 y4 rarc
 x4 y4 x1 y1 rarc
 x1 y1 x2 y2 rarc
 closepath
 } stopped
  {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
 cleartomark
 } bind def
/C { 
 grestore
 gsave
 R 
 clip
 setCurrentScreen
} bind def
/CP { 
 grestore
 gsave
 Y 
 clip
 setCurrentScreen
} bind def
 /FMpointsize FMLOCAL
/F { 
 FMfonts exch get
 FMpointsize scalefont
 setfont
 } bind def
/Q { 
 /FMpointsize exch def
 F 
 } bind def
/T { 
 moveto show
 } bind def
/RF { 
 rotate
 0 ne {-1 1 scale} if
 } bind def
/TF { 
 gsave
 moveto 
 RF
 show
 grestore
 } bind def
/P { 
 moveto
 0 32 3 2 roll widthshow
 } bind def
/PF { 
 gsave
 moveto 
 RF
 0 32 3 2 roll widthshow
 grestore
 } bind def
/S { 
 moveto
 0 exch ashow
 } bind def
/SF { 
 gsave
 moveto
 RF
 0 exch ashow
 grestore
 } bind def
/B { 
 moveto
 0 32 4 2 roll 0 exch awidthshow
 } bind def
/BF { 
 gsave
 moveto
 RF
 0 32 4 2 roll 0 exch awidthshow
 grestore
 } bind def
/G { 
 gsave
 newpath
 normalize translate 0.0 0.0 moveto 
 dnormalize scale 
 0.0 0.0 1.0 5 3 roll arc 
 closepath 
 PFill fill
 grestore
 } bind def
/Gstrk {
 savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
 newpath
 savematrix
 normalize translate 0.0 0.0 moveto 
 dnormalize scale 
 0.0 0.0 1.0 5 3 roll arc 
 closepath 
 clip newpath
 restorematrix
 } bind def
/GG { 
 gsave
 newpath
 normalize translate 0.0 0.0 moveto 
 rotate 
 dnormalize scale 
 0.0 0.0 1.0 5 3 roll arc 
 closepath
 PFill
 fill
 grestore
 } bind def
/GGclip { 
 savematrix
 newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
 clip newpath
 restorematrix
 } bind def
/GGstrk { 
 savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
 restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
 } bind def
/A { 
 gsave
 savematrix
 newpath
 2 index 2 div add exch 3 index 2 div sub exch 
 normalize 2 index 2 div sub exch 3 index 2 div add exch 
 translate 
 scale 
 0.0 0.0 1.0 5 3 roll arc 
 restorematrix
 PStroke
 grestore
 } bind def
/Aclip {
 newpath
 savematrix
 normalize translate 0.0 0.0 moveto 
 dnormalize scale 
 0.0 0.0 1.0 5 3 roll arc 
 closepath 
 strokepath clip newpath
 restorematrix
} bind def
/Astrk {
 Gstrk
} bind def
/AA { 
 gsave
 savematrix
 newpath
 
 3 index 2 div add exch 4 index 2 div sub exch 
 
 normalize 3 index 2 div sub exch 4 index 2 div add exch
 translate 
 rotate 
 scale 
 0.0 0.0 1.0 5 3 roll arc 
 restorematrix
 PStroke
 grestore
 } bind def
/AAclip {
 savematrix
 newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
 strokepath clip newpath
 restorematrix
} bind def
/AAstrk {
 GGstrk
} bind def
 /x FMLOCAL
 /y FMLOCAL
 /w FMLOCAL
 /h FMLOCAL
 /xx FMLOCAL
 /yy FMLOCAL
 /ww FMLOCAL
 /hh FMLOCAL
 /FMsaveobject FMLOCAL
 /FMoptop FMLOCAL
 /FMdicttop FMLOCAL
/BEGINPRINTCODE { 
 /FMdicttop countdictstack 1 add def 
 /FMoptop count 7 sub def 
 /FMsaveobject save def
 userdict begin 
 /showpage {} def 
 FMNORMALIZEGRAPHICS 
 3 index neg 3 index neg translate
 } bind def
/ENDPRINTCODE {
 count -1 FMoptop {pop pop} for 
 countdictstack -1 FMdicttop {pop end} for 
 FMsaveobject restore 
 } bind def
/gn { 
 0 
 { 46 mul 
  cf read pop 
  32 sub 
  dup 46 lt {exit} if 
  46 sub add 
  } loop
 add 
 } bind def
 /str FMLOCAL
/cfs { 
 /str sl string def 
 0 1 sl 1 sub {str exch val put} for 
 str def 
 } bind def
/ic [ 
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
 0
 {0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
 {10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
 {19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
 {13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
 {4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
 {13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
 {7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
 {0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
 {10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
 ] def
 /sl FMLOCAL
 /val FMLOCAL
 /ws FMLOCAL
 /im FMLOCAL
 /bs FMLOCAL
 /cs FMLOCAL
 /len FMLOCAL
 /pos FMLOCAL
/ms { 
 /sl exch def 
 /val 255 def 
 /ws cfs 
 /im cfs 
 /val 0 def 
 /bs cfs 
 /cs cfs 
 } bind def
400 ms 
/ip { 
 is 
 0 
 cf cs readline pop 
 { ic exch get exec 
  add 
  } forall 
 pop 
 
 } bind def
/rip { 
    
   
   bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
   pop pop 
   ris gis copy pop 
   dup is exch 
   
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
   pop pop
   gis bis copy pop 
   dup add is exch 
   
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
 /len exch def 
 /pos exch def 
 ws 0 len getinterval im pos len getinterval copy pop
 pos len 
 } bind def
/bl { 
 /len exch def 
 /pos exch def 
 bs 0 len getinterval im pos len getinterval copy pop
 pos len 
 } bind def
/s1 1 string def
/fl { 
 /len exch def 
 /pos exch def 
 /val cf s1 readhexstring pop 0 get def
 pos 1 pos len add 1 sub {im exch val put} for
 pos len 
 } bind def
/hx { 
 3 copy getinterval 
 cf exch readhexstring pop pop 
 } bind def
 /h FMLOCAL
 /w FMLOCAL
 /d FMLOCAL
 /lb FMLOCAL
 /bitmapsave FMLOCAL
 /is FMLOCAL
 /cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
 } bind def
/BEGINBITMAPBWc { 
 1 {} COMMONBITMAPc
 } bind def
/BEGINBITMAPGRAYc { 
 8 {} COMMONBITMAPc
 } bind def
/BEGINBITMAP2BITc { 
 2 {} COMMONBITMAPc
 } bind def
/COMMONBITMAPc { 
   
 /r exch def
 /d exch def
 gsave
 
 3 index 2 div add exch 
 4 index 2 div add exch 
 translate  
 rotate   
 1 index 2 div neg 
 1 index 2 div neg 
 translate  
 scale   
 /h exch def /w exch def
 /lb w d wbytes def 
 sl lb lt {lb ms} if 
 /bitmapsave save def 
 r                    
 /is im 0 lb getinterval def 
 ws 0 lb getinterval is copy pop 
 /cf currentfile def 
 w h d [w 0 0 h neg 0 h] 
 {ip} image 
 bitmapsave restore 
 grestore
 } bind def
/BEGINBITMAPBW { 
 1 {} COMMONBITMAP
 } bind def
/BEGINBITMAPGRAY { 
 8 {} COMMONBITMAP
 } bind def
/BEGINBITMAP2BIT { 
 2 {} COMMONBITMAP
 } bind def
/COMMONBITMAP { 
 /r exch def
 /d exch def
 gsave
 
 3 index 2 div add exch 
 4 index 2 div add exch 
 translate  
 rotate   
 1 index 2 div neg 
 1 index 2 div neg 
 translate  
 scale   
 /h exch def /w exch def
 /bitmapsave save def 
 r                    
 /is w d wbytes string def
 /cf currentfile def 
 w h d [w 0 0 h neg 0 h] 
 {cf is readhexstring pop} image
 bitmapsave restore 
 grestore
 } bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
 /gryt FMLOCAL
 /blut FMLOCAL
 /grnt FMLOCAL
 /redt FMLOCAL
 /indx FMLOCAL
 /cynu FMLOCAL
 /magu FMLOCAL
 /yelu FMLOCAL
 /k FMLOCAL
 /u FMLOCAL
FMLevel1 {
/colorsetup {
 currentcolortransfer
 /gryt exch def
 /blut exch def
 /grnt exch def
 /redt exch def
 0 1 255 {
  /indx exch def
  /cynu 1 red indx get 255 div sub def
  /magu 1 green indx get 255 div sub def
  /yelu 1 blue indx get 255 div sub def
  /k cynu magu min yelu min def
  /u k currentundercolorremoval exec def
%  /u 0 def
  nredt indx 1 0 cynu u sub max sub redt exec put
  ngreent indx 1 0 magu u sub max sub grnt exec put
  nbluet indx 1 0 yelu u sub max sub blut exec put
  ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
 } for
 {255 mul cvi nredt exch get}
 {255 mul cvi ngreent exch get}
 {255 mul cvi nbluet exch get}
 {255 mul cvi ngrayt exch get}
 setcolortransfer
 {pop 0} setundercolorremoval
 {} setblackgeneration
 } bind def
}
{
/colorSetup2 {
 [ /Indexed /DeviceRGB 255 
  {dup red exch get 255 div 
   exch dup green exch get 255 div 
   exch blue exch get 255 div}
 ] setcolorspace
} bind def
} ifelse
 /tran FMLOCAL
/fakecolorsetup {
 /tran 256 string def
 0 1 255 {/indx exch def 
  tran indx
  red indx get 77 mul
  green indx get 151 mul
  blue indx get 28 mul
  add add 256 idiv put} for
 currenttransfer
 {255 mul cvi tran exch get 255.0 div}
 exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
 /d 8 def
 gsave
 
 3 index 2 div add exch 
 4 index 2 div add exch 
 translate  
 rotate   
 1 index 2 div neg 
 1 index 2 div neg 
 translate  
 scale   
 /h exch def /w exch def
 /bitmapsave save def
 FMLevel1 { 
  colorsetup
  /is w d wbytes string def
  /cf currentfile def 
  w h d [w 0 0 h neg 0 h] 
  {cf is readhexstring pop} {is} {is} true 3 colorimage 
 } {
  colorSetup2
  /is w d wbytes string def
  /cf currentfile def 
  7 dict dup begin
   /ImageType 1 def
   /Width w def
   /Height h def
   /ImageMatrix [w 0 0 h neg 0 h] def
   /DataSource {cf is readhexstring pop} bind def
   /BitsPerComponent d def
   /Decode [0 255] def
  end image 
 } ifelse
 bitmapsave restore 
 grestore
 } bind def
/BITMAPCOLORc { 
 /d 8 def
 gsave
 
 3 index 2 div add exch 
 4 index 2 div add exch 
 translate  
 rotate   
 1 index 2 div neg 
 1 index 2 div neg 
 translate  
 scale   
 /h exch def /w exch def
 /lb w d wbytes def 
 sl lb lt {lb ms} if 
 /bitmapsave save def 
 FMLevel1 { 
  colorsetup
  /is im 0 lb getinterval def 
  ws 0 lb getinterval is copy pop 
  /cf currentfile def 
  w h d [w 0 0 h neg 0 h] 
  {ip} {is} {is} true 3 colorimage
 } {
  colorSetup2
  /is im 0 lb getinterval def 
  ws 0 lb getinterval is copy pop 
  /cf currentfile def 
  7 dict dup begin
   /ImageType 1 def
   /Width w def
   /Height h def
   /ImageMatrix [w 0 0 h neg 0 h] def
   /DataSource {ip} bind def
   /BitsPerComponent d def
   /Decode [0 255] def
  end image 
 } ifelse
 bitmapsave restore 
 grestore
 } bind def
/BITMAPTRUECOLORc { 
 /d 24 def
        gsave
  
 3 index 2 div add exch 
 4 index 2 div add exch 
 translate  
 rotate   
 1 index 2 div neg 
 1 index 2 div neg 
 translate  
 scale   
 /h exch def /w exch def
 /lb w d wbytes def 
 sl lb lt {lb ms} if 
        /bitmapsave save def 
        
 /is im 0 lb getinterval def 
 /ris im 0 w getinterval def 
 /gis im w w getinterval def 
 /bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
  
  3 index 2 div add exch 
  4 index 2 div add exch 
  translate  
  rotate   
  1 index 2 div neg 
  1 index 2 div neg 
  translate  
  scale   
  /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
 /d 24 def
        gsave
 
 3 index 2 div add exch 
 4 index 2 div add exch 
 translate  
 rotate   
 1 index 2 div neg 
 1 index 2 div neg 
 translate  
 scale   
 /h exch def /w exch def
 /lb w d wbytes def 
 sl lb lt {lb ms} if 
        /bitmapsave save def 
        
 /is im 0 lb getinterval def 
 /ris im 0 w getinterval def 
 /gis im w w getinterval def 
 /bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
   b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
  
  3 index 2 div add exch 
  4 index 2 div add exch 
  translate  
  rotate   
  1 index 2 div neg 
  1 index 2 div neg 
  translate  
  scale   
  /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
 8 {fakecolorsetup} COMMONBITMAP
 } bind def
/BITMAPGRAYc { 
 8 {fakecolorsetup} COMMONBITMAPc
 } bind def
/ENDBITMAP {
 } bind def
end 
 /ALDsave FMLOCAL
 /ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
 /ALDsave save def
  savematrix
  ALDmatrix setmatrix
 } bind def
/InALD {
  restorematrix
 } bind def
/DoneALD {
  ALDsave restore
 } bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 26 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 0 /Helvetica FMFONTDEFINE
5 0 /Times-Italic FMFONTDEFINE
6 0 /Courier-Bold FMFONTDEFINE
7 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(November 3, 1994) 72 737.98 T
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 153 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 153 51.63 T
1 24 Q
-0.17 (Proposed IDL) 207 677 S
2 11.2 Q
( \333) 340.33 682.6 T
1 24 Q
-0.17 (Ada 9X) 353.73 677 S
-0.17 (Language Mapping) 207 647 S
-0.17 (Speci\336cation) 207 617 S
3 12 Q
(Objective Interface Systems, Inc.) 207 585 T
(The MITRE Corporation) 207 569 T
0 9 Q
(A working draft description of a mapping to the Ada 9X) 207 509 T
(programming language from the OMG Interface De\336nition) 207 497 T
(Language \050IDL\051  and the Common Object Request Broker) 207 485 T
(Architecture \050CORBA\051.) 207 473 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(2) 54 61.63 T
0 8 Q
( of) 59.56 61.63 T
0 10 Q
( 58) 69.34 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(3) 528.93 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(CHAPTER 1) 72 677.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Introduction) 207 677.99 T
(7) 290.22 677.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(1.1) 185.5 660.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Submitting Or) 207 660.66 T
(ganizations) 264.33 660.66 T
(7) 319.88 660.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.2) 185.5 644.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Distinguished Reviewers) 207 644.66 T
(7) 317.27 644.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.3) 185.5 628.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Submission Contacts) 207 628.66 T
(8) 301.18 628.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(CHAPTER 2) 72 591.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Design Rationale) 207 591.99 T
(9) 317.82 591.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(2.1) 185.5 574.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Key Design Decisions) 207 574.66 T
(9) 306.43 574.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(2.1.1) 207 561.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Conformity) 230.98 561.99 T
(9) 277.65 561.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.1.2) 207 551.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ada Implementation Requirements) 230.98 551.99 T
(9) 362.14 551.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.1.3) 207 541.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ada Data Layout Requirements) 230.98 541.99 T
(9) 350.58 541.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.1.4) 207 531.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Performance and Ef) 230.98 531.99 T
(\336ciency) 301.98 531.99 T
(9) 336.65 531.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.1.5) 207 521.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Usability) 230.98 521.99 T
(9) 269.2 521.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(2.2) 185.5 508.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RFP-mandated Requirements) 207 508.66 T
(10) 335.05 508.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(2.2.1) 207 495.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Maps Entire IDL Language) 230.98 495.99 T
(10) 334.14 495.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.2.2) 207 485.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Consistent Style) 230.98 485.99 T
(10) 296.78 485.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.2.3) 207 475.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Justi\336cation of IDL, CORBA, Object Model Extensions) 230.98 475.99 T
(10) 430.16 475.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.2.4) 207 465.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(No Implementation Descriptions) 230.98 465.99 T
(10) 352.34 465.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(2.3) 185.5 452.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Evaluation Criteria) 207 452.66 T
(10) 293.38 452.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(2.3.1) 207 439.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Reliability) 230.98 439.99 T
(10) 273.2 439.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3.2) 207 429.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Performance) 230.98 429.99 T
(10) 284.77 429.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3.3) 207 419.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Portability) 230.98 419.99 T
(10) 274.1 419.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(2.4) 185.5 406.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overview and Design Philosophy) 207 406.66 T
(10) 351.71 406.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(2.4.1) 207 393.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Overview of Mapping) 230.98 393.99 T
(10) 314.11 393.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.2) 207 383.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Design Philosophy) 230.98 383.99 T
(12) 305.22 383.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.3) 207 373.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Glossary of T) 230.98 373.99 T
(erms) 277.66 373.99 T
(13) 303.43 373.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.4) 207 363.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(RFP Requirements and Criteria) 230.98 363.99 T
(13) 350.56 363.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(2.5) 185.5 350.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(General Ada Language Mapping Conventions) 207 350.66 T
(13) 401.41 350.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(2.5.1) 207 337.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementation Considerations) 230.98 337.99 T
(14) 349.24 337.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.5.2) 207 327.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Standard Functions) 230.98 327.99 T
(14) 308.34 327.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.5.3) 207 317.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Calling Convention) 230.98 317.99 T
(14) 306.11 317.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(CHAPTER 3) 72 283.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The Mapping of IDL to Ada) 207 283.99 T
(15) 380.03 283.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(3.1) 185.5 266.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Scoped Names) 207 266.66 T
(15) 276.71 266.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2) 185.5 250.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ada T) 207 250.66 T
(ype Size Requirements) 231.57 250.66 T
(15) 333.78 250.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.3) 185.5 234.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IDL Files) 207 234.66 T
(16) 255.61 234.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.4) 185.5 218.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CORBA Module) 207 218.66 T
(16) 285.06 218.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.5) 185.5 202.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping Modules) 207 202.66 T
(17) 290.61 202.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(3.5.1) 207 189.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Constants and Exceptions) 230.98 189.99 T
(17) 331.91 189.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.5.2) 207 179.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Global Names) 230.98 179.99 T
(17) 289.66 179.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(3.6) 185.5 166.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Interfaces) 207 166.66 T
(17) 309.19 166.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(3.6.1) 207 153.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Reference T) 230.98 153.99 T
(ypes) 299.9 153.99 T
(17) 324.79 153.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.6.2) 207 143.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interfaces and Inheritance) 230.98 143.99 T
(18) 331.47 143.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.6.3) 207 133.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Widening Object References) 230.98 133.99 T
(18) 340.79 133.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.6.4) 207 123.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Reference Operations) 230.98 123.99 T
(18) 342.58 123.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.6.5) 207 113.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Narrowing Object References) 230.98 113.99 T
(18) 343.9 113.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.6.6) 207 103.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Nil Object Reference) 230.98 103.99 T
(18) 312.78 103.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.6.7) 207 93.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interface Mapping Example) 230.98 93.99 T
(18) 336.35 93.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(4) 54 61.63 T
0 8 Q
( of) 59.56 61.63 T
0 10 Q
( 58) 69.34 61.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(3.7) 167.5 680.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lexical Mapping) 189 680.66 T
(21) 267.6 680.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(3.7.1) 189 667.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping of Identi\336ers) 212.98 667.99 T
(21) 297.46 667.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.7.2) 189 657.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping of Literals) 212.98 657.99 T
(21) 288.56 657.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.7.3) 189 647.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping of Constant Expressions) 212.98 647.99 T
(23) 340.58 647.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.7.4) 189 637.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping of Operators) 212.98 637.99 T
(23) 298.34 637.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(3.8) 167.5 624.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for T) 189 624.66 T
(ypes) 247.18 624.66 T
(24) 275.51 624.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(3.8.1) 189 611.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Arithmetic T) 212.98 611.99 T
(ypes) 299.67 611.99 T
(25) 324.57 611.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.2) 189 601.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Boolean T) 212.98 601.99 T
(ype) 293.46 601.99 T
(26) 314.36 601.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.3) 189 591.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Enumeration T) 212.98 591.99 T
(ypes) 309.46 591.99 T
(27) 334.36 591.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.4) 189 581.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Structure T) 212.98 581.99 T
(ypes) 296.57 581.99 T
(27) 321.46 581.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.5) 189 571.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Union T) 212.98 571.99 T
(ypes) 285.01 571.99 T
(28) 309.9 571.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.6) 189 561.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Sequence T) 212.98 561.99 T
(ypes) 300.14 561.99 T
(29) 325.03 561.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.7) 189 551.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for String T) 212.98 551.99 T
(ypes) 285.01 551.99 T
(31) 309.9 551.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.8) 189 541.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Arrays) 212.98 541.99 T
(32) 288.55 541.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.9) 189 531.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Constants) 212.98 531.99 T
(32) 301.46 531.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.10) 189 521.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for T) 212.98 521.99 T
(ypedefs) 261.89 521.99 T
(33) 297.9 521.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.8.1) 189 511.99 T
(1) 206.2 511.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for T) 212.98 511.99 T
(ypeCodes) 261.89 511.99 T
(34) 305.9 511.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(3.9) 167.5 498.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Any T) 189 498.66 T
(ype) 266.9 498.66 T
(34) 291.34 498.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(3.9.1) 189 485.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Handling T) 212.98 485.99 T
(yped V) 251.22 485.99 T
(alues) 275.53 485.99 T
(34) 302.65 485.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.9.2) 189 475.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Handling Untyped V) 212.98 475.99 T
(alues) 283.53 475.99 T
(34) 310.65 475.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(3.10) 162.5 462.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Exception T) 189 462.66 T
(ypes) 290.23 462.66 T
(34) 318.56 462.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(3.10.1) 189 449.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exception identi\336er) 212.98 449.99 T
(35) 288.56 449.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.10.2) 189 439.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exception members) 212.98 439.99 T
(36) 291.66 439.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.10.3) 189 429.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example Use) 212.98 429.99 T
(38) 268.54 429.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(3.1) 162.87 416.66 T
(1) 175 416.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Operations and Attributes) 189 416.66 T
(40) 355.09 416.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.12) 162.5 400.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 189 400.66 T
(gument Passing Considerations) 199.37 400.66 T
(40) 334.93 400.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(CHAPTER 4) 54 363.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The Mapping of) 189 363.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pseudo-Objects to Ada) 189 347.99 T
(41) 332.09 347.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(4.1) 167.5 330.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Usage) 189 330.66 T
(42) 223.99 330.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.2) 167.5 314.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping Rules) 189 314.66 T
(42) 260.39 314.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.3) 167.5 298.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Relation to the C PIDL Mapping) 189 298.66 T
(42) 330.39 298.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.4) 167.5 282.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Environment) 189 282.66 T
(42) 251.22 282.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5) 167.5 266.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Environment Interface) 189 266.66 T
(42) 289.25 266.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6) 167.5 250.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Named V) 189 250.66 T
(alue) 226.49 250.66 T
(42) 253.15 250.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.7) 167.5 234.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NVList) 189 234.66 T
(42) 229 234.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.8) 167.5 218.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Request) 189 218.66 T
(42) 231.22 218.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.9) 167.5 202.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Context) 189 202.66 T
(42) 230.67 202.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.10) 162.5 186.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Principal) 189 186.66 T
(42) 235.11 186.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.1) 162.87 170.66 T
(1) 175 170.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 189 170.66 T
(ypeCode) 194.41 170.66 T
(42) 239.96 170.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.12) 162.5 154.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BOA) 189 154.66 T
(42) 220.11 154.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.13) 162.5 138.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ORB) 189 138.66 T
(42) 219.56 138.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.14) 162.5 122.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object) 189 122.66 T
(42) 225.66 122.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(5) 528.93 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(CHAPTER 5) 72 677.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Server) 207 677.99 T
(-Side Mapping) 243.26 677.99 T
(43) 340.87 677.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(5.1) 185.5 660.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementing Interfaces) 207 660.66 T
(43) 315.03 660.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.2) 185.5 644.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementing Operations) 207 644.66 T
(44) 319.49 644.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.3) 185.5 628.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Binding Object References to Objects) 207 628.66 T
(44) 368.64 628.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.4) 185.5 612.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Examples) 207 612.66 T
(44) 256.44 612.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(CHAPTER 6) 72 575.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Prede\336ned Language Environment: Package CORBA and) 207 575.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Children) 207 559.99 T
(47) 270 559.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
(6.1) 185.5 542.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA) 207 542.66 T
(47) 287.27 542.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.2) 185.5 526.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Bounded Speci\336cation) 207 526.66 T
(47) 380.6 526.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.3) 185.5 510.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Unbounded_Sequence Speci\336cation) 207 510.66 T
(52) 434.47 510.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(6) 54 61.63 T
0 8 Q
( of) 59.56 61.63 T
0 10 Q
( 58) 69.34 61.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Submitting Organizations) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(7) 528.93 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
3 10 Q
1 (CHAPTER 1) 72 671.33 S
5 24 Q
(Intr) 162 671.33 T
(oduction) 197.11 671.33 T
72 338.92 558 344.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 342.13 467.34 342.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 342.13 143.58 342.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(1.1) 125.93 348.66 T
(Submitting Organizations) 153 348.66 T
0 9 Q
(1) 72 321.59 T
1 11 Q
(The following or) 153 321.59 T
(ganizations are pleased to be able to jointly submit this speci\336cation in) 227.35 321.59 T
(response to OMG\325) 153 309.59 T
(s IDL Ada Language Mapping RFP:) 234.27 309.59 T
6 F
(\245) 153 291.59 T
1 F
(The MITRE Corporation) 171 291.59 T
6 F
(\245) 153 276.59 T
1 F
(Objective Interface Systems, Inc.) 171 276.59 T
72 230.51 558 235.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 233.72 467.34 233.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 233.72 143.58 233.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(1.2) 125.93 240.25 T
(Distinguished Reviewers) 153 240.25 T
0 9 Q
(1) 72 213.18 T
1 11 Q
(The following individuals have participated in the review for this speci\336cation:) 153 213.18 T
6 F
(\245) 153 195.18 T
1 F
(Huet Landry) 171 195.18 T
(Defense Information Systems Agency) 171 183.18 T
6 F
(\245) 153 168.18 T
1 F
(Jon Anthony) 171 168.18 T
(Gensym Corporation) 171 156.18 T
6 F
(\245) 153 141.18 T
1 F
(Gene V) 171 141.18 T
(asilescu) 203.68 141.18 T
(Grumman) 171 129.18 T
6 F
(\245) 153 114.18 T
1 F
(T) 171 114.18 T
(ucker T) 177.34 114.18 T
(aft) 210.47 114.18 T
(Intermetrics) 171 102.18 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Submission Contacts) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(8) 54 61.63 T
0 8 Q
( of) 59.56 61.63 T
0 10 Q
( 58) 69.34 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
6 11 Q
(\245) 135 679.99 T
1 F
(Paul Hickey) 153 679.99 T
(IONA T) 153 667.99 T
(echnologies, Ltd.) 189.19 667.99 T
6 F
(\245) 135 652.99 T
1 F
(Geor) 153 652.99 T
(ge Gunn) 174.79 652.99 T
(Logicon) 153 640.99 T
54 594.92 540 600.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 598.13 449.34 598.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 598.13 125.58 598.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(1.3) 107.93 604.66 T
(Submission Contacts) 135 604.66 T
0 9 Q
(1) 54 577.59 T
1 11 Q
(Questions regarding this document should be directed to:) 135 577.59 T
6 F
(\245) 135 559.59 T
1 F
(Jef) 153 559.59 T
(f Chilton) 165.63 559.59 T
(Objective Interface Systems, Inc.) 153 547.59 T
(1895 Preston White Drive, Suite 250) 153 535.59 T
(Reston, V) 153 523.59 T
(ir) 196.34 523.59 T
(ginia 22091-5448 USA) 202.86 523.59 T
(E-mail: jef) 153 499.59 T
(f.chilton@ois.com) 200.16 499.59 T
(T) 153 487.59 T
(elephone: +1 703 264 1900) 158.95 487.59 T
(Fax: +1 703 264 1721) 153 475.59 T
6 F
(\245) 135 460.59 T
1 F
(V) 153 460.59 T
(ictor Giddings) 160.28 460.59 T
(The MITRE Corporation) 153 448.59 T
(7525 Colshire Drive) 153 436.59 T
(McLean, V) 153 424.59 T
(ir) 202.43 424.59 T
(ginia 22102 USA) 208.96 424.59 T
(E-mail: vtg@mitre.or) 153 400.59 T
(g) 247.88 400.59 T
(T) 153 388.59 T
(elephone: +1 703 883 5722) 158.95 388.59 T
(Fax: +1 703 883 3343) 153 376.59 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Key Design Decisions) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
-0.46 (9) 411.76 60.96 P
0 9 Q
-0.42 ( of 58\251 Copyright 1994 Objective) 417.32 60.96 P
(Interface Systems, Inc.) 207 49.96 T
3 10 Q
1 (CHAPTER 2) 72 671.33 S
5 24 Q
(Design Rationale) 162 671.33 T
72 338.92 558 344.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 342.13 467.34 342.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 342.13 143.58 342.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(2.1) 125.93 348.66 T
(Key Design Decisions) 153 348.66 T
0 12 Q
(2.1.1) 117.58 314.92 T
(Conformity) 153 314.92 T
(2.1.2) 117.58 286.92 T
(Ada Implementation Requirements) 153 286.92 T
(2.1.3) 117.58 258.92 T
(Ada Data Layout Requirements) 153 258.92 T
(2.1.4) 117.58 230.92 T
(Performance and Ef\336ciency) 153 230.92 T
(2.1.5) 117.58 202.92 T
(Usability) 153 202.92 T
0 9 Q
(1) 72 185.59 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(RFP-mandated Requirements) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(10) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
54 668.92 540 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 672.13 449.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 672.13 125.58 672.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(2.2) 107.93 678.66 T
(RFP-mandated Requirements) 135 678.66 T
0 12 Q
(2.2.1) 99.58 644.92 T
(Maps Entire IDL Language) 135 644.92 T
(2.2.2) 99.58 616.92 T
(Consistent Style) 135 616.92 T
(2.2.3) 99.58 588.92 T
(Justi\336cation of IDL, CORBA, Object Model Extensions) 135 588.92 T
(2.2.4) 99.58 560.92 T
(No Implementation Descriptions) 135 560.92 T
0 9 Q
(1) 54 543.59 T
54 497.51 540 502.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 500.72 449.34 500.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 500.72 125.58 500.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(2.3) 107.93 507.25 T
(Evaluation Criteria) 135 507.25 T
0 12 Q
(2.3.1) 99.58 473.51 T
(Reliability) 135 473.51 T
(2.3.2) 99.58 445.51 T
(Performance) 135 445.51 T
(2.3.3) 99.58 417.51 T
(Portability) 135 417.51 T
54 370.1 540 375.51 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 373.31 449.34 373.31 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 373.31 125.58 373.31 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(2.4) 107.93 379.84 T
(Overview and Design Philosophy) 135 379.84 T
0 9 Q
(1) 54 352.77 T
1 11 Q
(The Ada 9X language mapping provides the ability to access and implement CORBA) 135 352.77 T
-0.25 (objects in programs written in the Ada 9X programming language. The mapping is based on) 135 340.77 P
(the de\336nition of the Object Request Broker \050ORB\051 in the) 135 328.77 T
5 F
(Common Object Request Br) 387.98 328.77 T
(oker) 510.69 328.77 T
(Ar) 135 316.77 T
(chitectur) 145.59 316.77 T
(e and Speci\336cation) 184.29 316.77 T
1 F
(, Revision 1.2 \050Object Management Group, 1993\051.) 268 316.77 T
0 9 Q
(2) 54 298.77 T
1 11 Q
(The mapping speci\336es how CORBA objects \050objects de\336ned by IDL\051 are mapped to Ada) 135 298.77 T
(packages and types. Each CORBA object is represented by an Ada tagged type reference.) 135 286.77 T
(The operations of mapped CORBA objects are invoked by calling primitive subprograms) 135 274.77 T
(de\336ned in the package associated with that object\325) 135 262.77 T
(s CORBA interface.) 355.88 262.77 T
0 12 Q
(2.4.1) 99.58 236.1 T
(Overview of Mapping) 135 236.1 T
0 9 Q
(1) 54 218.77 T
1 11 Q
(The Ada language mapping uses the Ada languages\325) 135 218.77 T
(s support for object oriented program-) 365.65 218.77 T
(ming\321packages, tagged types, and late binding\321to present the object model described by) 135 206.77 T
(the CORBA Architecture and Speci\336cation.) 135 194.77 T
0 9 Q
(2) 54 176.77 T
1 11 Q
(Challenges that face the designer of an IDL to Ada mapping include:) 135 176.77 T
6 F
(\245) 135 158.77 T
1 F
(Mapping the name space associated with IDL \336les to Ada compilation units;) 153 158.77 T
6 F
(\245) 135 143.77 T
1 F
(Mapping mutually dependent IDL interfaces to Ada packages and tagged types;) 153 143.77 T
6 F
(\245) 135 128.77 T
1 F
(Dealing with the scopeless nature of ANSI C++ preprocessor; and) 153 128.77 T
6 F
(\245) 135 113.77 T
1 F
(Facilitating automatic memory reclamation in the generated Ada interfaces.) 153 113.77 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Overview and Design Philosophy) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
-0.46 (1) 406.75 60.96 P
-0.46 (1) 411.76 60.96 P
0 9 Q
-0.42 ( of 58\251 Copyright 1994 Objective) 417.32 60.96 P
(Interface Systems, Inc.) 207 49.96 T
(3) 72 679.99 T
1 11 Q
(The rest of this section summarizes how IDL and CORBA constructs are expressed in the) 153 679.99 T
(Ada mapping.) 153 667.99 T
0 12 Q
(2.4.1.1) 108 643.33 T
(Interfaces and T) 153 643.33 T
(agged T) 244.14 643.33 T
(ypes) 289.26 643.33 T
0 9 Q
(1) 72 624.99 T
1 11 Q
-0.29 (An IDL interface is mapped to an Ada package which contains a tagged reference type. This) 153 624.99 P
(package also contains the tagged type\325) 153 612.99 T
(s primitive subprograms that correspond to the IDL) 321.94 612.99 T
(interface\325) 153 600.99 T
(s operations.) 194.54 600.99 T
0 9 Q
(2) 72 582.99 T
1 11 Q
(All object reference types are derived from an implementation-de\336ned common reference) 153 582.99 T
(object,) 153 570.99 T
7 F
(Corba.Ref) 185.38 570.99 T
1 F
(. This allows implementations of the mapping to of) 244.78 570.99 T
(fer automatic mem-) 469.78 570.99 T
(ory management and improves the separation of an interface and its implementation.) 153 558.99 T
0 12 Q
(2.4.1.2) 108 534.33 T
(Operations) 153 534.33 T
0 9 Q
(1) 72 515.99 T
1 11 Q
-0.27 (The Ada mapping provides both a dynamic interface and a static interface for invoking oper-) 153 515.99 P
(ations on CORBA objects. The Dynamic Invocation Interface \050DII\051 consists of a set of) 153 503.99 T
-0.29 (classes that allow operation requests to be built and invoked. The Static Invocation Interface) 153 491.99 P
(provides automatically generated Ada speci\336cations and stub bodies that allow CORBA) 153 479.99 T
(objects to be used as if they were Ada objects.) 153 467.99 T
0 12 Q
(2.4.1.3) 108 443.33 T
(Attributes) 153 443.33 T
0 9 Q
(1) 72 424.99 T
1 11 Q
(The Ada mapping models attributes as pairs of subprograms declared in an interface pack-) 153 424.99 T
(age, one to set and one to get the attribute value. An attribute may be read-only) 153 412.99 T
(, in which) 500.25 412.99 T
(case only a retrieval function is provided.) 153 400.99 T
0 9 Q
(2) 72 382.99 T
1 11 Q
(The name of the retrieval function is formed by adding \322) 153 382.99 T
7 F
(Get_) 402.28 382.99 T
1 F
(\323 to the beginning of the) 428.68 382.99 T
(attribute. \322) 153 370.99 T
7 F
(Set_) 200.05 370.99 T
1 F
(\323 is used to form the names of attribute set procedures.) 226.45 370.99 T
0 12 Q
(2.4.1.4) 108 346.33 T
(Inheritance) 153 346.33 T
0 9 Q
(1) 72 327.99 T
1 11 Q
(IDL inheritance allows an interface to be derived from other interfaces. Objects that are) 153 327.99 T
(instantiations of a derived interface can be used wherever objects of the interfaces from) 153 315.99 T
(which they are derived can be used.) 153 303.99 T
0 9 Q
(2) 72 285.99 T
1 11 Q
(In the Ada mapping this means references to objects associated with, for example, the inter-) 153 285.99 T
(face) 153 273.99 T
7 F
(Car) 174.07 273.99 T
1 F
(, which is derived from the interface) 193.43 273.99 T
7 F
(Vehicle) 355.94 273.99 T
1 F
(, can be used anywhere references) 402.14 273.99 T
(to) 153 261.99 T
7 F
(Vehicle) 164.31 261.99 T
1 F
( can. The Ada) 210.51 261.99 T
7 F
( \325CLASS) 272.21 261.99 T
1 F
( prede\336ned attribute permits reference variables and) 318.41 261.99 T
(operation parameters to be de\336ned with a class-wide type.) 153 249.99 T
0 9 Q
(3) 72 231.99 T
1 11 Q
-0.2 (Multiple inheritance is accomplished by augmenting the Ada language\325) 153 231.99 P
-0.2 (s tagged type inherit-) 465.43 231.99 P
-0.15 (ance with mix-in inheritance. An implementation of the mapping stores instances of a multi-) 153 219.99 P
-0.2 (ply-derived interface\325) 153 207.99 P
-0.2 (s secondary parent\325) 247.8 207.99 P
-0.2 (s types and provides \322cover\323 subprograms for their) 332.32 207.99 P
(operations.) 153 195.99 T
0 12 Q
(2.4.1.5) 108 171.33 T
(Data T) 153 171.33 T
(ypes) 188.78 171.33 T
0 9 Q
(\310 T) 72 145.66 T
(O DO) 84.84 145.66 T
1 10 Q
(Summarize section 4.0 here.) 153 145.66 T
0 12 Q
(2.4.1.6) 108 120.33 T
(Exceptions) 153 120.33 T
0 9 Q
(\310 T) 72 94.66 T
(O DO) 84.84 94.66 T
1 10 Q
(Summarize section 5.0 here.) 153 94.66 T
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Overview and Design Philosophy) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(12) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 12 Q
(2.4.1.7) 90 679.33 T
(Mapping Summary) 135 679.33 T
0 9 Q
(1) 54 660.99 T
1 11 Q
(In summary:) 135 660.99 T
0 12 Q
(2.4.2) 99.58 459.33 T
(Design Philosophy) 135 459.33 T
0 9 Q
(1) 54 441.99 T
1 11 Q
(The following subsections describe the features identi\336ed as necessary to the design goals) 135 441.99 T
-0.26 (\050Design Goals\051; features that are not considered necessary \050Design Non-Requirements\051; and) 135 429.99 P
(features that re\337ect major decisions in the design process \050Key Design Decisions\051.) 135 417.99 T
0 12 Q
(2.4.2.1) 90 393.33 T
(Design Goals) 135 393.33 T
0 9 Q
(1.) 153 376.66 T
1 10 Q
(Conform with the Current CORBA 1.2 Speci\336cation) 166.3 376.66 T
(The Ada mapping requires as few changes as possible to the CORBA 1.2 speci\336cation while) 166.32 361.66 T
(using the Ada language\325) 166.32 349.66 T
(s object-oriented features in a manner consistent with the CORBA) 263.25 349.66 T
(architecture.) 166.32 337.66 T
-0.01 (A fundamental principle of the CORBA speci\336cation is that CORBA objects are de\336ned and) 166.32 322.66 P
(implemented independently of a speci\336c programming language. It must be possible to use) 166.32 310.66 T
(the Ada language mapping to invoke operations on objects that are implemented in other lan-) 166.32 298.66 T
(guages.) 166.32 286.66 T
0 9 Q
(2.) 153 271.66 T
1 10 Q
(Provide an Easy to Use Mapping) 166.3 271.66 T
(The Ada language mapping is designed to facilitate the writing of reliable, well-engineered) 166.32 256.66 T
(programs that use the ORB. Memory management, exception handling, and compile-time) 166.32 244.66 T
(type checking are areas speci\336cally addressed by the mapping.) 166.32 232.66 T
0 9 Q
(3.) 153 217.66 T
1 10 Q
(Encapsulate the Implementation of the Language Mapping) 166.3 217.66 T
-0.35 (Ada packages are used to encapsulate the implementation of the language mapping. Access to) 166.32 202.66 P
(data is provided through access subprograms rather than through public data.) 166.32 190.66 T
0 9 Q
(4.) 153 175.66 T
1 10 Q
(Support as Many Ada Compilers and ORB Implementations as Possible) 166.3 175.66 T
(The mapping uses Ada language features speci\336ed by the proposed ANSI/ISO standard for) 166.32 160.66 T
-0.06 (the Ada programming language. It is designed to work with ORB implementations from mul-) 166.32 148.66 P
(tiple suppliers.) 166.32 136.66 T
0 8 Q
(IDL construct) 195 638.99 T
(Ada construct) 357 638.99 T
1 10 Q
(Source file) 195 623.66 T
(Package) 357 623.66 T
(Module) 195 607.66 T
(Child Package) 357 607.66 T
(Interface) 195 591.66 T
(Child Package with Tagged Type) 357 591.66 T
(Operation) 195 575.66 T
(Primitive Subprogram) 357 575.66 T
(Attribute) 195 559.66 T
(\322Set_\323 and \322Get_\323 subprograms) 357 559.66 T
(Inheritance,) 195 543.66 T
(    Single) 195 531.66 T
(    Multiple) 195 519.66 T
(    Tagged Type Inheritance) 357 531.66 T
(    Mix-in Inheritance) 357 519.66 T
(Data types) 195 503.66 T
(Ada types) 357 503.66 T
(Exception) 195 487.66 T
(Exception & record) 357 487.66 T
189 651.08 189 482.58 2 L
V
0.5 H
0 Z
N
351 651.58 351 482.08 2 L
V
0.25 H
N
513 651.08 513 482.58 2 L
V
0.5 H
N
188.75 651.33 513.25 651.33 2 L
V
N
188.75 634.33 513.25 634.33 2 L
V
2 H
N
188.75 618.33 513.25 618.33 2 L
V
0.25 H
N
188.75 602.33 513.25 602.33 2 L
V
N
188.75 586.33 513.25 586.33 2 L
V
N
188.75 570.33 513.25 570.33 2 L
V
N
188.75 554.33 513.25 554.33 2 L
V
N
188.75 514.33 513.25 514.33 2 L
V
N
188.75 498.33 513.25 498.33 2 L
V
N
188.75 482.33 513.25 482.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(General Ada Language Mapping Conventions) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
-0.46 (13) 406.2 60.96 P
0 9 Q
-0.42 ( of 58\251 Copyright 1994 Objective) 417.32 60.96 P
(Interface Systems, Inc.) 207 49.96 T
0 12 Q
(2.4.2.2) 108 679.33 T
(Design Non-Requirements) 153 679.33 T
(2.4.2.3) 108 652.33 T
(Key Design Decisions) 153 652.33 T
(2.4.3) 117.58 623.33 T
(Glossary of T) 153 623.33 T
(erms) 228.8 623.33 T
0 9 Q
(1) 72 605.99 T
1 11 Q
(This section de\336nes terms used in the document that are not de\336ned in the glossary of the) 153 605.99 T
-0.01 (CORBA speci\336cation. They are mostly terms from the Ada 9X Reference Manual \050RM9X\051.) 153 593.99 P
0 10 Q
(Package) 157.42 576.66 T
1 F
(Packages are program units that allow the speci\336cation of groups of logically related) 207 576.66 T
(entities. T) 207 564.66 T
(ypically) 246.3 564.66 T
(, a package contains the declaration of a type along with the declara-) 277.87 564.66 T
(tions of primitive subprograms of the type, which can be called from outside the pack-) 207 552.66 T
(age, while the inner working remain hidden from outside users.) 207 540.66 T
0 F
(Primitive subprogram) 94.64 522.66 T
1 F
(Primitive subprograms are the subprograms associated with a type that are either pre-) 207 522.66 T
(de\336ned operators or) 207 510.66 T
(, for a derived type, inherited user) 286.58 510.66 T
(-de\336ned subprograms.) 421.9 510.66 T
0 F
(T) 139.84 492.66 T
(agged type) 145.21 492.66 T
1 F
(The values of a tagged type have a run-time type tag, which indicates the speci\336c type) 207 492.66 T
-0.16 (from which the value originated. An operand of a class-wide tagged type can be used in) 207 480.66 P
(a dispatching call; the tag indicates which subprogram body to invoke.) 207 468.66 T
0 12 Q
(2.4.4) 117.58 441.33 T
(RFP Requirements and Criteria) 153 441.33 T
0 9 Q
(1) 72 423.99 T
1 11 Q
(Although not submitted in response to an RFP) 153 423.99 T
(, the following requirements and criteria are) 355.6 423.99 T
(addressed in this document. They are drawn from other RFPs issued by the OMG.) 153 411.99 T
0 12 Q
(2.4.4.1) 108 387.33 T
(Requirements:) 153 387.33 T
0 9 Q
(1) 72 368.99 T
1 11 Q
(Provide a complete language mapping) 153 368.99 T
0 9 Q
(2) 72 350.99 T
1 11 Q
(Use a consistent style) 153 350.99 T
0 9 Q
(3) 72 332.99 T
1 11 Q
(Provide a design rational) 153 332.99 T
0 9 Q
(4) 72 314.99 T
1 11 Q
(Identify extensions to CORBA) 153 314.99 T
0 9 Q
(5) 72 296.99 T
1 11 Q
(Do not provide implementation descriptions) 153 296.99 T
0 9 Q
(6) 72 278.99 T
1 11 Q
(Identify Ada language features) 153 278.99 T
0 12 Q
(2.4.4.2) 108 254.33 T
(Criteria:) 153 254.33 T
0 9 Q
(7) 72 233.99 T
1 11 Q
(Reliability) 153 233.99 T
0 9 Q
(8) 72 215.99 T
1 11 Q
(Performance) 153 215.99 T
72 169.92 558 175.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 173.13 467.34 173.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 173.13 143.58 173.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(2.5) 125.93 179.66 T
(General Ada Language Mapping Conventions) 153 179.66 T
0 9 Q
(1) 72 152.59 T
1 11 Q
(The Ada language mapping de\336nes how IDL and CORBA constructs map to Ada con-) 153 152.59 T
(structs. The result is an Ada library that developers use to implement and access CORBA) 153 140.59 T
(objects.) 153 128.59 T
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(General Ada Language Mapping Conventions) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(14) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 12 Q
(2.5.1) 99.58 679.33 T
(Implementation Considerations) 135 679.33 T
0 9 Q
(2) 54 659.99 T
1 11 Q
(The Ada language mapping can be implemented a number of ways. Stub packages, ORB) 135 659.99 T
(packages, and data type packages may vary between implementations of the mapping. This) 135 647.99 T
-0.31 (is a natural consequence of using an object-oriented programming language\321the implemen-) 135 635.99 P
(tation of a package should not be visible to its user) 135 623.99 T
(.) 357.43 623.99 T
0 9 Q
(3) 54 605.99 T
1 11 Q
(This mapping puts no requirement on the Ada inheritance hierarchy used to implement the) 135 605.99 T
(reference types. For example, dif) 135 593.99 T
(ferent implementations may arrange the hierarchy dif) 280.2 593.99 T
(fer-) 514.61 593.99 T
(ently or use dif) 135 581.99 T
(ferent \322abstract\323 tagged types to provide the functionality described here.) 201.1 581.99 T
0 12 Q
(2.5.2) 99.58 555.33 T
(Standard Functions) 135 555.33 T
0 9 Q
(1) 54 537.99 T
1 11 Q
(Default Constructor) 135 537.99 T
0 9 Q
(2) 54 519.99 T
1 11 Q
(Copy Constructor) 135 519.99 T
0 9 Q
(3) 54 501.99 T
1 11 Q
(Destructor) 135 501.99 T
0 9 Q
(4) 54 483.99 T
1 11 Q
(Assignment Operator) 135 483.99 T
0 12 Q
(2.5.3) 99.58 457.33 T
(Calling Convention) 135 457.33 T
0 9 Q
(1) 54 439.99 T
1 11 Q
(Like Ada, IDL allows passing parameters to operations using in, out, and in-out modes and) 135 439.99 T
(returning values as results. The Ada language mapping preserves these in/out modes in an) 135 427.99 T
(operation\325) 135 415.99 T
(s subprogram speci\336cation. Parameters may be passed by value or by reference) 179.6 415.99 T
(object.) 135 403.99 T
0 9 Q
(2) 54 385.99 T
1 11 Q
(This Ada language mapping uses the \336rst parameter to operation subfunctions and proce-) 135 385.99 T
(dures to refer to the object that the operation is being performed on.) 135 373.99 T
0 9 Q
(3) 54 355.99 T
1 11 Q
-0.31 (Non-void IDL interface operations that have out-mode parameters are mapped to Ada proce-) 135 355.99 P
(dures \050rather than functions\051. The result is returned via the procedures \336nal parameter) 135 343.99 T
(,) 511.21 343.99 T
(\322) 135 331.99 T
7 F
(Result) 139.88 331.99 T
1 F
(\323.) 179.48 331.99 T
0 12 Q
(2.5.3.1) 90 307.33 T
(Memory Management) 135 307.33 T
0 9 Q
(1) 54 288.99 T
1 11 Q
(Implementations of the mapping must permit automatic memory management. The lan-) 135 288.99 T
-0.22 (guage mapping does not specify what kind, if any) 135 276.99 P
-0.22 (, memory management facility is provided) 351.59 276.99 P
(by an implementation.) 135 264.99 T
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Scoped Names) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(15) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
3 10 Q
1 (CHAPTER 3) 72 671.33 S
5 24 Q
(The Mapping of IDL to Ada) 162 671.33 T
72 338.92 558 344.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 342.13 467.34 342.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 342.13 143.58 342.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.1) 125.93 348.66 T
(Scoped Names) 153 348.66 T
0 9 Q
(1) 72 321.59 T
1 11 Q
(Scoped names in IDL are speci\336ed by Ada scopes:) 153 321.59 T
6 F
(\245) 153 303.59 T
1 F
(IDL \336les are mapped to Ada packages.) 171 303.59 T
6 F
(\245) 153 288.59 T
1 F
(IDL modules are mapped to Ada packages.) 171 288.59 T
6 F
(\245) 153 273.59 T
1 F
(IDL interfaces are mapped to Ada child packages associated with their enclosing name) 171 273.59 T
(scope.) 171 261.59 T
6 F
(\245) 153 246.59 T
1 F
(All IDL constructs scoped to an interface are accessed via Ada scoped names. For) 171 246.59 T
(example, if a type) 171 234.59 T
3 F
(mode) 252.57 234.59 T
1 F
( were de\336ned in interface printer then the Ada type would be) 278.23 234.59 T
(referred to as) 171 222.59 T
6 F
(Printer.Mode) 231.77 222.59 T
1 F
(.) 310.98 222.59 T
72 176.51 558 181.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 179.72 467.34 179.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 179.72 143.58 179.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.2) 125.93 186.25 T
(Ada T) 153 186.25 T
(ype Size Requirements) 188.15 186.25 T
0 9 Q
(1) 72 159.18 T
1 11 Q
-0.01 (The sizes of the Ada types used to represent IDL types are implementation dependent. That) 153 159.18 P
(is, this mapping makes no requirements as to the T\325SIZE for anything except arithmetic) 153 147.18 T
(types \050See \322Mapping for Arithmetic T) 153 135.18 T
(ypes\323 on page) 320.56 135.18 T
(25.\051 and string \050See \322Mapping for) 385.63 135.18 T
(String T) 153 123.18 T
(ypes\323 on page) 188.6 123.18 T
(31.\051.) 253.66 123.18 T
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(IDL Files) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(16) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
54 668.92 540 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 672.13 449.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 672.13 125.58 672.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.3) 107.93 678.66 T
(IDL Files) 135 678.66 T
0 9 Q
(1) 54 651.59 T
1 11 Q
(The naming scope de\336ned by an IDL \336le that does not contain a) 135 651.59 T
7 F
(module) 420.04 651.59 T
1 F
( de\336nition is) 459.64 651.59 T
(mapped to an Ada package. The package name shall be formed by removing the extension,) 135 639.59 T
(if any) 135 627.59 T
(, from the IDL source \336le name. \050If all the IDL statements in a \336le are enclosed by a) 159.64 627.59 T
-0.14 (single) 135 615.59 P
7 F
-0.35 (module) 163.88 615.59 P
1 F
-0.14 ( de\336nition, that module\325) 203.48 615.59 P
-0.14 (s name is used instead of the \336le name. This permits) 308.78 615.59 P
(operating system-speci\336c \336le naming rules to be isolated from the resulting Ada.\051) 135 603.59 T
0 9 Q
(2) 54 585.59 T
1 11 Q
-0.28 (While the CORBA Architecture and Speci\336cation document \050Revision 1.2\051 states that \322T) 135 585.59 P
-0.28 (ext) 524.08 585.59 P
-0.38 (in \336les included with a) 135 573.59 P
7 F
-0.91 (#include) 236.07 573.59 P
1 F
-0.38 ( directive is treated as if it appeared in the including \336le,\323) 288.87 573.59 P
(the authors believe it is natural for these includes to be mapped to Ada) 135 561.59 T
7 F
(with) 447.84 561.59 T
1 F
( statements.) 474.24 561.59 T
(This is consistent with the primary use of the preprocessor facility which is to make avail-) 135 549.59 T
-0.4 (able de\336nitions from other IDL speci\336cations and avoids the problem of redundant Ada type) 135 537.59 P
(declarations that a literal interpretation of the inclusion would cause.) 135 525.59 T
0 9 Q
(3) 54 507.59 T
1 11 Q
(A consequence of the include-to-with mapping is the prohibition of IDL speci\336cations that) 135 507.59 T
(contain circular preprocessor references. For example, the following IDL \050in two \336les\051 is) 135 495.59 T
(disallowed by the Ada language mapping and must be combined in one \336le:) 135 483.59 T
0 9 Q
(4) 54 338.59 T
1 11 Q
(The following IDL source \336le de\336nes the same interfaces without introducing circular) 135 338.59 T
(include \336les:) 135 326.59 T
54 161.51 540 166.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 164.72 449.34 164.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 164.72 125.58 164.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.4) 107.93 171.25 T
(CORBA Module) 135 171.25 T
0 9 Q
(1) 54 144.18 T
1 11 Q
(The mapping relies on some prede\336ned types, packages, and functions. In CORBA 1.2,) 135 144.18 T
-0.4 (these are logically de\336ned in a module named) 135 132.18 P
3 F
-0.4 (CORBA) 336.48 132.18 P
1 F
-0.4 ( that is automatically accessible from) 376.2 132.18 P
(an Ada compilation unit that includes a header \336le generated from an IDL speci\336cation. In) 135 120.18 T
(the examples presented in this document, CORBA de\336nitions are referenced without the) 135 108.18 T
0 8 Q
(File chicken.idl:) 141 457.59 T
(File egg.idl:) 303 457.59 T
7 9 Q
(#ifndef CHICKEN) 141 442.92 T
(#def) 141 431.92 T
(ine CHICKEN) 162.6 431.92 T
(interface Chicken;) 141 420.92 T
(#include <egg.idl>) 141 409.92 T
(interface Chicken {) 141 398.92 T
(    Egg lay\050\051;) 141 387.92 T
(};) 141 376.92 T
(#endif) 141 365.92 T
(#ifndef EGG) 303 442.92 T
(#def) 303 431.92 T
(ine EGG) 324.6 431.92 T
(interface Egg;) 303 420.92 T
(#include <chicken.idl>) 303 409.92 T
(interface Egg {) 303 398.92 T
(    Chicken hatch\050\051;) 303 387.92 T
(};) 303 376.92 T
(#endif) 303 365.92 T
0 8 Q
(File poultry) 141 300.59 T
(.idl:) 183.53 300.59 T
7 9 Q
(interface Chicken;) 141 285.92 T
(interface Egg;) 141 274.92 T
(interface Chicken {) 141 263.92 T
(    Egg lay\050\051;) 141 252.92 T
(};) 141 241.92 T
(interface Egg {) 141 230.92 T
(    Chicken hatch\050\051;) 141 219.92 T
(};) 141 208.92 T
135 469.67 135 361.17 2 L
V
0.5 H
0 Z
N
297 470.17 297 360.67 2 L
V
N
459 469.67 459 361.17 2 L
V
N
134.75 469.92 459.25 469.92 2 L
V
N
134.75 452.92 459.25 452.92 2 L
V
2 H
N
134.75 360.92 459.25 360.92 2 L
V
0.5 H
N
135 312.67 135 204.17 2 L
V
N
351 312.67 351 204.17 2 L
V
N
134.75 312.92 351.25 312.92 2 L
V
N
134.75 295.92 351.25 295.92 2 L
V
2 H
N
134.75 203.92 351.25 203.92 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping Modules) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(17) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
1 11 Q
(explicit quali\336cation for simplicity) 153 679.99 T
(. In practice, identi\336ers from the CORBA module would) 305.37 679.99 T
(require the) 153 667.99 T
6 F
(CORBA.) 203.09 667.99 T
1 F
( package quali\336er) 242.69 667.99 T
(.) 320.29 667.99 T
72 621.92 558 627.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 625.13 467.34 625.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 625.13 143.58 625.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.5) 125.93 631.66 T
(Mapping Modules) 153 631.66 T
0 9 Q
(1) 72 604.59 T
1 11 Q
(Modules can contain the declarations of other modules and of interfaces, types, constants,) 153 604.59 T
(and exceptions.) 153 592.59 T
0 9 Q
(2) 72 574.59 T
1 11 Q
(Modules become child packages to the corresponding package for the enclosing IDL \336le or) 153 574.59 T
(module. The names of declarations scoped within IDL modules map directly to names) 153 562.59 T
(scoped within the corresponding Ada packages.) 153 550.59 T
0 12 Q
(3.5.1) 117.58 523.92 T
(Constants and Exceptions) 153 523.92 T
0 9 Q
(1) 72 506.59 T
1 11 Q
(IDL constant and exception de\336nitions within a module or interface de\336nition become Ada) 153 506.59 T
(constant and exception declarations inside the module or interface\325) 153 494.59 T
(s package.) 446.89 494.59 T
0 12 Q
(3.5.2) 117.58 467.92 T
(Global Names) 153 467.92 T
0 9 Q
(1) 72 450.59 T
1 11 Q
(Global names are names declared in IDL outside of any interface or module. These names) 153 450.59 T
(are scoped in the package corresponding to the \336le they appear in.) 153 438.59 T
72 392.51 558 397.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 395.72 467.34 395.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 395.72 143.58 395.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.6) 125.93 402.25 T
(Mapping for Interfaces) 153 402.25 T
0 9 Q
(1) 72 375.18 T
1 11 Q
(IDL interfaces become child packages within the package associated with their enclosing) 153 375.18 T
(name scope. This \322interface package\323 de\336nes a new tagged type, \322) 153 363.18 T
7 F
(Ref) 446.24 363.18 T
1 F
(\323, used to represent) 466.04 363.18 T
(object references and to invoke operations. This reference type is derived from an imple-) 153 351.18 T
(mentation-speci\336c type called \322) 153 339.18 T
7 F
(Corba.Ref) 292.61 339.18 T
1 F
(\323.) 352.01 339.18 T
0 9 Q
(2) 72 321.18 T
1 11 Q
(The names of constant, exception, and interface declarations scoped within interfaces map) 153 321.18 T
(directly to Ada names.) 153 309.18 T
0 9 Q
(\310 T) 72 285.85 T
(O DO) 84.84 285.85 T
1 10 Q
(Determine if exceptions declared in interfaces contribute to the \322withing problem\323?) 153 285.85 T
0 12 Q
(3.6.1) 117.58 258.51 T
(Object Reference T) 153 258.51 T
(ypes) 261.48 258.51 T
0 9 Q
(1) 72 241.18 T
1 11 Q
-0.14 (The use of an interface type in IDL denotes an object reference. Each object reference maps) 153 241.18 P
(to an Ada controlled tagged type. For interface) 153 229.18 T
3 F
(A) 361.65 229.18 T
1 F
(, the object reference type is call A.Ref) 369.59 229.18 T
(\050type) 153 217.18 T
3 F
(Ref) 178.35 217.18 T
1 F
( in package) 194.84 217.18 T
3 F
(A) 247.69 217.18 T
1 F
(\051.) 255.63 217.18 T
0 9 Q
(2) 72 199.18 T
1 11 Q
(The IDL interface operations are de\336ned for the Ada) 153 199.18 T
3 F
(Ref) 387.89 199.18 T
1 F
( tagged type as a primitive subpro-) 404.38 199.18 T
(gram. For example, if an interface de\336nes an operation called) 153 187.18 T
3 F
(Op) 426.1 187.18 T
1 F
( with no parameters and) 440.77 187.18 T
3 F
(My_Ref) 153 175.18 T
1 F
( is a reference to the interface type, then a call would be written) 190.87 175.18 T
3 F
(A.Op\050My_Ref\051) 473.43 175.18 T
1 F
(.) 543.99 175.18 T
0 9 Q
(3) 72 157.18 T
1 11 Q
(The Ref controlled tagged type must automatically release its object reference when it is) 153 157.18 T
(deallocated, assigned a new object reference, or it passes out of scope.) 153 145.18 T
0 9 Q
(4) 72 127.18 T
1 11 Q
(The implementation of the reference type is invisible to clients.) 153 127.18 T
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Interfaces) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(18) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 12 Q
(3.6.2) 99.58 679.33 T
(Interfaces and Inheritance) 135 679.33 T
0 9 Q
(1) 54 661.99 T
1 11 Q
0 (The reference type associated with a derived interface is derived from the parent interface\325) 135 661.99 P
0 (s) 532.97 661.99 P
(reference type and includes among its primitive subprograms those of its parent type.) 135 649.99 T
0 12 Q
(3.6.3) 99.58 623.33 T
(W) 135 623.33 T
(idening Object References) 146.22 623.33 T
0 9 Q
(1) 54 605.99 T
1 11 Q
(W) 135 605.99 T
(idening is supported by Ada type conversion. W) 144.94 605.99 T
(idening may be accomplished either) 357.14 605.99 T
(implicitly through parameter passing and assignment or through explicit conversion.) 135 593.99 T
0 9 Q
(\310 T) 54 570.66 T
(O DO) 66.84 570.66 T
1 10 Q
(Include example of widening.) 135 570.66 T
0 12 Q
(3.6.4) 99.58 543.33 T
(Object Reference Operations) 135 543.33 T
(3.6.5) 99.58 515.33 T
(Narrowing Object References) 135 515.33 T
0 9 Q
(1) 54 497.99 T
1 11 Q
(Often it is necessary to convert an object reference from a more general type to a more spe-) 135 497.99 T
(ci\336c, derived type. Object reference narrowing may involve the ORB so a special primitive) 135 485.99 T
(subprogram is included in each interface package to check the narrowing operation at run-) 135 473.99 T
(time.) 135 461.99 T
0 9 Q
(\310 T) 54 438.66 T
(O DO) 66.84 438.66 T
1 10 Q
(Determine semantics of this operation.) 135 438.66 T
0 12 Q
(3.6.6) 99.58 411.33 T
(Nil Object Reference) 135 411.33 T
0 9 Q
(\310 T) 54 386.66 T
(O DO) 66.84 386.66 T
1 10 Q
(De\336ne Nil Object Reference.) 135 386.66 T
0 12 Q
(3.6.7) 99.58 359.33 T
(Interface Mapping Example) 135 359.33 T
0 9 Q
(1) 54 341.99 T
1 11 Q
(The following IDL speci\336cation) 135 341.99 T
7 F
(:) 277.07 341.99 T
0 8 Q
(File barn.idl) 141 315.99 T
7 9 Q
(interface Feed {) 141 301.33 T
(    attribute long weight;) 141 290.33 T
(};) 141 279.33 T
(interface Animal {) 141 268.33 T
(    enum State {SLEEPING, AWAKE};) 141 257.33 T
(    boolean eat\050inout Feed bag\051;) 141 246.33 T
(    // returns true if animal is full) 141 235.33 T
(    attribute State alertness;) 141 224.33 T
(};) 141 213.33 T
(interface Horse: Animal{) 141 198.33 T
(    void trot\050in short distance\051;) 141 187.33 T
(};) 141 176.33 T
135 328.08 135 171.58 2 L
V
0.5 H
0 Z
N
378 328.08 378 171.58 2 L
V
N
134.75 328.33 378.25 328.33 2 L
V
N
134.75 311.33 378.25 311.33 2 L
V
2 H
N
134.75 171.33 378.25 171.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Interfaces) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(19) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(2) 72 679.99 T
1 11 Q
(is mapped to these Ada packages:) 153 679.99 T
0 8 Q
(File barn.ads) 159 653.99 T
7 9 Q
(with Corba;) 159 639.33 T
(package Barn is) 159 624.33 T
(    type Animal_State is \050SLEEPING, AWAKE\051;) 159 613.33 T
(end Barn;) 159 602.33 T
0 8 Q
(File barn-feed.ads) 159 570.99 T
7 9 Q
(package Barn.Feed is) 159 556.33 T
(    type Ref is new Corba.Ref with null record;) 159 545.33 T
(    procedure Set_Weight) 159 534.33 T
(        \050Self : in Ref;) 159 523.33 T
(         To   : in Corba.Integer_32\051;) 159 512.33 T
(    function  Get_Weight) 159 501.33 T
(        \050Self : in Ref\051 return Corba.Integer_32;) 159 490.33 T
(end Barn.Feed;) 159 479.33 T
0 8 Q
(File barn-animal.ads) 159 447.99 T
7 9 Q
(with Barn.Feed;) 159 433.33 T
(package Barn.Animal is) 159 418.33 T
(    type Ref is new Corba.Ref with null record;) 159 407.33 T
(    subtype State is Barn.Animal_State;) 159 396.33 T
(    procedure Eat) 159 385.33 T
(        \050Self    : in     Ref;) 159 374.33 T
(         Bag     : in out Barn.Feed.Ref\325CLASS;) 159 363.33 T
(         Returns :    out Boolean\051;) 159 352.33 T
(    -- returns true if animal is full) 159 341.33 T
(    procedure Set_Alertness) 159 330.33 T
(        \050Self : in Ref;) 159 319.33 T
(         To   : in State\051;) 159 308.33 T
(    function  Get_Alertness) 159 297.33 T
(        \050Self : in Ref\051 return State;) 159 286.33 T
(end Barn.Animal;) 159 275.33 T
0 8 Q
(File barn-horse.ads) 159 243.99 T
7 9 Q
(with Barn.Animal;) 159 229.33 T
(package Barn.Horse is) 159 214.33 T
(    type Ref is new Barn.Animal.Ref with null record;) 159 203.33 T
(    subtype State is Barn.Animal.State;) 159 192.33 T
(    procedure Trot) 159 181.33 T
(        \050Self     : in Ref;) 159 170.33 T
(         Distance : in Corba.Integer_16\051;) 159 159.33 T
(end Barn.Horse;) 159 148.33 T
153 666.08 153 597.58 2 L
V
0.5 H
0 Z
N
495 666.08 495 597.58 2 L
V
N
152.75 666.33 495.25 666.33 2 L
V
N
152.75 649.33 495.25 649.33 2 L
V
2 H
N
152.75 597.33 495.25 597.33 2 L
V
0.5 H
N
153 583.08 153 474.58 2 L
V
N
495 583.08 495 474.58 2 L
V
N
152.75 583.33 495.25 583.33 2 L
V
N
152.75 566.33 495.25 566.33 2 L
V
2 H
N
152.75 474.33 495.25 474.33 2 L
V
0.5 H
N
153 460.08 153 270.58 2 L
V
N
495 460.08 495 270.58 2 L
V
N
152.75 460.33 495.25 460.33 2 L
V
N
152.75 443.33 495.25 443.33 2 L
V
2 H
N
152.75 270.33 495.25 270.33 2 L
V
0.5 H
N
153 256.08 153 143.58 2 L
V
N
495 256.08 495 143.58 2 L
V
N
152.75 256.33 495.25 256.33 2 L
V
N
152.75 239.33 495.25 239.33 2 L
V
2 H
N
152.75 143.33 495.25 143.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Interfaces) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(20) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 9 Q
(3) 54 679.99 T
1 11 Q
-0.05 (The IDL source \336le mentioned in Section) 135 679.99 P
-0.05 (3.3 on page) 320.13 679.99 P
-0.05 (16 presents a circular interface de\336ni-) 373.79 679.99 P
(tion:) 135 667.99 T
0 9 Q
(4) 54 489.99 T
1 11 Q
(This use of IDL presents a dif) 135 489.99 T
(\336cult problem for the Ada mapping since two Ada packages) 266.16 489.99 T
(cannot \322with\323 each other) 135 477.99 T
(. The solution is to de\336ne the operations in each interface in terms) 244.05 477.99 T
(of some common type:) 135 465.99 T
0 8 Q
(File poultry) 141 641.99 T
(.idl:) 183.53 641.99 T
7 9 Q
(interface Food {) 141 627.33 T
(    attribute short calories;) 141 616.33 T
(};) 141 605.33 T
(interface Chicken;) 141 594.33 T
(interface Egg;) 141 583.33 T
(interface Chicken: Food {) 141 572.33 T
(    Egg lay\050\051;) 141 561.33 T
(};) 141 550.33 T
(interface Egg: Food {) 141 539.33 T
(    Chicken hatch\050\051;) 141 528.33 T
(};) 141 517.33 T
0 8 Q
(File poultry) 141 439.99 T
(.ads:) 183.53 439.99 T
7 9 Q
(with Corba;) 141 425.33 T
(package Poultry is) 141 410.33 T
(end Poultry;) 141 399.33 T
0 8 Q
(File poultry-food.ads:) 141 367.99 T
7 9 Q
(package Poultry.Food is) 141 353.33 T
(    type Ref is new Corba.Ref with null record;) 141 342.33 T
(    procedure Set_Calories) 141 331.33 T
(        \050Self : in Ref;) 141 320.33 T
(         To   : in Corba.Integer_16\051;) 141 309.33 T
(    function  Get_Calories) 141 298.33 T
(        \050Self : in Ref\051 return Corba.Integer_16;) 141 287.33 T
(end Poultry.Food;) 141 276.33 T
0 8 Q
(File poultry-chicken.ads:) 141 244.99 T
7 9 Q
(with Poultry.Food;) 141 230.33 T
(package Poultry.Chicken is) 141 215.33 T
(    type Ref is new Poultry.Food.Ref with null record;) 141 204.33 T
(    function Lay) 141 193.33 T
(        \050Self : in Ref\051 return Corba.Ref\325CLASS;) 141 182.33 T
(    --! IDL MAPPING NOTE:) 141 171.33 T
(    --! function Lay will always return an object) 141 160.33 T
(    --! in Poultry.Egg.Ref\325CLASS.) 141 149.33 T
(end Poultry.Chicken;) 141 138.33 T
135 654.08 135 512.58 2 L
V
0.5 H
0 Z
N
351 654.08 351 512.58 2 L
V
N
134.75 654.33 351.25 654.33 2 L
V
N
134.75 637.33 351.25 637.33 2 L
V
2 H
N
134.75 512.33 351.25 512.33 2 L
V
0.5 H
N
135 452.08 135 394.58 2 L
V
N
477 452.08 477 394.58 2 L
V
N
134.75 452.33 477.25 452.33 2 L
V
N
134.75 435.33 477.25 435.33 2 L
V
2 H
N
134.75 394.33 477.25 394.33 2 L
V
0.5 H
N
135 380.08 135 271.58 2 L
V
N
477 380.08 477 271.58 2 L
V
N
134.75 380.33 477.25 380.33 2 L
V
N
134.75 363.33 477.25 363.33 2 L
V
2 H
N
134.75 271.33 477.25 271.33 2 L
V
0.5 H
N
135 257.08 135 133.58 2 L
V
N
477 257.08 477 133.58 2 L
V
N
134.75 257.33 477.25 257.33 2 L
V
N
134.75 240.33 477.25 240.33 2 L
V
2 H
N
134.75 133.33 477.25 133.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Lexical Mapping) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(21) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(5) 72 541.99 T
1 11 Q
-0.44 (This solution reduces the compile time checking only on the cross dependent parameters and) 153 541.99 P
(return results. An implementation of an Ada mapping can improve the compile time check-) 153 529.99 T
(ing by:) 153 517.99 T
6 F
(\245) 153 499.99 T
1 F
(determining the closest parent type relative to the circularity) 171 499.99 T
(\050) 171 487.99 T
7 F
(Poultry.Food.Ref\325CLASS) 174.66 487.99 T
1 F
( in the example above\051, and) 319.86 487.99 T
6 F
(\245) 153 472.99 T
1 F
-0.25 (only de\336ning the operations in one interface of the circularity in terms of some common) 171 472.99 P
(type and mapping the other interfaces with the correct types \050i.e. use type) 171 460.99 T
7 F
(Poultry.Food.Ref\325CLASS) 171 448.99 T
1 F
( in package) 316.2 448.99 T
7 F
(Poultry.Chicken) 369.04 448.99 T
1 F
( and using type) 468.04 448.99 T
7 F
(Poultry.Chicken.Ref\325CLASS) 171 436.99 T
1 F
( in package) 336 436.99 T
7 F
(Poultry.Egg) 388.84 436.99 T
1 F
(\051.) 461.44 436.99 T
72 390.92 558 396.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 394.13 467.34 394.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 394.13 143.58 394.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.7) 125.93 400.66 T
(Lexical Mapping) 153 400.66 T
0 9 Q
(1) 72 373.59 T
1 11 Q
(This section speci\336es the mapping of IDL identi\336ers, literals, and constant expressions.) 153 373.59 T
0 12 Q
(3.7.1) 117.58 346.92 T
(Mapping of Identi\336ers) 153 346.92 T
0 9 Q
(1) 72 329.59 T
1 11 Q
-0.08 (IDL identi\336ers follow rules similar to those of Ada but more strict with regard to case \050iden-) 153 329.59 P
(ti\336ers that dif) 153 317.59 T
(fer only in case are disallowed\051 and less restrictive regarding the use of under-) 212.08 317.59 T
(scores.) 153 305.59 T
0 9 Q
(2) 72 287.59 T
1 11 Q
(Where \322_\323 is followed by another underscore or appears at the end of an identi\336er) 153 287.59 T
(, add the) 513.62 287.59 T
(string \322) 153 275.59 T
7 F
(U) 185.69 275.59 T
1 F
(\323 after the underscore.) 192.29 275.59 T
0 9 Q
(3) 72 257.59 T
1 11 Q
-0.05 (When an IDL identi\336er collides with an Ada reserved word, insert the string \322IDL_\323 before) 153 257.59 P
(the identi\336er) 153 245.59 T
(.) 208.31 245.59 T
0 12 Q
(3.7.2) 117.58 218.92 T
(Mapping of Literals) 153 218.92 T
0 9 Q
(1) 72 201.59 T
1 11 Q
(IDL literals shall be mapped to lexically equivalent Ada literals or semantically equivalent) 153 201.59 T
(expressions. The following sections describe the lexical mapping of IDL literals to Ada lit-) 153 189.59 T
(erals. This information may be used to provide semantic interpretation of the literals found) 153 177.59 T
-0.24 (in IDL constant expressions in order to calculate the value of an IDL constant or as the basis) 153 165.59 P
(for translating those literals into equivalent Ada literals.) 153 153.59 T
0 12 Q
(3.7.2.1) 108 128.92 T
(Integer Literals) 153 128.92 T
0 9 Q
(1) 72 110.59 T
1 11 Q
(IDL supports decimal, octal, and hexadecimal integer literals.) 153 110.59 T
0 8 Q
(File poultry-egg.ads:) 159 674.99 T
7 9 Q
(with Poultry.Food;) 159 660.33 T
(package Poultry.Egg is) 159 645.33 T
(    type Ref is new Poultry.Food.Ref with null record;) 159 634.33 T
(    function Hatch) 159 623.33 T
(        \050Self : in Ref\051 return Corba.Ref\325CLASS;) 159 612.33 T
(    --! IDL MAPPING NOTE:) 159 601.33 T
(    --! function Hatch will always return an object) 159 590.33 T
(    --! in Poultry.Chicken.Ref\325CLASS.) 159 579.33 T
(end Poultry.Egg;) 159 568.33 T
153 687.08 153 563.58 2 L
V
0.5 H
0 Z
N
495 687.08 495 563.58 2 L
V
N
152.75 687.33 495.25 687.33 2 L
V
N
152.75 670.33 495.25 670.33 2 L
V
2 H
N
152.75 563.33 495.25 563.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Lexical Mapping) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(22) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 9 Q
(2) 54 679.99 T
1 11 Q
(A decimal literal consists of a sequence of digits that does not begin with \3240\325. Decimal liter-) 135 679.99 T
(als are lexically equivalent to Ada literal values.) 135 667.99 T
0 9 Q
(3) 54 649.99 T
1 11 Q
-0.13 (An octal literal consists of a leading \3240\325 followed by a sequence of octal digits \0500 .. 7\051. Octal) 135 649.99 P
-0.41 (constants may be lexically mapped by prepending \3228#\323 and appending \322#\323 to the IDL literal.) 135 637.99 P
(The leading zero in the IDL literal may be deleted or kept.) 135 625.99 T
0 9 Q
(4) 54 607.99 T
1 11 Q
(A hexadecimal literal consists of \3220x\323 or \3220X\323 followed by a sequence of hexadecimal dig-) 135 607.99 T
(its \0500 .. 9, [a|A] .. [f|F]\051. Hexadecimal literals may be lexically mapped by Ada literals by) 135 595.99 T
(deleting the leading \3220x\323 or \3220X\323, prepending \32216#\323 and appending \322#\323.) 135 583.99 T
0 12 Q
(3.7.2.2) 90 559.33 T
(Floating-Point Literals) 135 559.33 T
0 9 Q
(1) 54 540.99 T
1 11 Q
(An IDL \337oating-point literal consists of an integer part, a decimal point, a fraction part, an) 135 540.99 T
(\324e\325 or \324E\325, an optionally signed integer exponent. \050IDL before version 1.2 allowed an) 135 528.99 T
(optional type suf) 135 516.99 T
(\336x [f, F) 208.74 516.99 T
(, d, or D]\051.) 241.17 516.99 T
0 9 Q
(2) 54 498.99 T
1 11 Q
(The integer and fraction parts consist of sequences of decimal digits.) 135 498.99 T
0 9 Q
(3) 54 480.99 T
1 11 Q
(Either the integer part or the fraction part, but not both, may be missing.) 135 480.99 T
0 9 Q
(4) 54 462.99 T
1 11 Q
(Either the decimal point and the fractional part or the \324e\325 \050or \324E\325\051 and the exponent, but not) 135 462.99 T
(both, may be missing.) 135 450.99 T
0 9 Q
(5) 54 432.99 T
1 11 Q
-0.01 (A lexically equivalent \337oating point literal may be formed by appending, to the integer part) 135 432.99 P
(\050or \3220\323 if the integer part is missing\051, a \322.\323 \050decimal point\051, the fraction part \050or \3220\323 if the) 135 420.99 T
(fraction part is missing\051, an \322E\323, and the exponent \050or \3220\323 if the exponent is missing\051.) 135 408.99 T
0 9 Q
(6) 54 390.99 T
1 11 Q
(Optionally) 135 390.99 T
(, the ending \322E0\323 may be left of) 181.34 390.99 T
(f if the IDL did not have an exponent. If a type) 321.67 390.99 T
(suf) 135 378.99 T
(\336x is appended, the above construction should be appended to the Ada mapping of the) 148.24 378.99 T
(type suf) 135 366.99 T
(\336x followed by \322\324\050\322, and a closing \322\051\323 should be appended.) 169.94 366.99 T
0 12 Q
(3.7.2.3) 90 342.33 T
(Character Literals) 135 342.33 T
0 9 Q
(1) 54 323.99 T
1 11 Q
(IDL character literals are single graphic characters or escape sequences enclosed by single) 135 323.99 T
-0.11 (quotes. The \336rst form is lexically equivalent to an Ada character literal. The following table) 135 311.99 P
(supplies lexical equivalents for the de\336ned escape sequences. Equivalent character literals) 135 299.99 T
(may also be used, but are not recommended when used in concatenation expressions.) 135 287.99 T
0 8 Q
(Description) 141 247.99 T
(IDL) 211.55 265.99 T
(Escape) 211.55 256.99 T
(Sequence) 211.55 247.99 T
(ISO 646 Octal V) 265.55 247.99 T
(alue) 324.25 247.99 T
(Ada Lexical Mapping) 358.81 247.99 T
1 10 Q
(newline) 141 232.66 T
(\134n) 211.55 232.66 T
(012) 265.55 232.66 T
(Ada.Characters.Latin_1.LF) 358.81 232.66 T
(horizontal tab) 141 216.66 T
(\134t) 211.55 216.66 T
(011) 265.55 216.66 T
(Ada.Characters.Latin_1.HT) 358.81 216.66 T
(vertical tab) 141 200.66 T
(\134v) 211.55 200.66 T
(013) 265.55 200.66 T
(Ada.Characters.Latin_1.VT) 358.81 200.66 T
(backspace) 141 184.66 T
(\134b) 211.55 184.66 T
(010) 265.55 184.66 T
(Ada.Characters.Latin_1.BS) 358.81 184.66 T
-0.03 (carriage return) 141 168.66 P
(\134r) 211.55 168.66 T
(015) 265.55 168.66 T
(Ada.Characters.Latin_1.CR) 358.81 168.66 T
(form feed) 141 152.66 T
(\134f) 211.55 152.66 T
(014) 265.55 152.66 T
(Ada.Characters.Latin_1.FF) 358.81 152.66 T
(alert) 141 136.66 T
(\134a) 211.55 136.66 T
(007) 265.55 136.66 T
(Ada.Characters.Latin_1.BEL) 358.81 136.66 T
(backslash) 141 120.66 T
(\134\134) 211.55 120.66 T
(134) 265.55 120.66 T
(Ada.Characters.Latin_1.Reverse_Solidus) 358.81 120.66 T
(question mark) 141 104.66 T
(\134?) 211.55 104.66 T
(077) 265.55 104.66 T
(Ada.Characters.Latin_1.Question) 358.81 104.66 T
135 278.08 135 99.58 2 L
V
0.5 H
0 Z
N
205.55 278.58 205.55 99.08 2 L
V
0.25 H
N
259.55 278.58 259.55 99.08 2 L
V
N
352.81 278.58 352.81 99.08 2 L
V
N
540 278.08 540 99.58 2 L
V
0.5 H
N
134.75 278.33 540.25 278.33 2 L
V
N
134.75 243.33 540.25 243.33 2 L
V
2 H
N
134.75 227.33 540.25 227.33 2 L
V
0.25 H
N
134.75 211.33 540.25 211.33 2 L
V
N
134.75 195.33 540.25 195.33 2 L
V
N
134.75 179.33 540.25 179.33 2 L
V
N
134.75 163.33 540.25 163.33 2 L
V
N
134.75 147.33 540.25 147.33 2 L
V
N
134.75 131.33 540.25 131.33 2 L
V
N
134.75 115.33 540.25 115.33 2 L
V
N
134.75 99.33 540.25 99.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Lexical Mapping) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(23) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
0 12 Q
(3.7.2.4) 108 544.33 T
(String Literals) 153 544.33 T
0 9 Q
(1) 72 525.99 T
1 11 Q
-0.05 (An IDL string literal is a sequence of IDL characters surrounded by double quote. Adjacent) 153 525.99 P
-0.32 (string literals are concatenated. W) 153 513.99 P
-0.32 (ithin a string, the double quote character must be preceded) 301.25 513.99 P
-0.16 (by a \324\134\325. A string literal may not contain the \322nul\323 character) 153 501.99 P
-0.16 (. Lexically equivalent Ada string) 411.54 501.99 P
(literals may be formed as follows. If the string literal does not contain escape sequences) 153 489.99 T
-0.07 (\050does not contain \324\134\325\051, the IDL literal is lexically equivalent to a valid Ada literal. If the IDL) 153 477.99 P
(literal contains escape sequences, the string must be partitioned into substrings that do not) 153 465.99 T
-0.19 (contain an escape sequence or that contain a single escape sequence. The substrings contain-) 153 453.99 P
0 (ing an escape sequence must be replaced by their lexically equivalent Ada character literals) 153 441.99 P
-0.15 (as speci\336ed in the preceding section. These substrings must be concatenated together \050using) 153 429.99 P
(the Ada \322&\323 operator\051 in the original order) 153 417.99 T
(. Finally) 341.48 417.99 T
(, adjacent strings must be concatenated.) 377.44 417.99 T
0 12 Q
(3.7.3) 117.58 391.33 T
(Mapping of Constant Expressions) 153 391.33 T
0 9 Q
(1) 72 373.99 T
1 11 Q
(In IDL, constant expression are used to de\336ne the values of constants in constant declara-) 153 373.99 T
-0.25 (tions. A subset, those expressions that evaluate to positive integer values, may also be found) 153 361.99 P
-0.2 (as the maximum length of a bounded sequence, as the maximum length of a bounded string,) 153 349.99 P
(or as the \336xed array size in complex declarators. An IDL constant expression shall be) 153 337.99 T
(mapped to an Ada expression or literal with the same value as the IDL constant expression.) 153 325.99 T
(The value of the IDL expression must be interpreted according to the syntax and semantics) 153 313.99 T
-0.17 (in Section 4.6 of the CORBA speci\336cation. The mapping may be accomplished by interpret-) 153 301.99 P
-0.2 (ing the IDL constant expression yielding an equivalent Ada literal of the required type or by) 153 289.99 P
(building an expression containing operations on literals, scoped names, and interim results) 153 277.99 T
(that mimic the form and semantics of the IDL literal expression and yield the same value.) 153 265.99 T
0 12 Q
(3.7.4) 117.58 239.33 T
(Mapping of Operators) 153 239.33 T
0 9 Q
(1) 72 221.99 T
1 11 Q
-0.03 (The following table provides the correspondence between IDL operators in a valid constant) 153 221.99 P
-0.19 (expression and semantically equivalent Ada operators. This information may be used to pro-) 153 209.99 P
(vide semantic interpretation of the operators found in IDL constant expressions or as the) 153 197.99 T
(basis for translating expression containing those operators into equivalent Ada expressions.) 153 185.99 T
1 10 Q
(single quote) 159 641.66 T
(\134\325) 229.55 641.66 T
(047) 283.55 641.66 T
(Ada.Characters.Latin_1.Apostrophe) 376.81 641.66 T
(double quote) 159 625.66 T
(\134\323) 229.55 625.66 T
(042) 283.55 625.66 T
(Ada.Characters.Latin_1.Quotation) 376.81 625.66 T
(octal number) 159 609.66 T
(\134ooo) 229.55 609.66 T
(ooo) 283.55 609.66 T
(Character\325val\0508#ooo#\051) 376.81 609.66 T
(hex number) 159 593.66 T
(\134xhh) 229.55 593.66 T
(Octal equivalent to) 283.55 593.66 T
(the hexadecimal) 283.55 581.66 T
(number hh) 283.55 569.66 T
(Character\325val\05016#hh#\051) 376.81 593.66 T
1 9 Q
(IDL) 159 162.33 T
(Operator) 159 151.33 T
(IDL) 203.29 162.33 T
(symbol) 203.29 151.33 T
(Applicable Types) 242.39 162.33 T
(Ada) 323.7 162.33 T
(Operator) 323.7 151.33 T
(Supported by Ada Types) 380.14 162.33 T
(Integer) 242.39 147.33 T
(Floating) 281.3 147.33 T
(point) 281.3 136.33 T
(Boolean) 380.14 147.33 T
(Modular) 424.48 147.33 T
(Integer) 424.48 136.33 T
(Signed) 469.71 147.33 T
(Integer) 469.71 136.33 T
(Floating) 509.33 147.33 T
(Point) 509.33 136.33 T
1 8 Q
(or) 159 121.99 T
(|) 203.29 121.99 T
2 F
(3) 242.39 121.99 T
1 F
(or) 323.7 121.99 T
2 F
(3) 380.14 121.99 T
(3) 424.48 121.99 T
1 F
(xor) 159 107.99 T
(^) 203.29 107.99 T
2 F
(3) 242.39 107.99 T
1 F
(xor) 323.7 107.99 T
2 F
(3) 380.14 107.99 T
(3) 424.48 107.99 T
0 F
(Description) 159 656.99 T
(IDL) 229.55 674.99 T
(Escape) 229.55 665.99 T
(Sequence) 229.55 656.99 T
(ISO 646 Octal V) 283.55 656.99 T
(alue) 342.25 656.99 T
(Ada Lexical Mapping) 376.81 656.99 T
153 687.08 153 564.58 2 L
V
0.5 H
0 Z
N
223.55 687.58 223.55 564.08 2 L
V
0.25 H
N
277.55 687.58 277.55 564.08 2 L
V
N
370.81 687.58 370.81 564.08 2 L
V
N
558 687.08 558 564.58 2 L
V
0.5 H
N
152.75 687.33 558.25 687.33 2 L
V
N
152.75 652.33 558.25 652.33 2 L
V
2 H
N
152.75 636.33 558.25 636.33 2 L
V
0.25 H
N
152.75 620.33 558.25 620.33 2 L
V
N
152.75 604.33 558.25 604.33 2 L
V
N
152.75 564.33 558.25 564.33 2 L
V
0.5 H
N
153 172.08 153 103.58 2 L
V
N
197.29 172.58 197.29 103.08 2 L
V
N
236.39 172.58 236.39 103.08 2 L
V
N
275.3 157.33 275.3 103.08 2 L
V
N
317.7 172.58 317.7 103.08 2 L
V
2 H
N
374.14 172.58 374.14 103.08 2 L
V
0.5 H
N
418.48 157.33 418.48 103.08 2 L
V
N
463.71 157.33 463.71 103.08 2 L
V
N
503.33 157.33 503.33 103.08 2 L
V
N
547.64 172.08 547.64 103.58 2 L
V
N
152.75 172.33 547.89 172.33 2 L
V
N
152.75 131.33 547.89 131.33 2 L
V
2 H
N
152.75 117.33 547.89 117.33 2 L
V
0.5 H
N
152.75 103.33 547.89 103.33 2 L
V
N
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(24) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 9 Q
(2) 54 426.99 T
1 11 Q
-0.09 (Note that the following IDL semantics \050from 4.6.2 of the CORBA spec\051 requires some coer-) 135 426.99 P
(cion of types. Dif) 135 414.99 T
(ferences in applicability of operators to types may force some additional) 211.79 414.99 T
(type conversions in order to obtain Ada expressions semantically equivalent to the IDL) 135 402.99 T
(expressions.) 135 390.99 T
5 F
(\322Mixed type expr) 162 372.99 T
(essions \050e.g. integers mixed with \337oats\051 ar) 238.57 372.99 T
(e illegal.) 423.93 372.99 T
(An integer constant expr) 162 354.99 T
(ession is evaluated as unsigned long unless it contains a) 270.05 354.99 T
-0.3 (negated integer literal or the name of an integer constant with a negative value. In the) 162 342.99 P
-0.38 (latter case, the constant expr) 162 330.99 P
-0.38 (ession is evaluated as signed long. The computed value is) 287.47 330.99 P
(coer) 162 318.99 T
(ced back to the tar) 181.14 318.99 T
(get type in constant initializers. It is an err) 262.61 318.99 T
(or if the computed) 450.12 318.99 T
(value exceeds the range of the evaluated-as type \050long or unsigned long\051.) 162 306.99 T
(All \337oating-point literals ar) 162 288.99 T
(e double, all \337oating-point constants ar) 283.53 288.99 T
(e coer) 457.3 288.99 T
(ced to dou-) 484.07 288.99 T
(ble, and all \337oating-point expr) 162 276.99 T
(ession ar) 296.34 276.99 T
(e computed as doubles. The computed double) 335.96 276.99 T
(value is coer) 162 264.99 T
(ced back to the tar) 217.8 264.99 T
(get type in constant initializers. It is an err) 299.27 264.99 T
(or if this) 486.79 264.99 T
(coer) 162 252.99 T
(cion fails or if any intermediate values \050when evaluating the expr) 181.14 252.99 T
(ession\051 exceed) 467.93 252.99 T
(the range of double.\323) 162 240.99 T
54 194.92 540 200.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 198.13 449.34 198.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 198.13 125.58 198.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.8) 107.93 204.66 T
(Mapping for T) 135 204.66 T
(ypes) 219.98 204.66 T
0 9 Q
(1) 54 177.59 T
1 11 Q
-0.05 (T) 135 177.59 P
-0.05 (o permit IDL speci\336cations that introduce circular dependencies through a combination of) 140.95 177.59 P
7 F
(typedef) 135 165.59 T
1 F
( declarations and interface operations, the mapping \322\337attens\323 the name space) 181.2 165.59 T
(structure de\336ned by the modules and interfaces within a \336le.) 135 153.59 T
0 9 Q
(2) 54 135.59 T
1 11 Q
(T) 135 135.59 T
(ypedef declarations encountered at any scoping level in an IDL source \336le are mapped to) 140.95 135.59 T
(Ada derived type de\336nitions at the global level within that source \336le\325) 135 123.59 T
(s package. The type) 442.67 123.59 T
(names are pre\336xed to re\337ect their original scope.) 135 111.59 T
1 9 Q
(and) 141 636.33 T
(&) 185.29 636.33 T
2 F
(3) 224.39 636.33 T
1 F
(and) 305.7 636.33 T
2 F
(3) 362.14 636.33 T
(3) 406.48 636.33 T
1 F
(shift) 141 621.33 T
(<<) 185.29 621.33 T
2 F
(3) 224.39 621.33 T
1 F
(Interfaces.) 305.7 621.33 T
(Shift_Left) 305.7 610.33 T
2 F
(3) 406.48 621.33 T
1 F
(>>) 185.29 595.33 T
2 F
(3) 224.39 595.33 T
1 F
(Interfaces.) 305.7 595.33 T
(Shift_Right) 305.7 584.33 T
2 F
(3) 406.48 595.33 T
1 F
(add) 141 569.33 T
(+) 185.29 569.33 T
2 F
(3) 224.39 569.33 T
(3) 263.3 569.33 T
1 F
(+) 305.7 569.33 T
2 F
(3) 406.48 569.33 T
(3) 451.71 569.33 T
(3) 491.33 569.33 T
1 F
(-) 185.29 554.33 T
2 F
(3) 224.39 554.33 T
(3) 263.3 554.33 T
1 F
(-) 305.7 554.33 T
2 F
(3) 406.48 554.33 T
(3) 451.71 554.33 T
(3) 491.33 554.33 T
1 F
(multiply) 141 539.33 T
(*) 185.29 539.33 T
2 F
(3) 224.39 539.33 T
(3) 263.3 539.33 T
1 F
(*) 305.7 539.33 T
2 F
(3) 406.48 539.33 T
(3) 451.71 539.33 T
(3) 491.33 539.33 T
1 F
(/) 185.29 524.33 T
2 F
(3) 224.39 524.33 T
(3) 263.3 524.33 T
1 F
(/) 305.7 524.33 T
2 F
(3) 406.48 524.33 T
(3) 451.71 524.33 T
(3) 491.33 524.33 T
1 F
(%) 185.29 509.33 T
2 F
(3) 224.39 509.33 T
1 F
(rem) 305.7 509.33 T
2 F
(3) 406.48 509.33 T
(3) 451.71 509.33 T
(3) 491.33 509.33 T
1 F
(unary) 141 494.33 T
(-) 185.29 494.33 T
2 F
(3) 224.39 494.33 T
(3) 263.3 494.33 T
1 F
(-) 305.7 494.33 T
2 F
(3) 406.48 494.33 T
(3) 451.71 494.33 T
(3) 491.33 494.33 T
1 F
(+) 185.29 479.33 T
2 F
(3) 224.39 479.33 T
(3) 263.3 479.33 T
1 F
(+) 305.7 479.33 T
2 F
(3) 406.48 479.33 T
(3) 451.71 479.33 T
(3) 491.33 479.33 T
1 F
(~) 185.29 464.33 T
2 F
(3) 224.39 464.33 T
1 F
(not) 305.7 464.33 T
(-\050value - 1\051) 305.7 453.33 T
2 F
(3) 362.14 464.33 T
(3) 406.48 464.33 T
(3) 451.71 453.33 T
1 F
(IDL) 141 677.33 T
(Operator) 141 666.33 T
(IDL) 185.29 677.33 T
(symbol) 185.29 666.33 T
(Applicable Types) 224.39 677.33 T
(Ada) 305.7 677.33 T
(Operator) 305.7 666.33 T
(Supported by Ada Types) 362.14 677.33 T
(Integer) 224.39 662.33 T
(Floating) 263.3 662.33 T
(point) 263.3 651.33 T
(Boolean) 362.14 662.33 T
(Modular) 406.48 662.33 T
(Integer) 406.48 651.33 T
(Signed) 451.71 662.33 T
(Integer) 451.71 651.33 T
(Floating) 491.33 662.33 T
(Point) 491.33 651.33 T
135 687.08 135 448.58 2 L
V
0.5 H
0 Z
N
179.29 687.58 179.29 448.08 2 L
V
N
218.39 687.58 218.39 448.08 2 L
V
N
257.3 672.33 257.3 448.08 2 L
V
N
299.7 687.58 299.7 448.08 2 L
V
2 H
N
356.14 687.58 356.14 448.08 2 L
V
0.5 H
N
400.48 672.33 400.48 448.08 2 L
V
N
445.71 672.33 445.71 448.08 2 L
V
N
485.33 672.33 485.33 448.08 2 L
V
N
529.64 687.08 529.64 448.58 2 L
V
N
134.75 687.33 529.89 687.33 2 L
V
N
134.75 646.33 529.89 646.33 2 L
V
2 H
N
134.75 631.33 529.89 631.33 2 L
V
0.5 H
N
179.04 605.33 529.89 605.33 2 L
V
N
134.75 579.33 529.89 579.33 2 L
V
N
179.04 564.33 529.89 564.33 2 L
V
N
134.75 549.33 529.89 549.33 2 L
V
N
179.04 534.33 529.89 534.33 2 L
V
N
179.04 519.33 529.89 519.33 2 L
V
N
134.75 504.33 529.89 504.33 2 L
V
N
179.04 489.33 529.89 489.33 2 L
V
N
179.04 474.33 529.89 474.33 2 L
V
N
134.75 448.33 529.89 448.33 2 L
V
N
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(25) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(3) 72 679.99 T
1 11 Q
(Additional) 153 679.99 T
7 F
(subtype) 202.81 679.99 T
1 F
( statements inside the interfaces\325 child packages rename the global) 249.01 679.99 T
(types and allow them to be referenced as members of their original name space.) 153 667.99 T
0 9 Q
(4) 72 649.99 T
1 11 Q
(The following IDL speci\336cation) 153 649.99 T
7 F
(:) 295.07 649.99 T
0 9 Q
(5) 72 493.99 T
1 11 Q
(is mapped to these Ada packages:) 153 493.99 T
0 12 Q
(3.8.1) 117.58 186.33 T
(Mapping for Arithmetic T) 153 186.33 T
(ypes) 294.12 186.33 T
0 9 Q
(1) 72 168.99 T
1 11 Q
(Several basic arithmetic types are de\336ned in IDL. These types shall be mapped to Ada 9X) 153 168.99 T
(\050sub\051types. They may through the use of size representation clauses and other means, be) 153 156.99 T
(mapped to type with the same physical representation as that de\336ned for the \322C\323 language) 153 144.99 T
0 8 Q
(File poultry) 159 623.99 T
(.idl) 201.53 623.99 T
7 9 Q
(enum gender {HEN, ROOSTER};) 159 609.33 T
(interface Egg;) 159 598.33 T
(interface Chicken {) 159 587.33 T
(    typedef gender sex;) 159 576.33 T
(    Egg lay\050\051;) 159 565.33 T
(};) 159 554.33 T
(interface Egg {) 159 543.33 T
(    typedef Chicken::sex sex;) 159 532.33 T
(};) 159 521.33 T
0 8 Q
(File poultry) 159 467.99 T
(.ads) 201.53 467.99 T
7 9 Q
(package Poultry is) 159 453.33 T
(    type Gender is \050Hen, Rooster\051;) 159 442.33 T
(type Chicken_Sex new is Gender;) 180.6 431.33 T
(type Egg_Sex is new Chicken_Sex;) 180.6 420.33 T
(end Poultry;) 159 409.33 T
0 8 Q
(File poultry-chicken.ads) 159 377.99 T
7 9 Q
(with Poultry.Egg;) 159 363.33 T
(package Poultry.Chicken is) 159 348.33 T
(    type Ref is new Corba.Ref with null record;) 159 337.33 T
(    subtype Sex is Poultry.Gender;) 159 326.33 T
(    function Lay) 159 315.33 T
(        \050Self : in Ref\051 return Poultry.Egg.Ref\325CLASS;) 159 304.33 T
(end Poultry.Chicken;) 159 293.33 T
0 8 Q
(File poultry-egg.ads) 159 261.99 T
7 9 Q
(package Poultry.Egg is) 159 247.33 T
(    type Ref is new Corba.Ref with null record;) 159 236.33 T
(    subtype Sex is Poultry.Chicken_Sex;) 159 225.33 T
(end Poultry.Egg;) 159 214.33 T
153 636.08 153 516.58 2 L
V
0.5 H
0 Z
N
369 636.08 369 516.58 2 L
V
N
152.75 636.33 369.25 636.33 2 L
V
N
152.75 619.33 369.25 619.33 2 L
V
2 H
N
152.75 516.33 369.25 516.33 2 L
V
0.5 H
N
153 480.08 153 404.58 2 L
V
N
495 480.08 495 404.58 2 L
V
N
152.75 480.33 495.25 480.33 2 L
V
N
152.75 463.33 495.25 463.33 2 L
V
2 H
N
152.75 404.33 495.25 404.33 2 L
V
0.5 H
N
153 390.08 153 288.58 2 L
V
N
495 390.08 495 288.58 2 L
V
N
152.75 390.33 495.25 390.33 2 L
V
N
152.75 373.33 495.25 373.33 2 L
V
2 H
N
152.75 288.33 495.25 288.33 2 L
V
0.5 H
N
153 274.08 153 209.58 2 L
V
N
495 274.08 495 209.58 2 L
V
N
152.75 274.33 495.25 274.33 2 L
V
N
152.75 257.33 495.25 257.33 2 L
V
2 H
N
152.75 209.33 495.25 209.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(26) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
1 11 Q
(mapping. The following Ada types shall be de\336ned in the package \322) 135 679.99 T
7 F
(CORBA) 434.4 679.99 T
1 F
(\323 with corre-) 467.4 679.99 T
(spondence to IDL types:) 135 667.99 T
5 10 Q
(Rationale: pr) 135 469.66 T
(ovides a straightforwar) 188.24 469.66 T
(d mapping of IDL type names to Ada type names. Ada type) 281.77 469.66 T
(names picked to make following de\336nitions mor) 135 457.66 T
(e natural.) 325.73 457.66 T
0 9 Q
(2) 54 438.99 T
1 11 Q
(If supported and the supported representations conform to the requirements above, the fol-) 135 438.99 T
(lowing declarations should be used:) 135 426.99 T
5 10 Q
-0.26 (Rationale: Pr) 135 252.66 P
-0.26 (ovides straightforwar) 189.09 252.66 P
-0.26 (d and almost universally supported de\336nitions for types. However) 274.86 252.66 P
-0.26 (,) 535.26 252.66 P
(since support for wor) 135 240.66 T
(d sizes and ANSI/IEEE 754-1985 is not universal, these de\336nitions cannot be) 220.47 240.66 T
-0.09 (mandated. This drives us to de\336ne the types in a well-known package. Subtypes ar) 135 228.66 P
-0.09 (e suggested so that) 462.03 228.66 P
(type conversions fr) 135 216.66 T
(om the standar) 210.73 216.66 T
(d types ar) 270.36 216.66 T
(e not needed.) 309.43 216.66 T
0 12 Q
(3.8.2) 99.58 189.33 T
(Mapping for Boolean T) 135 189.33 T
(ype) 264.12 189.33 T
0 9 Q
(1) 54 171.99 T
1 11 Q
-0.05 (The IDL boolean type shall be mapped to the CORBA Boolean type. The package CORBA) 135 171.99 P
-0.06 (will contain the de\336nition of CORBA.Boolean as a subtype of Standard.Boolean as follows:) 135 159.99 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(Ada T) 141 645.99 T
(ype) 162.63 645.99 T
(IDL T) 213 645.99 T
(ype) 232.41 645.99 T
(Required Range and Representation) 283.58 645.99 T
1 10 Q
(Integer_16) 141 630.66 T
(short) 213 630.66 T
(integer, range -\0502**15\051 .. \0502**15 - 1\051) 283.58 630.66 T
(Integer_32) 141 614.66 T
(long) 213 614.66 T
(integer, range -\0502**31\051 .. \0502**31 - 1\051) 283.58 614.66 T
(Unsigned_16) 141 598.66 T
-0.03 (unsigned short) 213 598.66 P
(integer, range 0 .. \0502**16 - 1\051) 283.58 598.66 T
(Unsigned_32) 141 582.66 T
(unsigned long) 213 582.66 T
(integer, range 0 .. \0502**32 - 1\051) 283.58 582.66 T
(Float_32) 141 566.66 T
(float) 213 566.66 T
(floating point, ANSI/IEEE 754-1985) 283.58 566.66 T
(single precision) 283.58 554.66 T
(Float_64) 141 538.66 T
(double) 213 538.66 T
(floating point, ANSI/IEEE 754-1985) 283.58 538.66 T
(double precision) 283.58 526.66 T
(Character) 141 510.66 T
(char) 213 510.66 T
(8 bit ISO Latin-1 \0508859.1\051 character set) 283.58 510.66 T
(Octet) 141 494.66 T
(octet) 213 494.66 T
(integer, must include 0 .. 255) 283.58 494.66 T
0 8 Q
(Ada T) 141 404.99 T
(ype) 162.63 404.99 T
(De\336nition) 249 404.99 T
1 10 Q
(CORBA.Integer_16) 141 389.66 T
(subtype Integer_16 is Interfaces.Integer_16;) 249 389.66 T
(CORBA.Integer_32) 141 373.66 T
(subtype Integer_32 is Interfaces.Integer_32;) 249 373.66 T
(CORBA.Unsigned_16) 141 357.66 T
(subtype Unsigned_16 is Interfaces.Unsigned_16;) 249 357.66 T
(CORBA.Unsigned_32) 141 341.66 T
(subtype Unsigned_32 is Interfaces.Unsigned_32;) 249 341.66 T
(CORBA.Float_32) 141 325.66 T
(subtype Float_32 is Interfaces.Float_32;) 249 325.66 T
(CORBA.Float_64) 141 309.66 T
(subtype Float_64 is Interfaces.Float_64;) 249 309.66 T
(CORBA.Character) 141 293.66 T
(subtype Character is Standard.Character;) 249 293.66 T
(CORBA.Octet) 141 277.66 T
(subtype Octet is Interfaces.Unsigned_8;) 249 277.66 T
7 9 Q
(subtype Boolean is Standard.Boolean;) 141 136.33 T
135 658.08 135 489.58 2 L
V
0.5 H
0 Z
N
207 658.58 207 489.08 2 L
V
0.25 H
N
277.58 658.58 277.58 489.08 2 L
V
N
477 658.08 477 489.58 2 L
V
0.5 H
N
134.75 658.33 477.25 658.33 2 L
V
N
134.75 641.33 477.25 641.33 2 L
V
2 H
N
134.75 625.33 477.25 625.33 2 L
V
0.25 H
N
134.75 609.33 477.25 609.33 2 L
V
N
134.75 593.33 477.25 593.33 2 L
V
N
134.75 577.33 477.25 577.33 2 L
V
N
134.75 549.33 477.25 549.33 2 L
V
N
134.75 521.33 477.25 521.33 2 L
V
N
134.75 505.33 477.25 505.33 2 L
V
N
134.75 489.33 477.25 489.33 2 L
V
0.5 H
N
135 417.08 135 272.58 2 L
V
N
243 417.58 243 272.08 2 L
V
0.25 H
N
495 417.08 495 272.58 2 L
V
0.5 H
N
134.75 417.33 495.25 417.33 2 L
V
N
134.75 400.33 495.25 400.33 2 L
V
2 H
N
134.75 384.33 495.25 384.33 2 L
V
0.25 H
N
134.75 368.33 495.25 368.33 2 L
V
N
134.75 352.33 495.25 352.33 2 L
V
N
134.75 336.33 495.25 336.33 2 L
V
N
134.75 320.33 495.25 320.33 2 L
V
N
134.75 304.33 495.25 304.33 2 L
V
N
134.75 288.33 495.25 288.33 2 L
V
N
134.75 272.33 495.25 272.33 2 L
V
0.5 H
N
135 146.08 135 131.58 2 L
V
N
351 146.08 351 131.58 2 L
V
N
134.75 146.33 351.25 146.33 2 L
V
N
134.75 131.33 351.25 131.33 2 L
V
N
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(27) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(2) 72 679.99 T
1 11 Q
(For example, the following IDL de\336nition:) 153 679.99 T
0 9 Q
(3) 72 628.99 T
1 11 Q
(will map to:) 153 628.99 T
5 10 Q
(Rationale: A subtype of Boolean is allowed to have a size attribute de\336nition clause, which may be) 153 578.66 T
(used by implementations that wish to r) 153 566.66 T
(etain binary compatibility with a \322C\323 language mapping..) 307.08 566.66 T
0 12 Q
(3.8.3) 117.58 539.33 T
(Mapping for Enumeration T) 153 539.33 T
(ypes) 308.12 539.33 T
0 9 Q
(1) 72 521.99 T
1 11 Q
-0.14 (An IDL enum type shall map directly to an Ada enumerated type with name the same as the) 153 521.99 P
(IDL identi\336er and values identical to and in the order of the IDL member list. For example,) 153 509.99 T
(the IDL enumeration declaration:) 153 497.99 T
0 9 Q
(2) 72 446.99 T
1 11 Q
(has the following mapping:) 153 446.99 T
5 10 Q
(Rationale: obvious.) 153 396.66 T
0 12 Q
(3.8.4) 117.58 369.33 T
(Mapping for Structure T) 153 369.33 T
(ypes) 288.12 369.33 T
0 9 Q
(1) 72 351.99 T
1 11 Q
-0.05 (An IDL struct type shall map directly to an Ada 9X record type with type name the same as) 153 351.99 P
(the struct identi\336er and each component formed from each declarator in the member list as) 153 339.99 T
(follows:) 153 327.99 T
6 F
(\245) 153 309.99 T
1 F
-0.32 (If the declarator is a simple_declarator) 171 309.99 P
-0.32 (, the component name shall be the identi\336er in the) 338.48 309.99 P
(declarator and the type shall be mapped from the type_spec.) 171 297.99 T
6 F
(\245) 153 282.99 T
1 F
(If the declarator is a complex_declarator) 171 282.99 T
(, a preceding type de\336nition shall de\336ne an) 348.64 282.99 T
(array type. The array type name shall be the identi\336er contained the array_declarator) 171 270.99 T
-0.24 (prepended to \322_Array\323. The type de\336nition shall be an array) 171 258.99 P
-0.24 (, over the range\050s\051 from 1 to) 433.24 258.99 P
(the \336xed_array_size\050s\051 speci\336ed in the array declarator) 171 246.99 T
(, of the type mapped from the) 412.48 246.99 T
(IDL type contained in the type spec. If multiple bounds are declared, a multiple) 171 234.99 T
-0.24 (dimensional array shall be created that preserves the indexing order speci\336ed in the IDL) 171 222.99 P
-0.42 (declaration. In the component de\336nition, the name shall be the identi\336er contained in the) 171 210.99 P
(array_declarator and the type shall be the array type.) 171 198.99 T
0 9 Q
(\310 T) 72 175.66 T
(O DO) 84.84 175.66 T
1 10 Q
(Rules for members whose type_spec is other than base_type.) 153 175.66 T
0 9 Q
(2) 72 156.99 T
1 11 Q
(For example, the IDL struct declaration below:) 153 156.99 T
7 9 Q
(typedef boolean Result_Flag;) 159 656.33 T
(subtype Result_Flag is CORBA.Boolean;) 159 605.33 T
(enum Color {Red, Green, Blue};) 159 474.33 T
(type Color is \050Red, Green, Blue\051;) 159 423.33 T
(struct Example {) 159 133.33 T
(    long member1, member2;) 159 122.33 T
(    boolean member3[4][8];) 159 111.33 T
(};) 159 100.33 T
153 666.08 153 651.58 2 L
V
0.5 H
0 Z
N
369 666.08 369 651.58 2 L
V
N
152.75 666.33 369.25 666.33 2 L
V
N
152.75 651.33 369.25 651.33 2 L
V
N
153 615.08 153 600.58 2 L
V
N
369 615.08 369 600.58 2 L
V
N
152.75 615.33 369.25 615.33 2 L
V
N
152.75 600.33 369.25 600.33 2 L
V
N
153 484.08 153 469.58 2 L
V
N
360 484.08 360 469.58 2 L
V
N
152.75 484.33 360.25 484.33 2 L
V
N
152.75 469.33 360.25 469.33 2 L
V
N
153 433.08 153 418.58 2 L
V
N
360 433.08 360 418.58 2 L
V
N
152.75 433.33 360.25 433.33 2 L
V
N
152.75 418.33 360.25 418.33 2 L
V
N
153 143.08 153 95.58 2 L
V
N
342 143.08 342 95.58 2 L
V
N
152.75 143.33 342.25 143.33 2 L
V
N
152.75 95.33 342.25 95.33 2 L
V
N
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(28) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 9 Q
(3) 54 679.99 T
1 11 Q
(maps to the following:) 135 679.99 T
5 10 Q
-0.34 (Rationale: Pr) 135 574.66 P
-0.34 (ovides a straightforwar) 189.01 574.66 P
-0.34 (d and natural mapping. Note that, in contrast, the C++ mapping) 281.87 574.66 P
(speci\336es an opaque class with explicit member accessors.) 135 562.66 T
0 12 Q
(3.8.5) 99.58 535.33 T
(Mapping for Union T) 135 535.33 T
(ypes) 250.78 535.33 T
0 9 Q
(1) 54 517.99 T
1 11 Q
(An IDL union type shall map to an Ada discriminated record type. The type name shall be) 135 517.99 T
-0.01 (the same as the IDL identi\336er) 135 505.99 P
-0.01 (. The discriminant shall be formed by appending \322) 264.78 505.99 P
7 F
-0.03 (_switch) 486.18 505.99 P
1 F
-0.01 (\323) 532.38 505.99 P
(to the type name and shall be of type mapped from the IDL switch_type_spec. A variant) 135 493.99 T
(shall be formed from each case contained in the switch_body as follows:) 135 481.99 T
0 9 Q
(2) 54 463.99 T
1 11 Q
(Discrete_choice_list: For case_labels speci\336ed by \322) 135 463.99 T
7 F
(case) 361.98 463.99 T
1 F
(\323 followed by a const_exp, the) 388.39 463.99 T
(const_exp de\336nes a discrete_choice. For the \322) 135 451.99 T
7 F
(default) 336.93 451.99 T
1 F
(\323 case_label, the discrete_choice is) 383.13 451.99 T
(\322) 135 439.99 T
7 F
(others) 139.88 439.99 T
1 F
(\323. If more than one case_label is associated with a case, they shall be \322or\323ed) 179.48 439.99 T
(together) 135 427.99 T
(.) 170.44 427.99 T
0 9 Q
(3) 54 409.99 T
1 11 Q
(V) 135 409.99 T
(ariant component_list: The component_list of each variant shall contain one component) 141.72 409.99 T
(formed from the element_spec as follows:) 135 397.99 T
6 F
(\245) 135 379.99 T
1 F
-0.32 (If the declarator is a simple_declarator) 153 379.99 P
-0.32 (, the component name shall be the identi\336er in the) 320.48 379.99 P
(declarator and the type shall be mapped from the type_spec.) 153 367.99 T
6 F
(\245) 135 352.99 T
1 F
(If the declarator is a complex_declarator) 153 352.99 T
(, a preceding type de\336nition shall de\336ne an) 330.64 352.99 T
(array type. The array type name shall be the identi\336er contained the array_declarator) 153 340.99 T
-0.24 (prepended to \322_Array\323. The type de\336nition shall be an array) 153 328.99 P
-0.24 (, over the range\050s\051 from 1 to) 415.24 328.99 P
(the \336xed_array_size\050s\051 speci\336ed in the array declarator) 153 316.99 T
(, of the type mapped from the) 394.48 316.99 T
(IDL type contained in the type spec. If multiple bounds are declared, a multiple) 153 304.99 T
-0.24 (dimensional array shall be created that preserves the indexing order speci\336ed in the IDL) 153 292.99 P
-0.42 (declaration. In the component de\336nition, the name shall be the identi\336er contained in the) 153 280.99 P
(array_declarator and the type shall be the array type.) 153 268.99 T
0 9 Q
(\310 T) 54 245.66 T
(O DO) 66.84 245.66 T
1 10 Q
(Rules for member whose type_spec is other than base_type.) 135 245.66 T
0 9 Q
(4) 54 226.99 T
1 11 Q
(For example, the IDL union declaration below:) 135 226.99 T
7 9 Q
(type Member3_Array is array\0501..4, 1..8\051 of Boolean;) 141 656.33 T
(type Example is record) 141 645.33 T
(    Member1: CORBA.Long;) 141 634.33 T
(    Member2: CORBA.Long;) 141 623.33 T
(    Member3: Member3_Array;) 141 612.33 T
(    end record;) 141 601.33 T
(union Example switch \050long\051 {) 141 203.33 T
(    case 1: case 3: long Counter;) 141 192.33 T
(    case 2: boolean Flags [4] [8];) 141 181.33 T
(    default: long Unknown;) 141 170.33 T
(};) 141 159.33 T
135 666.08 135 596.58 2 L
V
0.5 H
0 Z
N
486 666.08 486 596.58 2 L
V
N
134.75 666.33 486.25 666.33 2 L
V
N
134.75 596.33 486.25 596.33 2 L
V
N
135 213.08 135 154.58 2 L
V
N
396 213.08 396 154.58 2 L
V
N
134.75 213.33 396.25 213.33 2 L
V
N
134.75 154.33 396.25 154.33 2 L
V
N
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(29) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(5) 72 679.99 T
1 11 Q
(maps to the following:) 153 679.99 T
5 10 Q
-0.34 (Rationale: Pr) 153 530.66 P
-0.34 (ovides a straightforwar) 207.01 530.66 P
-0.34 (d and natural mapping. Note that, in contrast, the C++ mapping) 299.87 530.66 P
(speci\336es an opaque class with explicit member accessors.) 153 518.66 T
0 12 Q
(3.8.6) 117.58 491.33 T
(Mapping for Sequence T) 153 491.33 T
(ypes) 291.47 491.33 T
0 9 Q
(1) 72 473.99 T
1 11 Q
(T) 153 473.99 T
(wo template types are prede\336ned:) 158.95 473.99 T
7 F
(sequence) 310.17 473.99 T
1 F
( and) 362.97 473.99 T
7 F
(string) 384.35 473.99 T
1 F
(. IDL de\336nes a sequence as a) 423.95 473.99 T
-0.27 (\322one-dimensional array with two characteristics: a maximum size \050which is \336xed at compile) 153 461.99 P
(time\051 and a length \050which is determined at run time\051.\323 The syntax is:) 153 449.99 T
0 9 Q
(2) 72 431.99 T
1 11 Q
(<sequence_type> :=) 153 431.99 T
(    \322sequence\323 \322<\323 <simple_type_spec> \322,\323 <positive_int_const> \322>\323  |) 153 419.99 T
(    \322sequence\323 \322<\323 <simple_type_spec> \322>\323) 153 407.99 T
0 9 Q
(3) 72 389.99 T
1 11 Q
(Note that a simple_type_spec can include any of the basic IDL types, any scoped name, or) 153 389.99 T
(any template type. Thus, sequences can also be anonymously de\336ned within a nested) 153 377.99 T
(sequence declaration.) 153 365.99 T
0 9 Q
(4) 72 347.99 T
1 11 Q
(A sequence is mapped to an Ada controlled tagged type that behaves similarly to an uncon-) 153 347.99 T
(strained array) 153 335.99 T
(.) 212.46 335.99 T
0 9 Q
(5) 72 317.99 T
1 11 Q
(For an unbounded sequence, setting the current length to a lar) 153 317.99 T
(ger value than the current) 424.39 317.99 T
-0.08 (length may reallocate the sequence data. Reallocation is conceptually equivalent to creating) 153 305.99 P
(a new sequence of the desired new length, copying the old sequence elements into the new) 153 293.99 T
(sequence, and then freeing the old sequence.) 153 281.99 T
0 9 Q
(6) 72 263.99 T
1 11 Q
(IDL sequence types are intended to provide value semantics \050as opposed to reference) 153 263.99 T
(semantics\051. Thus, assignment of one sequence variable to another sequence variable must) 153 251.99 T
(\336rst destroy the memory of the \336rst sequence variable and then perform a deep-copy of the) 153 239.99 T
(second sequence variable to the \336rst sequence variable.) 153 227.99 T
0 9 Q
(7) 72 209.99 T
1 11 Q
(T) 153 209.99 T
(wo Ada generic package speci\336cations,) 158.95 209.99 T
3 F
(Corba.Bounded_Sequence) 335.51 209.99 T
1 F
( \050Section) 459.89 209.99 T
(6.2 on) 502.05 209.99 T
(page) 153 197.99 T
(47\051 and) 176.52 197.99 T
3 F
(Corba.Unbounded_Sequence) 212.57 197.99 T
1 F
(\050Section) 352.53 197.99 T
(6.3 on page) 391.94 197.99 T
(52\051,) 445.71 197.99 T
(de\336ne the interface) 465.87 197.99 T
(to the sequence type operations.) 153 185.99 T
0 9 Q
(\310 T) 72 162.66 T
(O DO) 84.84 162.66 T
1 10 Q
(Provide mapping rules supporting following example.) 153 162.66 T
7 9 Q
(type Flags_Array is array\050 1..4, 1 .. 8\051 of Boolean;) 159 656.33 T
(type Example\050Example_Switch : CORBA.Integer_32\051 is record) 159 645.33 T
(    case Example_Switch is) 159 634.33 T
(        when 1 | 3 =>) 159 623.33 T
(            counter: CORBA.Integer_32;) 159 612.33 T
(        when 2 =>) 159 601.33 T
(            Flags: Flags_Array;) 159 590.33 T
(        when others =>) 159 579.33 T
(            Unknown : CORBA.Integer_32;) 159 568.33 T
(    end record;) 159 557.33 T
153 666.08 153 552.58 2 L
V
0.5 H
0 Z
N
504 666.08 504 552.58 2 L
V
N
152.75 666.33 504.25 666.33 2 L
V
N
152.75 552.33 504.25 552.33 2 L
V
N
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(30) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 9 Q
(8) 54 679.99 T
1 11 Q
(The following named IDL sequence type DrawingKit:) 135 679.99 T
0 9 Q
(9) 54 491.99 T
1 11 Q
( shall map to a generic package instantiation as follows:) 135 491.99 T
0 8 Q
(IDL File: drawing.idl) 141 653.99 T
7 9 Q
(struct OpInfo {) 141 639.33 T
(    sequence<octet,256> ParamInfo;) 141 624.33 T
(};) 141 609.33 T
(interface DrawingKit {) 141 594.33 T
(    typedef sequence<octet> Data8;) 141 579.33 T
(    typedef sequence<long>  Data32;) 141 564.33 T
(    void draw_me \050in OpInfo DrawParams\051;) 141 534.33 T
(};) 141 519.33 T
0 8 Q
(Ada File: drawing.ads) 141 465.99 T
7 F
(package Drawing is) 141 451.99 T
(package Paraminfo_Bounded is) 160.2 437.99 T
(        new Corba.Unbounded_Sequence\050Corba.Integer_8, 256\051;) 141 427.99 T
(type Paraminfo_Type is new) 160.2 413.99 T
(DrawingKit_Data8_Unbounded_Sequence.Sequence;) 179.4 403.99 T
(type DrawingKit_Ref is new Fresco.BaseObject.Ref) 160.2 375.99 T
(        with null record;) 141 365.99 T
(    type OpInfo is) 141 351.99 T
(        record) 141 341.99 T
(            ParamInfo : ParamInfo_Type;) 141 331.99 T
(        end record;) 141 321.99 T
(    package DrawingKit_Data8_Unbounded is) 141 293.99 T
(        new Corba.Unbounded_Sequence\050Corba.Integer_8\051;) 141 283.99 T
(type DrawingKit_Data8 is) 160.2 269.99 T
(new DrawingKit_Data8_Unbounded_Sequence.Sequence;) 179.4 259.99 T
(    package DrawingKit_Data32_Unbounded is) 141 231.99 T
(        new Corba.Unbounded_Sequence\050Corba.Integer_32\051;) 141 221.99 T
(type DrawingKit_Data32 is new) 160.2 207.99 T
(        DrawingKit_Data32_Unbounded_Sequence.Sequence;) 141 197.99 T
(end Drawing;) 141 183.99 T
135 666.08 135 514.58 2 L
V
0.5 H
0 Z
N
477.6 666.08 477.6 514.58 2 L
V
N
134.75 666.33 477.85 666.33 2 L
V
N
134.75 649.33 477.85 649.33 2 L
V
2 H
N
134.75 514.33 477.85 514.33 2 L
V
0.5 H
N
135 478.08 135 179.58 2 L
V
N
477.6 478.08 477.6 179.58 2 L
V
N
134.75 478.33 477.85 478.33 2 L
V
N
134.75 461.33 477.85 461.33 2 L
V
2 H
N
134.75 179.33 477.85 179.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(31) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
0 12 Q
(3.8.7) 117.58 441.33 T
(Mapping for String T) 153 441.33 T
(ypes) 269.45 441.33 T
0 9 Q
(1) 72 423.99 T
1 11 Q
(The IDL bounded and unbounded strings types are mapped to Ada\325) 153 423.99 T
(s prede\336ned string pack-) 449.34 423.99 T
(ages rooted at) 153 411.99 T
7 F
(Ada.Strings) 216.84 411.99 T
1 F
(.) 289.44 411.99 T
0 9 Q
(2) 72 393.99 T
1 11 Q
(An unbounded IDL string will map directly to the type) 153 393.99 T
3 F
(Corba.String) 396.82 393.99 T
1 F
(.  This type is de\336ned) 458.84 393.99 T
(as:) 153 381.99 T
0 9 Q
(3) 72 283.99 T
1 11 Q
(The) 153 283.99 T
7 F
(Ada.Strings) 172.85 283.99 T
1 F
( package is renamed at the library level to) 245.46 283.99 T
7 F
(Corba.Strings) 432.1 283.99 T
1 F
(:) 517.9 283.99 T
0 9 Q
(4) 72 217.99 T
1 11 Q
(The package) 153 217.99 T
3 F
(Ada.Strings.Unbounded) 211.64 217.99 T
1 F
( is also renamed as) 325.34 217.99 T
3 F
(Corba.Strings.Unbounded) 411.18 217.99 T
1 F
(:) 535.26 217.99 T
0 9 Q
(5) 72 151.99 T
1 11 Q
(A bounded IDL string shall map to the private type) 153 151.99 T
3 F
(Bounded_String) 380.92 151.99 T
1 F
( in an instantiation of) 457.94 151.99 T
(the generic package) 153 139.99 T
3 F
(Corba.Strings.Bounded) 243.1 139.99 T
1 F
(. This package is de\336ned as follows:) 354.34 139.99 T
0 8 Q
(Ada File: drawing-drawingkit.ads) 159 674.99 T
7 F
(package Drawing.DrawingKit is) 159 660.99 T
(subtype Data8 is DrawingKit_Data8;) 178.2 632.99 T
(subtype Data32 is DrawingKit_Data32;) 178.2 604.99 T
(    type Ref is new DrawingKit_Ref with null record;) 159 576.99 T
(    procedure draw_me) 159 548.99 T
(                \050Self : in Ref;) 159 534.99 T
(                 DrawParams : in OpInfo\051;) 159 520.99 T
(end Drawing.DrawingKit;) 159 492.99 T
(package Corba is) 159 358.99 T
(    ...) 159 348.99 T
(    subtype String is Ada.Strings.Unbounded.Unbounded_String;) 159 334.99 T
(    ...) 159 320.99 T
(end Corba;) 159 310.99 T
7 9 Q
(with Ada.Strings;) 159 260.33 T
(package Corba.Strings renames Ada.Strings;) 159 245.33 T
(with Ada.Strings.Unbounded;) 159 194.33 T
7 8 Q
(package Corba.Strings.Unbounded renames Ada.Strings.Unbounded;) 159 179.33 T
(with Ada.Strings.Bounded;) 159 116.99 T
(package Corba.Strings.Bounded renames Ada.Strings.Bounded;) 159 102.99 T
153 687.08 153 488.58 2 L
V
0.5 H
0 Z
N
495.6 687.08 495.6 488.58 2 L
V
N
152.75 687.33 495.85 687.33 2 L
V
N
152.75 670.33 495.85 670.33 2 L
V
2 H
N
152.75 488.33 495.85 488.33 2 L
V
0.5 H
N
153 368.08 153 306.58 2 L
V
N
468.6 368.08 468.6 306.58 2 L
V
N
152.75 368.33 468.85 368.33 2 L
V
N
152.75 306.33 468.85 306.33 2 L
V
N
153 270.08 153 240.58 2 L
V
N
468.6 270.08 468.6 240.58 2 L
V
N
152.75 270.33 468.85 270.33 2 L
V
N
152.75 240.33 468.85 240.33 2 L
V
N
153 204.08 153 174.58 2 L
V
N
468.6 204.08 468.6 174.58 2 L
V
N
152.75 204.33 468.85 204.33 2 L
V
N
152.75 174.33 468.85 174.33 2 L
V
N
153 126.08 153 98.58 2 L
V
N
468.6 126.08 468.6 98.58 2 L
V
N
152.75 126.33 468.85 126.33 2 L
V
N
152.75 98.33 468.85 98.33 2 L
V
N
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(32) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 9 Q
(6) 54 679.99 T
1 11 Q
(The above renames make the) 135 679.99 T
3 F
(Ada.Strings.Bounded) 266.04 679.99 T
1 F
( and) 366.9 679.99 T
3 F
(Ada.Strings.Unbounded) 388.29 679.99 T
1 F
( avail-) 501.98 679.99 T
(able as) 135 667.99 T
3 F
(Corba.Strings.Bounded) 167.99 667.99 T
1 F
( and) 279.23 667.99 T
3 F
(Corba.Strings.Unbounded) 300.62 667.99 T
1 F
(.) 424.7 667.99 T
0 9 Q
(7) 54 649.99 T
1 11 Q
(The) 135 649.99 T
6 F
(Corba.Strings.Bounded) 154.85 649.99 T
1 F
( package has a generic formal parameter \322) 293.45 649.99 T
3 F
(Max) 478.85 649.99 T
1 F
(\323) 500.23 649.99 T
(declared as type) 135 637.99 T
3 F
(Positive) 208.61 637.99 T
1 F
(and establishes the maximum length of the bounded string at) 248.02 637.99 T
(instantiation. A generic instantiation of the package will be created using the bound for the) 135 625.99 T
(IDL string as the associated parameter) 135 613.99 T
(. The name of the instantiation will be the IDL identi-) 303.32 613.99 T
(\336er for the string prepended to\322) 135 601.99 T
3 F
(_String) 274 601.99 T
1 F
(\323. A type with name the same as the IDL identi\336er) 308.83 601.99 T
(and that is derived from the) 135 589.99 T
3 F
(Bounded_String) 259.04 589.99 T
1 F
( type in the generic package shall be declared) 336.06 589.99 T
(immediately following the instantiation.) 135 577.99 T
0 9 Q
(8) 54 559.99 T
1 11 Q
(For example, the IDL declaration:) 135 559.99 T
0 9 Q
(9) 54 508.99 T
1 11 Q
(maps to:) 135 508.99 T
0 9 Q
(10) 54 457.99 T
1 11 Q
(while the following declaration:) 135 457.99 T
0 9 Q
(1) 54 406.99 T
(1) 58.51 406.99 T
1 11 Q
(maps to:) 135 406.99 T
0 9 Q
(12) 54 340.99 T
1 11 Q
(in the corresponding interface package.) 135 340.99 T
5 10 Q
(Rationale: pr) 135 317.66 T
(ovides straight-forwar) 188.24 317.66 T
(d mapping in a manner that addr) 277.6 317.66 T
(esses memory management) 410.01 317.66 T
(issues.) 135 305.66 T
0 12 Q
(3.8.8) 99.58 278.33 T
(Mapping for Arrays) 135 278.33 T
0 9 Q
(1) 54 260.99 T
1 11 Q
(IDL de\336nes multidimensional, \336xed-size arrays by specifying a complex_declarator as any) 135 260.99 T
(of the declarators in a typedef, as any of the declarators in a member of a struct, or as the) 135 248.99 T
-0.13 (declarator in any elements of a union. A complex_declarator is formed by appending one or) 135 236.99 P
(more array size bounds to identi\336ers. An IDL complex_declarator maps to an Ada array) 135 224.99 T
(type de\336nition. See Section) 135 212.99 T
(3.8.4 on page) 258.75 212.99 T
(27, Section) 320.77 212.99 T
(3.8.5 on page) 373.02 212.99 T
(28, and Section) 435.04 212.99 T
(3.8.10) 505.92 212.99 T
(on page) 135 200.99 T
(33, for more information.) 172.27 200.99 T
0 12 Q
(3.8.9) 99.58 174.33 T
(Mapping for Constants) 135 174.33 T
0 9 Q
(1) 54 156.99 T
1 11 Q
(An IDL constant shall map directly to an Ada constant. The Ada constant name shall be) 135 156.99 T
(derived from the identi\336er in the IDL declaration. The type of the Ada constant shall be) 135 144.99 T
(mapped from the IDL const_type as speci\336ed elsewhere in this section. The value of the) 135 132.99 T
(Ada constant shall be mapped from the IDL constant expression as speci\336ed in Section) 135 120.99 T
(3.7) 521.17 120.99 T
-0.27 (on page) 135 108.99 P
-0.27 (21. This mapping may yield a semantically equivalent literal of the correct type or a) 171.99 108.99 P
(syntactically equivalent Ada expression that evaluates to the correct type and value.) 135 96.99 T
7 9 Q
(typedef string Name;) 141 536.33 T
(subtype Name is Corba.String;) 141 485.33 T
(typedef string<512> Title;) 141 434.33 T
(package Title_String is new Corba.Strings.Bounded\050512\051;) 141 383.33 T
(type Title is new Title_String.Bounded_String;) 141 368.33 T
135 546.08 135 531.58 2 L
V
0.5 H
0 Z
N
342 546.08 342 531.58 2 L
V
N
134.75 546.33 342.25 546.33 2 L
V
N
134.75 531.33 342.25 531.33 2 L
V
N
135 495.08 135 480.58 2 L
V
N
450.6 495.08 450.6 480.58 2 L
V
N
134.75 495.33 450.85 495.33 2 L
V
N
134.75 480.33 450.85 480.33 2 L
V
N
135 444.08 135 429.58 2 L
V
N
342 444.08 342 429.58 2 L
V
N
134.75 444.33 342.25 444.33 2 L
V
N
134.75 429.33 342.25 429.33 2 L
V
N
135 393.08 135 363.58 2 L
V
N
450.6 393.08 450.6 363.58 2 L
V
N
134.75 393.33 450.85 393.33 2 L
V
N
134.75 363.33 450.85 363.33 2 L
V
N
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(33) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(2) 72 679.99 T
1 11 Q
(For example, the following IDL constants:) 153 679.99 T
0 9 Q
(3) 72 617.99 T
1 11 Q
(shall map to:) 153 617.99 T
0 9 Q
(4) 72 555.99 T
1 11 Q
(The following IDL constants:) 153 555.99 T
0 9 Q
(5) 72 482.99 T
1 11 Q
(may be mapped as:) 153 482.99 T
0 9 Q
(6) 72 409.99 T
1 11 Q
(or) 153 409.99 T
0 12 Q
(3.8.10) 117.58 325.33 T
(Mapping for T) 153 325.33 T
(ypedefs) 231.44 325.33 T
0 9 Q
(1) 72 307.99 T
1 11 Q
(IDL typedefs introduce new names for types. An IDL typedef is formed from the keyword) 153 307.99 T
-0.11 (\322) 153 295.99 P
7 F
-0.26 (typedef) 157.88 295.99 P
1 F
-0.11 (\323, a type spec, and one or more declarators. A declarator may be a simple declar-) 204.08 295.99 P
(ator consisting of an identi\336er) 153 283.99 T
(, or an array declarator) 284.55 283.99 T
(, consisting of an identi\336er and one or) 383.98 283.99 T
(more \336xed array sizes. An IDL typdef maps directly to an Ada derived type.) 153 271.99 T
0 9 Q
(2) 72 253.99 T
1 11 Q
(Each array_declarator in a typedef shall be mapped to an array type. The array type name) 153 253.99 T
(shall be the identi\336er contained the array_declarator) 153 241.99 T
(. The type de\336nition shall be an array) 381.5 241.99 T
(over the range\050s\051 from 1 to the \336xed_array_size\050s\051 speci\336ed in the array declarator of the) 153 229.99 T
0 (type mapped from the IDL type contained in the type spec. If multiple bounds are declared,) 153 217.99 P
(a multiple dimensional array shall be created that preserves the indexing order speci\336ed in) 153 205.99 T
(the IDL declaration.) 153 193.99 T
0 9 Q
(3) 72 175.99 T
1 11 Q
(Each simple declarator shall be mapped to a derived type declaration. The type name shall) 153 175.99 T
(be the identi\336er provided in the simple declarator) 153 163.99 T
(. The type de\336nition shall be the mapping) 369.61 163.99 T
(of the typespec as speci\336ed elsewhere in this section.) 153 151.99 T
7 9 Q
(const double Pi = 3.1415926535;) 159 656.33 T
(const short Line_Buffer_Length = 80;) 159 645.33 T
(Pi : constant CORBA.Float_64 := 3.1415926535;) 159 594.33 T
(Line_Buffer_Length : constant CORBA.Integer_16 := 80;) 159 583.33 T
(const long Page_Buffer_Length =) 159 532.33 T
(    \050Line_Buffer_Length * 60\051 + 2;) 159 521.33 T
(const long Legal_Page_Buffer_Length = \05080 * 80\051 + 2;) 159 510.33 T
(Page_Buffer_Length : constant CORBA.Integer_32 := 4802;) 159 459.33 T
(Legal_Page_Buffer_Length : constant CORBA.Integer_32 :=) 159 448.33 T
(    6402;) 159 437.33 T
(Page_Buffer_Length : constant CORBA.Integer_32 :=) 159 386.33 T
(    \050Line_Buffer_Length * 60\051 + 2;) 159 375.33 T
(Legal_Page_Buffer_Length : constant CORBA.Integer_32 :=) 159 364.33 T
(    \05080 * 80\051 + 2;) 159 353.33 T
153 666.08 153 640.58 2 L
V
0.5 H
0 Z
N
414 666.08 414 640.58 2 L
V
N
152.75 666.33 414.25 666.33 2 L
V
N
152.75 640.33 414.25 640.33 2 L
V
N
153 604.08 153 578.58 2 L
V
N
504 604.08 504 578.58 2 L
V
N
152.75 604.33 504.25 604.33 2 L
V
N
152.75 578.33 504.25 578.33 2 L
V
N
153 542.08 153 505.58 2 L
V
N
504 542.08 504 505.58 2 L
V
N
152.75 542.33 504.25 542.33 2 L
V
N
152.75 505.33 504.25 505.33 2 L
V
N
153 469.08 153 432.58 2 L
V
N
504 469.08 504 432.58 2 L
V
N
152.75 469.33 504.25 469.33 2 L
V
N
152.75 432.33 504.25 432.33 2 L
V
N
153 396.08 153 348.58 2 L
V
N
504 396.08 504 348.58 2 L
V
N
152.75 396.33 504.25 396.33 2 L
V
N
152.75 348.33 504.25 348.33 2 L
V
N
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Any T) 189 739.85 T
(ype) 267.34 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(34) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 9 Q
(4) 54 679.99 T
1 11 Q
(For example, the following IDL typedefs:) 135 679.99 T
0 9 Q
(5) 54 606.99 T
1 11 Q
(will be mapped to:) 135 606.99 T
0 12 Q
(3.8.1) 99.58 511.33 T
(1) 125.6 511.33 T
(Mapping for T) 135 511.33 T
(ypeCodes) 213.44 511.33 T
0 9 Q
(\310 T) 54 486.66 T
(O DO) 66.84 486.66 T
1 10 Q
(Determine mapping for T) 135 486.66 T
(ypeCodes.) 236.78 486.66 T
54 439.92 540 445.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 443.13 449.34 443.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 443.13 125.58 443.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.9) 107.93 449.66 T
(Mapping for Any T) 135 449.66 T
(ype) 248.15 449.66 T
0 9 Q
(\310 T) 54 419.25 T
(O DO) 66.84 419.25 T
1 10 Q
(Finish mapping for the) 135 419.25 T
7 F
(Any) 228.89 419.25 T
1 F
( type) 246.89 419.25 T
0 9 Q
(1) 54 400.59 T
1 11 Q
(An Ada mapping for the IDL type) 135 400.59 T
3 F
(any) 288.05 400.59 T
1 F
( must ful\336ll two dif) 305.17 400.59 T
(ferent requirements:) 390.54 400.59 T
6 F
(\245) 135 382.59 T
1 F
(Handling Ada types in a type-safe manner) 153 382.59 T
(.) 338.13 382.59 T
6 F
(\245) 135 367.59 T
1 F
(Handling values whose types are not known at implementation compile time.) 153 367.59 T
0 9 Q
(2) 54 349.59 T
1 11 Q
-0.35 (The \336rst item covers most normal usage of the) 135 349.59 P
3 F
-0.35 (any) 339.29 349.59 P
1 F
-0.35 ( type--the conversion of typed values into) 356.4 349.59 P
-0.4 (and out of an) 135 337.59 P
3 F
-0.4 (any) 193.9 337.59 P
1 F
-0.4 (. The second item covers situations such as those involving the reception of) 210.3 337.59 P
(a request or response containing an) 135 325.59 T
3 F
(any) 292.63 325.59 T
1 F
( that holds data of a type unknown to the receiver) 309.75 325.59 T
(when it was created with an Ada compiler) 135 313.59 T
(.) 319.82 313.59 T
0 12 Q
(3.9.1) 99.58 286.92 T
(Handling T) 135 286.92 T
(yped V) 196.12 286.92 T
(alues) 234.8 286.92 T
0 9 Q
(1) 54 269.59 T
1 11 Q
-0.35 (T) 135 269.59 P
-0.35 (o decrease the chances of creating an) 140.95 269.59 P
3 F
-0.35 (any) 304.37 269.59 P
1 F
-0.35 ( with a mismatched T) 321.48 269.59 P
-0.35 (ypeCode and value, the Ada) 414.65 269.59 P
-0.17 (function overloading facility is utilized. Speci\336cally) 135 257.59 P
-0.17 (, for each distinct type in an IDL speci\336-) 362.61 257.59 P
(cation, overloaded functions to insert and extract values of that type are provided by each) 135 245.59 T
(ORB implementation.) 135 233.59 T
0 9 Q
(2) 54 215.59 T
1 11 Q
(...) 135 215.59 T
0 12 Q
(3.9.2) 99.58 188.92 T
(Handling Untyped V) 135 188.92 T
(alues) 248.35 188.92 T
0 9 Q
(1) 54 171.59 T
1 11 Q
(...) 135 171.59 T
54 125.51 540 130.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 128.72 449.34 128.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 128.72 125.58 128.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.10) 100.7 135.25 T
(Mapping for Exception T) 135 135.25 T
(ypes) 285.72 135.25 T
0 9 Q
(1) 54 108.18 T
1 11 Q
-0.37 (An IDL exception is declared by specifying an identi\336er and a set of members. This member) 135 108.18 P
(data contains descriptive information, accessible in the event the exception is raised. Stan-) 135 96.18 T
7 9 Q
(typedef string Name, Street_Address[2];) 141 656.33 T
(typedef Name Employee_Name;) 141 645.33 T
(typedef enum Color {Red, Green, Blue} RGB;) 141 634.33 T
(type Name is new Corba.Unbounded.Unbounded_String;) 141 583.33 T
-0.17 (type Street_Address is array\0501 .. 2\051 of Corba.Unbounded.Unbounded_String;) 141 572.33 P
(type Employee_Name is new Name;) 141 561.33 T
(type Color is \050Red, Green, Blue\051;) 141 550.33 T
(type RGB is new Color;) 141 539.33 T
135 666.08 135 629.58 2 L
V
0.5 H
0 Z
N
414 666.08 414 629.58 2 L
V
N
134.75 666.33 414.25 666.33 2 L
V
N
134.75 629.33 414.25 629.33 2 L
V
N
135 593.08 135 534.58 2 L
V
N
540 593.08 540 534.58 2 L
V
N
134.75 593.33 540.25 593.33 2 L
V
N
134.75 534.33 540.25 534.33 2 L
V
N
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Exception T) 207 739.85 T
(ypes) 311.35 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(35) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
1 11 Q
(dard exceptions are prede\336ned as part of the language and can be raised by an ORB given) 153 679.99 T
(the occurrence of the corresponding exceptional condition. Each standard exception has) 153 667.99 T
-0.14 (member data that includes a minor code \050a more detailed subcategory\051 and a completion sta-) 153 655.99 P
(tus. Exceptions can also be declared that are application-speci\336c. The raising of an excep-) 153 643.99 T
(tion is bound to an interface operation as part of the operation declaration. This does not) 153 631.99 T
(imply that the corresponding implementation for the operation must raise the exception; it) 153 619.99 T
(merely announces that the declared operation) 153 607.99 T
5 F
(may) 355.22 607.99 T
1 F
( raise any of the listed exception\050s\051. A) 373.55 607.99 T
(programmer has access to the value of the exception identi\336er upon a raise.) 153 595.99 T
0 9 Q
(2) 72 577.99 T
1 11 Q
(An application-speci\336c exception is declared with a unique identi\336er \050relative to the scope) 153 577.99 T
(of the declaration\051 and a member list that contains zero or more IDL type declarations.) 153 565.99 T
0 12 Q
(3.10.1) 117.58 539.33 T
(Exception identi\336er) 153 539.33 T
0 9 Q
(1) 72 521.99 T
1 11 Q
-0.22 (The IDL exception declaration shall map directly to an Ada exception declaration where the) 153 521.99 P
(exception identi\336er shall be used to name the Ada exception.) 153 509.99 T
0 9 Q
(2) 72 491.99 T
1 11 Q
(For example, the following IDL exception declaration:) 153 491.99 T
0 9 Q
(3) 72 440.99 T
1 11 Q
(will map to the following Ada exception declaration:) 153 440.99 T
0 12 Q
(3.10.1.1) 108 389.33 T
(Access to value of exception identi\336er) 153 389.33 T
0 9 Q
(1) 72 370.99 T
1 11 Q
(A programmer must be able to access the value of the exception identi\336er when an excep-) 153 370.99 T
(tion is raised. A language-de\336ned package,) 153 358.99 T
7 F
(Ada.Exceptions) 345.46 358.99 T
1 F
(, is provided by Ada 9X.) 437.86 358.99 T
-0.41 (The package contains a declaration of type) 153 346.99 P
7 F
-0.97 (Exception_Occurence) 341.08 346.99 P
1 F
-0.41 (. Each occurrence of) 466.48 346.99 P
(an Ada declared exception is represented by a distinct value of type) 153 334.99 T
7 F
(Exception_Occurence) 153 322.99 T
1 F
(. The package is de\336ned as follows:) 278.4 322.99 T
0 9 Q
(2) 72 139.99 T
1 11 Q
(An Ada exception handler may contain a) 153 139.99 T
7 F
(choice_parameter_specification) 335.98 139.99 T
1 F
(; it) 533.98 139.99 T
(represents a constant object of type) 153 127.99 T
7 F
(Exception_Occurrence) 310.63 127.99 T
1 F
(. Upon the raise of an) 442.63 127.99 T
(exception, this constant represents the actual exception being handled. This constant value) 153 115.99 T
(can be used to access the fully quali\336ed name using the function,) 153 103.99 T
7 F
(Exception_Name) 441.71 103.99 T
1 F
(, in) 534.11 103.99 T
7 9 Q
(exception null_exception{};) 159 468.33 T
(Null_Exception: exception;) 159 417.33 T
(package Ada.Exceptions is) 159 299.33 T
(    ...) 159 288.33 T
(    type Exception_Occurence is limited private;) 159 277.33 T
(    type Exception_Occurrence_Access is access all) 159 266.33 T
(Exception_Occurrence;) 159 255.33 T
(    Null_Occurrence: constant Exception_Occurrence;) 159 244.33 T
(    ...) 159 233.33 T
(    function Exception_Name \050X: in Exception_Occurrence\051 return) 159 222.33 T
(String;) 159 211.33 T
(    ...) 159 200.33 T
(    private) 159 189.33 T
(    ... -- not specif) 159 178.33 T
(ied by the language) 272.4 178.33 T
(end Ada.Exceptions;) 159 167.33 T
153 478.08 153 463.58 2 L
V
0.5 H
0 Z
N
369 478.08 369 463.58 2 L
V
N
152.75 478.33 369.25 478.33 2 L
V
N
152.75 463.33 369.25 463.33 2 L
V
N
153 427.08 153 412.58 2 L
V
N
369 427.08 369 412.58 2 L
V
N
152.75 427.33 369.25 427.33 2 L
V
N
152.75 412.33 369.25 412.33 2 L
V
N
153 309.08 153 162.58 2 L
V
N
513 309.08 513 162.58 2 L
V
N
152.75 309.33 513.25 309.33 2 L
V
N
152.75 162.33 513.25 162.33 2 L
V
N
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Exception T) 189 739.85 T
(ypes) 293.35 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(36) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
1 11 Q
-0.4 (the package) 135 679.99 P
7 F
-0.96 (Ada.Exceptions) 189.18 679.99 P
1 F
-0.4 (. The following code fragment illustrates how access to the) 281.58 679.99 P
(name of an Ada exception can be obtained during handling of a raised exception:) 135 667.99 T
0 9 Q
(3) 54 480.99 T
1 11 Q
(Therefore, mapping an IDL exception declaration to an Ada 9X exception declaration pro-) 135 480.99 T
(vides access to the value of the exception identi\336er by default.) 135 468.99 T
0 9 Q
(\310 NOTE) 126 445.66 T
1 10 Q
(Do we need the preceeding section?) 189 445.66 T
0 12 Q
(3.10.2) 99.58 418.33 T
(Exception members) 135 418.33 T
0 9 Q
(1) 54 400.99 T
1 11 Q
(Members are additional information available in the event of a raise of the corresponding) 135 400.99 T
(exception. Members can contain any combination of permissible IDL types. The mapping) 135 388.99 T
-0.03 (for each declared IDL type within the exception members shall be as speci\336ed elsewhere in) 135 376.99 P
(this mapping document.) 135 364.99 T
0 9 Q
(2) 54 346.99 T
1 11 Q
(Exception members shall be mapped to a record type that is an extension of a prede\336ned) 135 346.99 T
(abstract type, IDL_Exception_Members. Implementers shall provide a \050non-abstract\051 func-) 135 334.99 T
(tion, Get_Members, that returns the exception members from the Exception_Occurrence.) 135 322.99 T
(The following declarations are assumed to exist in package) 135 310.99 T
7 F
(CORBA) 398.03 310.99 T
1 F
(:) 431.03 310.99 T
0 12 Q
(3.10.2.1) 90 233.33 T
(Standard Exceptions) 135 233.33 T
0 9 Q
(1) 54 214.99 T
1 11 Q
(A set of standard run-time exceptions is de\336ned in the IDL language speci\336cation. Each of) 135 214.99 T
-0.01 (these exceptions has the same member form. Given the following IDL declarations for stan-) 135 202.99 P
(dard exceptions:) 135 190.99 T
7 9 Q
(with Ada.Text_IO;) 141 644.33 T
(with Ada.Exceptions;) 141 633.33 T
(use Ada;) 141 622.33 T
(procedure Example is) 141 607.33 T
(begin) 141 596.33 T
(    ...) 141 585.33 T
(exception) 141 574.33 T
(-- Unknown_Error is the choice_parameter_specif) 141 563.33 T
(ication) 394.8 563.33 T
(    when Unknown_Error : others =>) 141 552.33 T
(    Text_IO.Put_Line) 141 541.33 T
(       \050\322Unknown exception = \322 &) 141 530.33 T
(        Exceptions.Exception_Name \050Unknown_Error\051\051;) 141 519.33 T
(end Main;) 141 508.33 T
(type IDL_Exception_Members is abstract tagged null record;) 141 287.33 T
(function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051 return) 141 272.33 T
(    IDL_Exception_Members;) 141 261.33 T
(#def) 141 167.33 T
(ine ex_body {unsigned long minor; completion_status com-) 162.6 167.33 T
(pleted;}) 141 156.33 T
(enum completion_status {COMPLETED_YES, COMPLETED_NO,) 141 145.33 T
(COMPLETED_MAYBE};) 141 134.33 T
(enum exception_type {NO_EXCEPTION, USER_EXCEPTION,) 141 123.33 T
(SYSTEM_EXCEPTON};) 141 112.33 T
135 654.08 135 503.58 2 L
V
0.5 H
0 Z
N
486 654.08 486 503.58 2 L
V
N
134.75 654.33 486.25 654.33 2 L
V
N
134.75 503.33 486.25 503.33 2 L
V
N
135 297.08 135 256.58 2 L
V
N
513 297.08 513 256.58 2 L
V
N
134.75 297.33 513.25 297.33 2 L
V
N
134.75 256.33 513.25 256.33 2 L
V
N
135 177.08 135 107.58 2 L
V
N
486 177.08 486 107.58 2 L
V
N
134.75 177.33 486.25 177.33 2 L
V
N
134.75 107.33 486.25 107.33 2 L
V
N
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Exception T) 207 739.85 T
(ypes) 311.35 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(37) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(2) 72 679.99 T
1 11 Q
(the following declarations shall exist in package) 153 679.99 T
7 F
(CORBA) 367.77 679.99 T
1 F
(:) 400.77 679.99 T
0 9 Q
(3) 72 529.99 T
1 11 Q
(For each standard exception speci\336ed in section 4.1.4 of the CORBA speci\336cation, a corre-) 153 529.99 T
(sponding Ada exception shall be declared in package) 153 517.99 T
7 F
(CORBA) 389.45 517.99 T
1 F
(.) 422.45 517.99 T
0 9 Q
(4) 72 499.99 T
1 11 Q
(For example, the IDL standard exception declaration below:) 153 499.99 T
0 9 Q
(5) 72 448.99 T
1 11 Q
(maps to the following:) 153 448.99 T
0 9 Q
(6) 72 397.99 T
1 11 Q
(The \322) 153 397.99 T
7 F
(ex_body) 177.74 397.99 T
1 F
(\323 type will be used to hold the current values associated with the raised) 223.94 397.99 T
(exception and a get_member function available for accessing the values.) 153 385.99 T
0 12 Q
(3.10.2.2) 108 361.33 T
(Application-Speci\336c Exceptions) 153 361.33 T
0 9 Q
(1) 72 342.99 T
1 11 Q
-0.19 (For an application-speci\336c exception declaration, a type extension derived from the abstract) 153 342.99 P
(type,) 153 330.99 T
7 F
(IDL_Exception_Members) 177.44 330.99 T
1 F
(, shall be declared where the extended type name will) 316.04 330.99 T
(be the concatenation of the exception identi\336er with \322) 153 318.99 T
7 F
(_Members) 389.46 318.99 T
1 F
(\323.) 442.26 318.99 T
0 9 Q
(\310 NOTE) 144 295.66 T
1 10 Q
(Implementation Note: The use of the strings associated with Exception_Message and) 207 295.66 T
(Exception_Information in the language-de\336ned package Ada.Exceptions may be used) 207 283.66 T
-0.41 (by the implementer to \322carry\323 the exception members. This may ef) 207 271.66 P
-0.41 (fectively render these) 470.67 271.66 P
(prde\336ned subprograms useless. If so, this fact shall be documented.) 207 259.66 T
0 9 Q
(2) 72 240.99 T
1 11 Q
(For example, the following IDL exception declaration:) 153 240.99 T
7 9 Q
(type completion_Status is) 159 656.33 T
(   \050COMPLETED_YES, COMPLETED_NO, COMPLETED_MAYBE\051;) 159 645.33 T
(type Exception_Type is) 159 634.33 T
(   \050NO_EXCEPTION, USER_EXCEPTION, SYSTEM_EXCEPTION\051;) 159 623.33 T
(type Ex_Eody is new CORBA.IDL_exception_members with) 159 612.33 T
(  record) 159 601.33 T
(    minor     :  CORBA.Integer_32;) 159 590.33 T
(    completed :  completion_status;) 159 579.33 T
(  end record;) 159 568.33 T
(exception UNKNOWN ex_body:) 159 476.33 T
(UNKNOWN: exception;) 159 425.33 T
(exception access_error {) 159 217.33 T
(    long f) 159 206.33 T
(ile_access_code;) 213 206.33 T
(    string access_error_description;) 159 195.33 T
(    }) 159 184.33 T
153 666.08 153 552.58 2 L
V
0.5 H
0 Z
N
504 666.08 504 552.58 2 L
V
N
152.75 666.33 504.25 666.33 2 L
V
N
152.75 552.33 504.25 552.33 2 L
V
N
153 486.08 153 471.58 2 L
V
N
405 486.08 405 471.58 2 L
V
N
152.75 486.33 405.25 486.33 2 L
V
N
152.75 471.33 405.25 471.33 2 L
V
N
153 435.08 153 420.58 2 L
V
N
405 435.08 405 420.58 2 L
V
N
152.75 435.33 405.25 435.33 2 L
V
N
152.75 420.33 405.25 420.33 2 L
V
N
153 227.08 153 179.58 2 L
V
N
504 227.08 504 179.58 2 L
V
N
152.75 227.33 504.25 227.33 2 L
V
N
152.75 179.33 504.25 179.33 2 L
V
N
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Exception T) 189 739.85 T
(ypes) 293.35 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(38) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
0 9 Q
(3) 54 679.99 T
1 11 Q
(will map to the following:) 135 679.99 T
0 9 Q
(4) 54 558.99 T
1 11 Q
(And for an exception declaration without members:) 135 558.99 T
0 9 Q
(5) 54 507.99 T
1 11 Q
(the map will be as follows:) 135 507.99 T
0 9 Q
(\310 NOTE) 126 431.66 T
1 10 Q
(Do we really need to derive a null exception_members type?) 189 431.66 T
0 12 Q
(3.10.3) 99.58 404.33 T
(Example Use) 135 404.33 T
0 9 Q
(1) 54 386.99 T
1 11 Q
(The following interface de\336nition :) 135 386.99 T
7 9 Q
(Access_error : exception;) 141 656.33 T
(type Access_Srror_Members is new) 141 641.33 T
(    CORBA.IDL_Exception_Members with) 141 630.33 T
(    record) 141 619.33 T
(File_Access_Code) 173.4 608.33 T
(: CORBA.Integer_32;) 308.4 608.33 T
(Access_Error_Eescripton : Ada.String.Unbounded;) 173.4 597.33 T
(    end record;) 141 586.33 T
(exception a_simple_exception{};) 141 535.33 T
(A_Simple_Exception : exception;) 141 484.33 T
(type A_Simple_Exception_Members is new) 141 469.33 T
(    CORBA.IDL_Exception_Members with null record;) 141 458.33 T
(interface stack {) 141 363.33 T
(    typedef long element;) 141 352.33 T
(    exception overf) 141 341.33 T
(low{long upper_bound;};) 243.6 341.33 T
(    exception underf) 141 330.33 T
(low{};) 249 330.33 T
(    void push \050in element the_element\051) 141 315.33 T
(        raises \050overf) 141 304.33 T
(low\051;) 254.4 304.33 T
(    void pop  \050out element the_element\051) 141 293.33 T
(        raises \050underf) 141 282.33 T
(low\051;) 259.8 282.33 T
(};) 141 271.33 T
135 666.08 135 581.58 2 L
V
0.5 H
0 Z
N
486 666.08 486 581.58 2 L
V
N
134.75 666.33 486.25 666.33 2 L
V
N
134.75 581.33 486.25 581.33 2 L
V
N
135 545.08 135 530.58 2 L
V
N
378 545.08 378 530.58 2 L
V
N
134.75 545.33 378.25 545.33 2 L
V
N
134.75 530.33 378.25 530.33 2 L
V
N
135 494.08 135 453.58 2 L
V
N
486 494.08 486 453.58 2 L
V
N
134.75 494.33 486.25 494.33 2 L
V
N
134.75 453.33 486.25 453.33 2 L
V
N
135 373.08 135 266.58 2 L
V
N
486 373.08 486 266.58 2 L
V
N
134.75 373.33 486.25 373.33 2 L
V
N
134.75 266.33 486.25 266.33 2 L
V
N
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Exception T) 207 739.85 T
(ypes) 311.35 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(39) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(2) 72 679.99 T
1 11 Q
(maps to the following in Ada 9X :) 153 679.99 T
0 9 Q
(3) 72 457.99 T
1 11 Q
(The following usage of the stack illustrates access to members upon an exception raise:) 153 457.99 T
0 9 Q
(\310 T) 72 140.66 T
(O DO) 84.84 140.66 T
1 10 Q
(Need to illustrate multiple choice exception handlers and the when others case.) 153 140.66 T
7 9 Q
(package Stack is) 159 656.33 T
(...) 159 641.33 T
(    type Element is new CORBA.Integer_32;) 159 626.33 T
(Overf) 180.6 611.33 T
(low     :    exception;) 207.6 611.33 T
(Underf) 180.6 600.33 T
(low    :    exception;) 213 600.33 T
(    type Overf) 159 585.33 T
(low_Members is new) 234.6 585.33 T
(        CORBA.IDL_Exception_Members with) 159 574.33 T
(        record) 159 563.33 T
(Upper_Bound : CORBA.Integer_32;) 229.2 552.33 T
(        end record;) 159 541.33 T
(    type Underf) 159 526.33 T
(low_Members is new) 240 526.33 T
(        CORBA.IDL_Exception_Members with null record;) 159 515.33 T
(...) 159 500.33 T
(end stack;) 159 485.33 T
(with Ada.Text_IO;) 159 434.33 T
(with Ada.Exceptions;) 159 423.33 T
(with Stack;) 159 412.33 T
(use Ada;) 159 401.33 T
(procedure Use_stack is) 159 386.33 T
(    ...) 159 371.33 T
(The_Overf) 180.6 356.33 T
(low_Members : Stack.Overf) 229.2 356.33 T
(low_Members;) 364.2 356.33 T
(The_Underf) 180.6 345.33 T
(low_Members: Stack.Underf) 234.6 345.33 T
(low_Members;) 369.6 345.33 T
(begin) 159 330.33 T
(    ...) 159 315.33 T
(exception) 159 300.33 T
(     when Stack_Error: Stack.Overf) 159 285.33 T
(low =>) 342.6 285.33 T
(The_Overf) 207.6 274.33 T
(low_Members :=) 256.2 274.33 T
(             Stack.Get_Members\050Stack_Error\051;) 159 263.33 T
(Text_IO.Put_Line \050\322Exception raised is \322 &) 207.6 252.33 T
(Exceptions.Exception_Name \050Stack_Error\051\051;) 229.2 241.33 T
(Text_IO.Put_Line) 207.6 230.33 T
(\050\322exceeded upper bound = \322 &) 229.2 219.33 T
(CORBA.Integer_32\325image) 256.2 208.33 T
(\050The_Overf) 277.8 197.33 T
(low_Members.Upper_Bound\051\051;) 331.8 197.33 T
(    ...) 159 182.33 T
(end Use_stack;) 159 167.33 T
153 666.08 153 480.58 2 L
V
0.5 H
0 Z
N
504 666.08 504 480.58 2 L
V
N
152.75 666.33 504.25 666.33 2 L
V
N
152.75 480.33 504.25 480.33 2 L
V
N
153 444.08 153 162.58 2 L
V
N
504 444.08 504 162.58 2 L
V
N
152.75 444.33 504.25 444.33 2 L
V
N
152.75 162.33 504.25 162.33 2 L
V
N
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Mapping for Operations and Attributes) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(40) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
54 668.92 540 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 672.13 449.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 672.13 125.58 672.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.1) 101.42 678.66 T
(1) 118.77 678.66 T
(Mapping for Operations and Attributes) 135 678.66 T
0 9 Q
(1) 54 651.59 T
1 11 Q
(Operations shall map to an Ada subprogram with the same name as the operation. The \336rst) 135 651.59 T
(parameter to operation subprograms will refer to the object that the operation is being per-) 135 639.59 T
(formed on. The \336rst parameter shall be an \322in\323 mode parameter with the name \322Self\323 and) 135 627.59 T
(shall be of the mapped Object Reference type.) 135 615.59 T
0 9 Q
(2) 54 597.59 T
1 11 Q
(IDL interface operations with non-void result type that have only in-mode parameters shall) 135 597.59 T
(be mapped to Ada functions returning an Ada type mapped from the operation result type.) 135 585.59 T
-0.14 (Otherwise, \050non-void IDL interface operations that have out-mode parameters, or void oper-) 135 573.59 P
(ations with only in-mode parameters\051, operations shall be mapped to Ada procedures. The) 135 561.59 T
(non-void result is returned via the procedures \336nal parameter) 135 549.59 T
(, \322) 403.39 549.59 T
7 F
(Result) 413.77 549.59 T
1 F
(\323.) 453.37 549.59 T
0 9 Q
(3) 54 531.59 T
1 11 Q
(Read-only attributes map to an Ada function with name \322GET_\323 prepended to the attribute) 135 531.59 T
(name. Read-write attributes map to an Ada function with name \322GET_\323 prepended to the) 135 519.59 T
(attribute name and an Ada procedure with name \322SET_\323 prepended to the attribute name.) 135 507.59 T
(The) 135 495.59 T
5 F
(set) 154.85 495.59 T
1 F
( procedure takes a controlling parameter of object reference type and name \322Self\323,) 167.08 495.59 T
-0.08 (and a parameter with the same type as the attribute and name \322T) 135 483.59 P
-0.08 (o\323. The) 416.15 483.59 P
5 F
-0.08 (get) 451.73 483.59 P
1 F
-0.08 ( function takes a) 465.17 483.59 P
(controlling parameter only \050of object reference type and name \322Self\323\051 and returns the type) 135 471.59 T
(mapped from the attribute type.) 135 459.59 T
0 9 Q
(4) 54 441.59 T
1 11 Q
-0.01 (IDL) 135 441.59 P
3 F
-0.01 (oneway) 156.07 441.59 P
1 F
-0.01 ( operations are mapped the same as other operations; that is, there is no way to) 191.51 441.59 P
(know by looking at the Ada whether an operation is) 135 429.59 T
3 F
(oneway) 365.97 429.59 T
1 F
( or not.) 401.41 429.59 T
0 9 Q
(\310 NOTE) 126 406.25 T
1 10 Q
(Implementation are encouraged to add a comment to the generated speci\336cation that) 189 406.25 T
(states that the operation is) 189 394.25 T
3 F
(oneway) 295.38 394.25 T
1 F
(.) 326.95 394.25 T
0 9 Q
(5) 54 375.59 T
1 11 Q
(The speci\336cation of exceptions for an IDL operation are not part of the generated operation.) 135 375.59 T
0 9 Q
(\310 T) 54 352.25 T
(O DO) 66.84 352.25 T
1 10 Q
(Specify mapping for context clauses.) 135 352.25 T
0 9 Q
(\310 NOTE) 126 328.25 T
1 10 Q
(Unlike the C mapping, Ada operations do not require an additional) 189 328.25 T
3 F
(Envir) 458.97 328.25 T
(onment) 483.24 328.25 T
1 F
(parameter for passing exception information--real Ada exceptions are used for this pur-) 189 316.25 T
(pose.) 189 304.25 T
54 257.51 540 262.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 260.72 449.34 260.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 260.72 125.58 260.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(3.12) 100.7 267.25 T
(Argument Passing Considerations) 135 267.25 T
0 9 Q
(6) 54 240.18 T
1 11 Q
(The existing Ada language parameter passing conventions are followed for all types. The) 135 240.18 T
(mapping for) 135 228.18 T
3 F
(out) 191.83 228.18 T
1 F
( and) 207.1 228.18 T
3 F
(inout) 228.49 228.18 T
1 F
( parameters to the Ada \322) 252.94 228.18 T
3 F
(in) 360.16 228.18 T
1 F
(\323 and \322) 369.33 228.18 T
3 F
(in out) 400.48 228.18 T
1 F
(\323 parameter modes) 427.69 228.18 T
(removes the need for any special parameter passing rules.) 135 216.18 T
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
0 9 Q
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(41) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
3 10 Q
1 (CHAPTER 4) 72 671.33 S
5 24 Q
(The Mapping of) 162 671.33 T
(Pseudo-Objects to Ada) 162 641.33 T
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Usage) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(42) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
54 668.92 540 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 672.13 449.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 672.13 125.58 672.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.1) 107.93 678.66 T
(Usage) 135 678.66 T
54 625.51 540 630.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 628.72 449.34 628.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 628.72 125.58 628.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.2) 107.93 635.25 T
(Mapping Rules) 135 635.25 T
54 582.1 540 587.51 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 585.31 449.34 585.31 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 585.31 125.58 585.31 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.3) 107.93 591.84 T
(Relation to the C PIDL Mapping) 135 591.84 T
54 538.69 540 544.1 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 541.9 449.34 541.9 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 541.9 125.58 541.9 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.4) 107.93 548.44 T
(Environment) 135 548.44 T
54 495.29 540 500.7 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 498.5 449.34 498.5 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 498.5 125.58 498.5 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.5) 107.93 505.03 T
(Environment Interface) 135 505.03 T
54 451.88 540 457.29 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 455.09 449.34 455.09 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 455.09 125.58 455.09 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.6) 107.93 461.62 T
(Named V) 135 461.62 T
(alue) 189.91 461.62 T
54 408.47 540 413.88 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 411.68 449.34 411.68 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 411.68 125.58 411.68 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.7) 107.93 418.21 T
(NVList) 135 418.21 T
54 365.06 540 370.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 368.27 449.34 368.27 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 368.27 125.58 368.27 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.8) 107.93 374.8 T
(Request) 135 374.8 T
54 321.66 540 327.06 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 324.86 449.34 324.86 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 324.86 125.58 324.86 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.9) 107.93 331.4 T
(Context) 135 331.4 T
54 278.25 540 283.66 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 281.46 449.34 281.46 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 281.46 125.58 281.46 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.10) 100.7 287.99 T
(Principal) 135 287.99 T
54 234.84 540 240.25 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 238.05 449.34 238.05 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 238.05 125.58 238.05 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.1) 101.42 244.58 T
(1) 118.77 244.58 T
(T) 135 244.58 T
(ypeCode) 141.98 244.58 T
54 191.43 540 196.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 194.64 449.34 194.64 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 194.64 125.58 194.64 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.12) 100.7 201.17 T
(BOA) 135 201.17 T
54 148.02 540 153.43 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 151.23 449.34 151.23 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 151.23 125.58 151.23 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.13) 100.7 157.77 T
(ORB) 135 157.77 T
54 104.62 540 110.03 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 107.83 449.34 107.83 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 107.83 125.58 107.83 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(4.14) 100.7 114.36 T
(Object) 135 114.36 T
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Implementing Interfaces) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(43) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
3 10 Q
1 (CHAPTER 5) 72 671.33 S
5 24 Q
(Server) 162 671.33 T
(-Side Mapping) 224.16 671.33 T
0 9 Q
(1) 72 349.99 T
1 11 Q
(This mapping refers to the portability constraints for an implementation written in Ada 9X) 153 349.99 T
-0.06 (as the) 153 337.99 P
5 F
-0.06 (server side) 180.98 337.99 P
1 F
-0.06 ( mapping. The term) 228.87 337.99 P
5 F
-0.06 (server) 318.13 337.99 P
1 F
-0.06 ( here is not meant to restrict implementations to) 345.62 337.99 P
(the situation where method invocations cross address space or machine boundaries. This) 153 325.99 T
(mapping is meant to address any implementation of an IDL interface.) 153 313.99 T
0 9 Q
(2) 72 295.99 T
1 11 Q
(The required functionality for a server described here is probably a subset of the functional-) 153 295.99 T
(ity an implementation will actually need. As a consequence, in practice few servers will be) 153 283.99 T
-0.16 (completely conformant. However) 153 271.99 P
-0.16 (, we expect the bulk of the server code to be portable from) 300.4 271.99 P
(one ORB implementation to another) 153 259.99 T
(.) 312.5 259.99 T
72 213.92 558 219.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 217.13 467.34 217.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 217.13 143.58 217.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(5.1) 125.93 223.66 T
(Implementing Interfaces) 153 223.66 T
0 9 Q
(1) 72 196.59 T
1 11 Q
-0.13 (The implementation of an IDL interface is mapped to a child package, named) 153 196.59 P
7 F
-0.31 (Impl) 495.32 196.59 P
1 F
-0.13 (, of that) 521.72 196.59 P
(interface\325) 153 184.59 T
(s client side interface package. The speci\336cation of this package contains subpro-) 194.54 184.59 T
(grams associated with the IDL interface\325) 153 172.59 T
(s operations and the declaration of a record type,) 331.71 172.59 T
7 F
(Object) 153 160.59 T
1 F
(, derived from) 192.6 160.59 T
7 F
(BaseObject.Object) 257.97 160.59 T
1 F
(. The operation subprograms are invoked) 370.17 160.59 T
(by the ORB. The object record is used to hold member data employed by the implementa-) 153 148.59 T
(tion of an interface.) 153 136.59 T
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Implementing Operations) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(44) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
54 668.92 540 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 672.13 449.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 672.13 125.58 672.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(5.2) 107.93 678.66 T
(Implementing Operations) 135 678.66 T
0 9 Q
(1) 54 651.59 T
1 11 Q
(The parameters passed to an implementation subprogram parallel those passed to the client) 135 651.59 T
(side stub but the type of the) 135 639.59 T
7 F
(Self) 259.36 639.59 T
1 F
( parameter is) 285.76 639.59 T
7 F
(access Object) 345.32 639.59 T
1 F
(  described above rather) 431.12 639.59 T
(than the reference type declared in the stub package. The types of interface parameters are) 135 627.59 T
(declared with the Ada 9X) 135 615.59 T
7 F
(\325Class) 250.77 615.59 T
1 F
( attribute.) 290.38 615.59 T
54 569.51 540 574.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 572.72 449.34 572.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 572.72 125.58 572.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(5.3) 107.93 579.25 T
(Binding Object References to Objects) 135 579.25 T
0 9 Q
(\310 T) 54 548.85 T
(O DO) 66.84 548.85 T
1 10 Q
(Complete.) 135 548.85 T
54 502.1 540 507.51 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 505.31 449.34 505.31 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 505.31 125.58 505.31 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(5.4) 107.93 511.85 T
(Examples) 135 511.85 T
0 9 Q
(2) 54 484.77 T
1 11 Q
(The following IDL interface:) 135 484.77 T
0 8 Q
(File cultivation.idl:) 203.4 462.77 T
7 9 Q
(#include \322barn.idl\323) 203.4 448.1 T
(interface Plow {) 203.4 433.1 T
(    long row\050\051;) 203.4 422.1 T
(    void attach\050in short blade\051;) 203.4 411.1 T
(    void harness\050in Horse power\051;) 203.4 400.1 T
(};) 203.4 389.1 T
197.4 474.85 197.4 384.35 2 L
V
0.5 H
0 Z
N
413.4 474.85 413.4 384.35 2 L
V
N
197.15 475.1 413.65 475.1 2 L
V
N
197.15 458.1 413.65 458.1 2 L
V
0.25 H
N
197.15 384.1 413.65 384.1 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Examples) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(45) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
(3) 72 679.99 T
1 11 Q
(causes the IDL translator to generate, in addition to the client packages discussed in previ-) 153 679.99 T
(ous sections, the following implementation speci\336cation:) 153 667.99 T
0 9 Q
(\310 NOTE) 144 365.66 T
1 10 Q
(The placement of the object record in the private part is not mandated by the mapping.) 207 365.66 T
0 8 Q
(File cultivation-plow-impl.ads:) 221.4 645.99 T
7 9 Q
(with Corba;) 221.4 631.33 T
(with Corba.BaseObject;) 221.4 620.33 T
(with Barn.Horse;) 221.4 609.33 T
(package Cultivation.Plow.Impl is) 221.4 594.33 T
(    type Object is new Corba.BaseObject.Object with private;) 221.4 579.33 T
(    function row) 221.4 564.33 T
(            \050Self : access Object\051) 221.4 553.33 T
(        return Corba.Integer_32;) 221.4 542.33 T
(    procedure attach) 221.4 527.33 T
(            \050Self  : access Object;) 221.4 516.33 T
(             blade : in Corba.Integer_16\051;) 221.4 505.33 T
(    procedure harness) 221.4 490.33 T
(            \050Self  : access Object;) 221.4 479.33 T
(             power : in Barn.Horse.Ref\325Class\051;) 221.4 468.33 T
(private) 221.4 453.33 T
(    type Object is new Corba.BaseObject.Object with) 221.4 438.33 T
(        record) 221.4 427.33 T
(            X : Integer; -- \050implementation data\051) 221.4 416.33 T
(        end record;) 221.4 405.33 T
(end Cultivation.Plow.Impl;) 221.4 390.33 T
215.4 658.08 215.4 385.58 2 L
V
0.5 H
0 Z
N
558 658.08 558 385.58 2 L
V
N
215.15 658.33 558.25 658.33 2 L
V
N
215.15 641.33 558.25 641.33 2 L
V
0.25 H
N
215.15 385.33 558.25 385.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Examples) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(46) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(47) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
3 10 Q
1 (CHAPTER 6) 72 671.33 S
5 24 Q
(Pr) 162 671.33 T
(ede\336ned Language) 185.11 671.33 T
(Envir) 162 641.33 T
(onment: Package) 214.44 641.33 T
(CORBA and Childr) 162 611.33 T
(en) 349.13 611.33 T
1 10 Q
(This appendix provides a complete speci\336cation of the CORBA package and its children that comprise the pre-de\336ned) 72 290.66 T
(Ada environment  which CORBA-compliant clients and servers must be provided by compliant products.) 72 278.66 T
(Any references to package Implementaton_De\336ned  shown here indicate items that are to be de\336ned by the implementa-) 72 254.66 T
(tion and should not be misinterpreted as the required de\336nitions for these items.) 72 242.66 T
72 195.92 558 201.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 199.13 467.34 199.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 199.13 143.58 199.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(6.1) 125.93 205.66 T
(Package CORBA) 153 205.66 T
0 9 Q
(1) 72 178.59 T
(2) 72 160.59 T
72 114.51 558 119.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 117.72 467.34 117.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 117.72 143.58 117.72 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(6.2) 125.93 124.25 T
(Package CORBA.Bounded Speci\336cation) 153 124.25 T
7 10 Q
(with Ada.Strings;) 126 97.84 T
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Bounded Speci\336cation) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(48) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
7 10 Q
(generic) 108 669.66 T
(    type Element is private;) 108 658.66 T
(    Max : Positive;    -- Maximum length of the bounded sequence) 108 647.66 T
(package Corba.Bounded_Sequence is) 108 636.66 T
(    Max_Length : constant Positive := Max;) 108 614.66 T
(    type Element_Array is array \050integer range <>\051 of Element;) 108 592.66 T
(    Null_Element_Array : Element_Array\0501..0\051;) 108 570.66 T
(    type Sequence is private;) 108 548.66 T
(    Null_Sequence : constant Sequence;) 108 526.66 T
(    subtype Length_Range is Natural range 0 .. Max_Length;) 108 504.66 T
(    function Length \050Source : Sequence\051) 108 482.66 T
(            return Length_Range;) 108 471.66 T
(    --------------------------------------------------------) 108 449.66 T
(    -- Conversion, Concatenation, and Selection Functions --) 108 438.66 T
(    --------------------------------------------------------) 108 427.66 T
(    function To_Sequence) 108 405.66 T
(                \050Source : in Element_Array;) 108 394.66 T
(                 Drop   : in Ada.Strings.Truncation :=) 108 383.66 T
(                             Ada.Strings.Error\051) 108 372.66 T
(            return Sequence;) 108 361.66 T
(    function To_Sequence \050Length : in Length_Range\051) 108 339.66 T
(            return Sequence;) 108 328.66 T
(    function To_Element_Array \050Source : in Sequence\051) 108 306.66 T
(            return Element_Array;) 108 295.66 T
(    procedure Append) 108 273.66 T
(                \050Source   : in out Sequence;) 108 262.66 T
(                 New_Item : in Sequence;) 108 251.66 T
(                 Drop     : in Ada.Strings.Truncation :=) 108 240.66 T
(                               Ada.Strings.Error\051;) 108 229.66 T
(    procedure Append) 108 207.66 T
(                \050Source   : in out Sequence;) 108 196.66 T
(                 New_Item : in Element_Array;) 108 185.66 T
(                 Drop     : in Ada.Strings.Truncation :=) 108 174.66 T
(                               Ada.Strings.Error\051;) 108 163.66 T
(    procedure Append) 108 141.66 T
(                \050Source   : in out Sequence;) 108 130.66 T
(                 New_Item : in Element;) 108 119.66 T
(                 Drop     : in Ada.Strings.Truncation :=) 108 108.66 T
(                               Ada.Strings.Error\051;) 108 97.66 T
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Bounded Speci\336cation) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(49) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
7 10 Q
(    function \322&\323 \050Left, Right : Sequence\051) 126 669.66 T
(            return Sequence;) 126 658.66 T
(    function \322&\323) 126 636.66 T
(                \050Left  : Sequence;) 126 625.66 T
(                 Right : Element_Array\051) 126 614.66 T
(            return  Sequence;) 126 603.66 T
(    function \322&\323) 126 581.66 T
(                \050Left  : Element_Array;) 126 570.66 T
(                 Right : Sequence\051) 126 559.66 T
(            return  Sequence;) 126 548.66 T
(    function \322&\323) 126 526.66 T
(                \050Left  : Sequence;) 126 515.66 T
(                 Right : Element\051) 126 504.66 T
(            return  Sequence;) 126 493.66 T
(    function \322&\323) 126 471.66 T
(                \050Left  : Element;) 126 460.66 T
(                 Right : Sequence\051) 126 449.66 T
(            return  Sequence;) 126 438.66 T
(    function Element_Of) 126 416.66 T
(                \050Source : Sequence;) 126 405.66 T
(                 Index  : Positive\051) 126 394.66 T
(            return   Element;) 126 383.66 T
(    procedure Replace_Element) 126 361.66 T
(                \050Source : in out Sequence;) 126 350.66 T
(                 Index  : Positive;) 126 339.66 T
(                 By     : Element\051;) 126 328.66 T
(    function Slice) 126 306.66 T
(                \050Source : Sequence;) 126 295.66 T
(                 Low    : Positive;) 126 284.66 T
(                 High   : Natural\051) 126 273.66 T
(            return   Element_Array;) 126 262.66 T
(    function \322=\323 \050Left, Right : in Sequence\051) 126 240.66 T
(            return Boolean;) 126 229.66 T
(    function \322=\323) 126 207.66 T
(                \050Left  : in Sequence;) 126 196.66 T
(                 Right : in Element_Array\051) 126 185.66 T
(            return  Boolean;) 126 174.66 T
(    function \322=\323) 126 152.66 T
(                \050Left  : in Element_Array;) 126 141.66 T
(                 Right : in Sequence\051) 126 130.66 T
(            return  Boolean;) 126 119.66 T
(    ----------------------) 126 97.66 T
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Bounded Speci\336cation) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(50) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
7 10 Q
(    -- Search functions --) 108 680.66 T
(    ----------------------) 108 669.66 T
(    function Index) 108 647.66 T
(                \050Source   : Sequence;) 108 636.66 T
(                 Pattern  : Element_Array;) 108 625.66 T
(                 Going    : Ada.Strings.Direction :=) 108 614.66 T
(                            Ada.Strings.Forward\051) 108 603.66 T
(            return     Natural;) 108 592.66 T
(    function Count) 108 570.66 T
(                \050Source  : Sequence;) 108 559.66 T
(                 Pattern : Element_Array\051) 108 548.66 T
(            return    Natural;) 108 537.66 T
(    -----------------------------------------) 108 515.66 T
(    -- Sequence transformation subprograms --) 108 504.66 T
(    -----------------------------------------) 108 493.66 T
(    function Replace_Slice) 108 471.66 T
(                \050Source : Sequence;) 108 460.66 T
(                 Low    : Positive;) 108 449.66 T
(                 High   : Natural;) 108 438.66 T
(                 By     : Element_Array\051) 108 427.66 T
(            return   Sequence;) 108 416.66 T
(    procedure Replace_Slice) 108 394.66 T
(                \050Source   : in out Sequence;) 108 383.66 T
(                 Low      : in Positive;) 108 372.66 T
(                 High     : in Natural;) 108 361.66 T
(                 By       : in Element_Array\051;) 108 350.66 T
(    function Insert) 108 328.66 T
(                \050Source   : Sequence;) 108 317.66 T
(                 Before   : Positive;) 108 306.66 T
(                 New_Item : Element_Array\051) 108 295.66 T
(            return     Sequence;) 108 284.66 T
(    procedure Insert) 108 262.66 T
(                \050Source   : in out Sequence;) 108 251.66 T
(                 Before   : in Positive;) 108 240.66 T
(                 New_Item : in Element_Array\051;) 108 229.66 T
(    function Overwrite) 108 207.66 T
(                \050Source   : Sequence;) 108 196.66 T
(                 Position : Positive;) 108 185.66 T
(                 New_Item : Element_Array\051) 108 174.66 T
(            return     Sequence;) 108 163.66 T
(    procedure Overwrite) 108 141.66 T
(                \050Source    : in out Sequence;) 108 130.66 T
(                 Position  : in Positive;) 108 119.66 T
(                 New_Item  : in Element_Array\051;) 108 108.66 T
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Bounded Speci\336cation) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(51) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
7 10 Q
(    function Delete) 126 680.66 T
(                \050Source  : Sequence;) 126 669.66 T
(                 From    : Positive;) 126 658.66 T
(                 Through : Natural\051) 126 647.66 T
(            return    Sequence;) 126 636.66 T
(    procedure Delete) 126 614.66 T
(                \050Source  : in out Sequence;) 126 603.66 T
(                 From    : in Positive;) 126 592.66 T
(                 Through : in Natural\051;) 126 581.66 T
(    ---------------------------------) 126 559.66 T
(    -- String selector subprograms --) 126 548.66 T
(    ---------------------------------) 126 537.66 T
(    function Trim) 126 515.66 T
(                \050Source : in Sequence;) 126 504.66 T
(                 Side   : in Trim_End\051) 126 493.66 T
(            return Sequence;) 126 482.66 T
(    procedure Trim) 126 460.66 T
(                \050Source : in out Sequence;) 126 449.66 T
(                 Side   : in Trim_End\051;) 126 438.66 T
(    function Head) 126 416.66 T
(                \050Source : Sequence;) 126 405.66 T
(                 Count  : Natural;) 126 394.66 T
(                 Pad    : Element := Space\051) 126 383.66 T
(            return   Sequence;) 126 372.66 T
(    procedure Head) 126 350.66 T
(                \050Source : in out Sequence;) 126 339.66 T
(                 Count  : in Natural;) 126 328.66 T
(                 Pad    : in Element := Space\051;) 126 317.66 T
(    function Tail) 126 295.66 T
(                \050Source : Sequence;) 126 284.66 T
(                 Count  : Natural;) 126 273.66 T
(                 Pad    : Element := Space\051) 126 262.66 T
(            return   Sequence;) 126 251.66 T
(    procedure Tail) 126 229.66 T
(                \050Source : in out Sequence;) 126 218.66 T
(                 Count  : in Natural;) 126 207.66 T
(                 Pad    : in Element := Space\051;) 126 196.66 T
(    ------------------------------------) 126 174.66 T
(    -- String constructor subprograms --) 126 163.66 T
(    ------------------------------------) 126 152.66 T
(    function \322*\323) 126 130.66 T
(                \050Left  : Natural;) 126 119.66 T
(                 Right : Element\051) 126 108.66 T
(            return  Sequence;) 126 97.66 T
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Unbounded_Sequence Speci\336cation) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(52) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
7 10 Q
(    function \322*\323) 108 669.66 T
(                \050Left  : Natural;) 108 658.66 T
(                 Right : Element_Array\051) 108 647.66 T
(            return  Sequence;) 108 636.66 T
(    function \322*\323) 108 614.66 T
(                \050Left  : Natural;) 108 603.66 T
(                 Right : Sequence\051) 108 592.66 T
(            return  Sequence;) 108 581.66 T
(    function Replicate) 108 559.66 T
(                \050Count : in Natural;) 108 548.66 T
(                 Item  : in Element;) 108 537.66 T
(                 Drop  : in Truncation := Error\051) 108 526.66 T
(    return  Sequence;) 108 515.66 T
(    function Replicate) 108 493.66 T
(                \050Count : in Natural;) 108 482.66 T
(                 Item  : in Element_Array;) 108 471.66 T
(                 Drop  : in Truncation := Error\051) 108 460.66 T
(    return  Sequence;) 108 449.66 T
(    function Replicate) 108 427.66 T
(                \050Count : in Natural;) 108 416.66 T
(                 Item  : in Sequence;) 108 405.66 T
(                 Drop  : in Truncation := Error\051) 108 394.66 T
(    return  Sequence;) 108 383.66 T
(private) 108 361.66 T
(    -- implementation def) 108 339.66 T
(ined) 258 339.66 T
(end Corba.Bounded_Sequence;) 108 317.66 T
54 271.92 540 277.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 275.13 449.34 275.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 275.13 125.58 275.13 2 L
0 Z
N
0 0 612 792 C
0 13 Q
0 X
0 0 0 1 0 0 0 K
(6.3) 107.93 281.66 T
(Package CORBA.Unbounded_Sequence Speci\336cation) 135 281.66 T
7 10 Q
(with Ada.Strings;) 108 255.25 T
(with Ada.Finalization;) 108 244.25 T
(generic) 108 233.25 T
(        type Element is private;) 108 222.25 T
(package CORBA.Unbounded_Sequence is) 108 211.25 T
(--------------------------------------------------------------------) 108 189.25 T
(--) 108 178.25 T
(-- Abstract: operations and def) 108 167.25 T
(inition of the OMG IDL unbounded sequence) 294 167.25 T
(-- type.) 108 156.25 T
(--) 108 145.25 T
(-- Purpose: this generic package is instantiated for each IDL unbounded) 108 134.25 T
(-- sequence type. It def) 108 123.25 T
(ines the Sequence type and operations. The) 252 123.25 T
(-- operations on Sequence are modeled after those contained in) 108 112.25 T
(-- Ada.Strings.Unbounded, except for those that are specif) 108 101.25 T
(ic to having) 456 101.25 T
FMENDPAGE
%%EndPage: "52" 52
%%Page: "53" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Unbounded_Sequence Speci\336cation) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(53) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
7 10 Q
(-- character elements \050especially those that deal with mapping of) 126 680.66 T
(-- character sets\051.) 126 669.66 T
(--) 126 658.66 T
(-- Semantics:) 126 647.66 T
(--) 126 636.66 T
(-- Most query operations are unusable until the object has been) 126 625.66 T
(-- initialized through assignment to a value.) 126 614.66 T
(--) 126 603.66 T
(-- Value semantics apply to assignment. That is, the assignment of a) 126 592.66 T
(-- value of type Sequence to an object of type Sequence yields) 126 581.66 T
(-- a copy of the elements of the sequence.) 126 570.66 T
(--) 126 559.66 T
(-- The user should not assume safety under tasking, i.e. the) 126 548.66 T
(-- implementation is only required to implement sequential semantics.) 126 537.66 T
(--) 126 526.66 T
(-- Exceptions raised:) 126 515.66 T
(--) 126 504.66 T
(-- The exception Index_Error is used to indicate that queries are using) 126 493.66 T
(-- indices not in the range of the object being queried.) 126 482.66 T
(--) 126 471.66 T
(-- Constraint_Error will be raised on attempts to operate on objects) 126 460.66 T
-0.55 (-- that have not been properly initialized, i.e. there has not previously) 126 449.66 P
(-- been an assignment to them \050or a Make_Empty operation\051.) 126 438.66 T
(--) 126 427.66 T
(--------------------------------------------------------------------) 126 416.66 T
(    type Element_Array is array\050Integer range <>\051 of Element;) 126 394.66 T
(    Null_Element_Array : Element_Array\0501 .. 0\051;) 126 383.66 T
(    type Sequence is private;) 126 361.66 T
(    Null_Sequence : constant Sequence;) 126 350.66 T
(    function Length\050 Source : in Sequence\051 return Natural;) 126 328.66 T
(    type Element_Array_Access is access all Element_Array;) 126 306.66 T
(    procedure Free\050X : in out Element_Array_Access\051;) 126 295.66 T
(   -----------------------------------------------------) 126 273.66 T
(   -- Conversion, Catenation, and Selection Functions --) 126 262.66 T
(   -----------------------------------------------------) 126 251.66 T
(    function To_Sequence\050Source : in Element_Array\051 return Sequence;) 126 229.66 T
(    function To_Sequence\050Length : in Natural\051 return Sequence;) 126 218.66 T
(    function To_Element_Array\050Source : in Sequence\051) 126 207.66 T
(        return Element_Array;) 126 196.66 T
(    procedure Append\050Source : in out Sequence;) 126 174.66 T
(                     New_Item : in Sequence\051;) 126 163.66 T
(    procedure Append\050Source : in out Sequence;) 126 152.66 T
(                     New_Item : in Element_Array\051;) 126 141.66 T
(    procedure Append\050Source : in out Sequence;) 126 130.66 T
(                     New_Item : in Element\051;) 126 119.66 T
(    function \322&\323 \050Left, Right : in Sequence\051 return Sequence;) 126 97.66 T
FMENDPAGE
%%EndPage: "53" 53
%%Page: "54" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Unbounded_Sequence Speci\336cation) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(54) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
7 10 Q
(    function \322&\323 \050Left : in Sequence; Right : in Element_Array\051) 108 680.66 T
(        return Sequence;) 108 669.66 T
(    function \322&\323 \050Left : in Element_Array; Right : in Sequence\051) 108 658.66 T
(        return Sequence;) 108 647.66 T
(    function \322&\323 \050Left : in Sequence; Right : in Element\051) 108 636.66 T
(        return Sequence;) 108 625.66 T
(    function \322&\323 \050Left : in Element; Right : in Sequence\051) 108 614.66 T
(        return Sequence;) 108 603.66 T
(    Index_Error : exception;) 108 581.66 T
(    function Element_of\050Source : in Sequence;) 108 559.66 T
(                        Index  : in Positive\051) 108 548.66 T
(                        return   Element;) 108 537.66 T
(    procedure Replace_Element) 108 515.66 T
(     \050Source : in out Sequence;) 108 504.66 T
(      Index  : in Positive;) 108 493.66 T
(      By     : in Element\051;) 108 482.66 T
(    function Slice) 108 460.66 T
(     \050Source : in Sequence;) 108 449.66 T
(      Low    : in Positive;) 108 438.66 T
(      High   : in Natural\051) 108 427.66 T
(      return   Element_Array;) 108 416.66 T
(    function \322=\323  \050Left, Right : in Sequence\051 return Boolean;) 108 394.66 T
(    function \322=\323  \050Left: in Element_Array;) 108 383.66 T
(                    Right : in Sequence\051 return Boolean;) 108 372.66 T
(    function \322=\323  \050Left : in Sequence;) 108 361.66 T
(                    Right : in Element_Array\051 return Boolean;) 108 350.66 T
(   ------------------------) 108 328.66 T
(   -- Search Subprograms --) 108 317.66 T
(   ------------------------) 108 306.66 T
(    function Index) 108 284.66 T
(     \050Source   : in Sequence;) 108 273.66 T
(      Pattern  : in Element_Array;) 108 262.66 T
(      Going    : in Ada.Strings.Direction := Ada.Strings.Forward) 108 251.66 T
(      \051return     Natural;) 108 240.66 T
(   function Count) 108 218.66 T
(     \050Source  : in Sequence;) 108 207.66 T
(      Pattern : in Element_Array) 108 196.66 T
(      \051return    Natural;) 108 185.66 T
(   ---------------------------------------) 108 163.66 T
(   -- Sequence Transformation Subprograms --) 108 152.66 T
(   ---------------------------------------) 108 141.66 T
(   function Replace_Slice) 108 119.66 T
(     \050Source : in Sequence;) 108 108.66 T
(      Low    : in Positive;) 108 97.66 T
FMENDPAGE
%%EndPage: "54" 54
%%Page: "55" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Unbounded_Sequence Speci\336cation) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 10 Q
(55) 523.37 60.96 T
0 9 Q
( of 58) 534.49 60.96 T
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
7 10 Q
(      High   : in Natural;) 126 680.66 T
(      By     : in Element_Array\051) 126 669.66 T
(      return   Sequence;) 126 658.66 T
(   procedure Replace_Slice) 126 636.66 T
(     \050Source : in out Sequence;) 126 625.66 T
(      Low    : in Positive;) 126 614.66 T
(      High   : in Natural;) 126 603.66 T
(      By     : in Element_Array\051;) 126 592.66 T
(   function Insert) 126 570.66 T
(     \050Source   : in Sequence;) 126 559.66 T
(      Before   : in Positive;) 126 548.66 T
(      New_Item : in Element_Array\051) 126 537.66 T
(      return     Sequence;) 126 526.66 T
(   procedure Insert) 126 504.66 T
(     \050Source   : in out Sequence;) 126 493.66 T
(      Before   : in Positive;) 126 482.66 T
(      New_Item : in Element_Array\051;) 126 471.66 T
(   function Overwrite) 126 449.66 T
(     \050Source   : in Sequence;) 126 438.66 T
(      Position : in Positive;) 126 427.66 T
(      New_Item : in Element_Array\051) 126 416.66 T
(      return     Sequence;) 126 405.66 T
(   procedure Overwrite) 126 383.66 T
(     \050Source   : in out Sequence;) 126 372.66 T
(      Position : in Positive;) 126 361.66 T
(      New_Item : in Element_Array\051;) 126 350.66 T
(   function Delete) 126 328.66 T
(     \050Source  : in Sequence;) 126 317.66 T
(      From    : in Positive;) 126 306.66 T
(      Through : in Natural\051) 126 295.66 T
(      return    Sequence;) 126 284.66 T
(    function Head) 126 262.66 T
(     \050Source : in Sequence;) 126 251.66 T
(      Count  : in Natural;) 126 240.66 T
(      Pad    : in Element\051) 126 229.66 T
(      return   Sequence;) 126 218.66 T
(    procedure Head) 126 196.66 T
(     \050Source : in out Sequence;) 126 185.66 T
(      Count  : in Natural;) 126 174.66 T
(      Pad    : in Element\051;) 126 163.66 T
(   function Tail) 126 141.66 T
(     \050Source : in Sequence;) 126 130.66 T
(      Count  : in Natural;) 126 119.66 T
(      Pad    : in Element\051) 126 108.66 T
(      return   Sequence;) 126 97.66 T
FMENDPAGE
%%EndPage: "55" 55
%%Page: "56" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 9 Q
(Package CORBA.Unbounded_Sequence Speci\336cation) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 10 Q
(56) 54 61.63 T
0 8 Q
( of) 65.12 61.63 T
0 10 Q
( 58) 74.9 61.63 T
0 8 Q
(\251 Copyright 1994 Objective Interface Systems, Inc.) 135 61.63 T
(\251 Copyright 1994 The MITRE Corporation) 135 51.63 T
7 10 Q
(   procedure Tail) 108 669.66 T
(     \050Source : in out Sequence;) 108 658.66 T
(      Count  : in Natural;) 108 647.66 T
(      Pad    : in Element\051;) 108 636.66 T
(   function \322*\323) 108 614.66 T
(     \050Left  : in Natural;) 108 603.66 T
(      Right : Element\051) 108 592.66 T
(      return  Sequence;) 108 581.66 T
(   function \322*\323) 108 559.66 T
(     \050Left  : in Natural;) 108 548.66 T
(      Right : in Element_Array\051) 108 537.66 T
(      return  Sequence;) 108 526.66 T
(   function \322*\323) 108 504.66 T
(     \050Left  : in Natural;) 108 493.66 T
(      Right : in Sequence\051) 108 482.66 T
(      return  Sequence;) 108 471.66 T
(private) 108 449.66 T
(---------------------------------------------------------------------) 108 438.66 T
(-- Implementation Requirements:) 108 427.66 T
(-- The following implementation is not part of the OMG IDL -> Ada9X) 108 416.66 T
(-- Mapping Specif) 108 405.66 T
(ication. The only requirements are to implement the) 210 405.66 T
(-- semantics implied by the specif) 108 394.66 T
(ication, where the semantics of) 312 394.66 T
(-- operations are the same as the semantics of the operations of) 108 383.66 T
(-- Ada.Strings.Unbounded as specif) 108 372.66 T
(ied in the Reference Manual, and the) 312 372.66 T
(-- semantics specif) 108 361.66 T
(ied in the comments above.) 222 361.66 T
(--) 108 350.66 T
(-- Example Implementation Notes:) 108 339.66 T
(-- An array implementation that is believed to be binary compatible) 108 328.66 T
(-- with the \322C\323 mapping.) 108 317.66 T
(---------------------------------------------------------------------) 108 306.66 T
(    -- see above: the following may be implementation def) 108 284.66 T
(ined.) 450 284.66 T
(    type Sequence is new Ada.Finalization.Controlled with record) 108 273.66 T
(        Maximum : CORBA.Unsigned_32 := 0;) 108 262.66 T
(        Length : CORBA.Unsigned_32 := 0;) 108 251.66 T
(        Buffer : Element_Array_Access;) 108 240.66 T
(    end record;) 108 229.66 T
(    Null_Sequence : constant Sequence) 108 207.66 T
(       := \050Ada.Finalization.Controlled with \0500, 0, null\051\051;) 108 196.66 T
(end CORBA.Unbounded_Sequence;) 108 174.66 T
FMENDPAGE
%%EndPage: "56" 56
%%Page: "57" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
(\251 Copyright 1994 The MITRE Corporation) 207 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 547.99 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\251 Copyright 1994 Objective Interface Systems, Inc.) 207 49.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of) 549.5 49.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(57) 547.99 38.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Symbols) 72 681.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(\325SIZE) 72 672.33 T
(15) 98.5 672.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(I) 72 653.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(interface package) 72 644.33 T
(17) 139.72 644.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(O) 72 625.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(object reference) 72 616.33 T
(17) 134.22 616.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(S) 72 597.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Sequence T) 72 588.33 T
(ypes) 113.61 588.33 T
(29) 134.6 588.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(string) 72 578.33 T
(15) 97 578.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 57
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 57
%%DocumentFonts: Helvetica-Bold
%%+ Times-Roman
%%+ ZapfDingbats
%%+ Times-Bold
%%+ Helvetica
%%+ Times-Italic
%%+ Courier-Bold
%%+ Courier
%%EOF
