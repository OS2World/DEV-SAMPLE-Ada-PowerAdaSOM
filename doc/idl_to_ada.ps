%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 32 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
7 0 /Courier-Oblique FMFONTDEFINE
8 1 /ZapfDingbats FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 495 558 495 2 L
1 H
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
72 234 558 234 2 L
2 H
N
0 24 Q
-0.17 (OMG Request For Comment) 72 677 S
-0.17 (Submission) 72 647 S
-0.17 (IDL => Ada  Language Mapping) 72 587 S
-0.17 (Speci\336cation) 72 557 S
1 18 Q
(The MITRE Corporation) 72 465 T
(Objective Interface Systems, Inc.) 72 441 T
(OC Systems, Inc.) 72 417 T
(Gensym Corporation) 72 393 T
(Defense Information Systems Agency) 72 369 T
1 14 Q
(OMG Document 95-5-16) 72 335.67 T
2 9 Q
-0.27 (A speci\336cation of the mapping of the OMG Interface De\336nition Language \050OMG IDL\252\051  to the Ada) 72 219 P
(programming language \050ANSI/ISO/IEC 8652:1995\051 within the Common Object Request Broker) 72 207 T
(Architecture \050CORBA\051) 72 195 T
(V) 72 171 T
(ersion 1.0) 77.51 171 T
(22 May 1995) 72 147 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(2) 54 61.63 T
2 8 Q
( of) 59.56 61.63 T
2 10 Q
( 99) 69.34 61.63 T
3 9 Q
(Copyright 1994 The MITRE Corporation) 207 681.33 T
(Copyright 1994 Objective Interface Systems Inc.) 207 663.33 T
(All Rights Reserved.) 207 645.33 T
(The companies listed above hereby grant a royalty free license to the Object Manage-) 207 627.33 T
(ment Group \050OMG\051 for worldwide distribution of this document or any derivative) 207 616.33 T
(works thereof, so long as the OMG reproduces the copyright notices and the below) 207 605.33 T
(paragraphs on all distributed copies.) 207 594.33 T
(The material in this document is provided for evaluation by the OMG. Submission of) 207 576.33 T
(this document does not represent a commitment to implement any portion of this speci-) 207 565.33 T
(\336cation in the products of the above said companies.) 207 554.33 T
-0.26 (While the information in the publication is believed to be accurate, the companies listed) 207 536.33 P
(above make no warranty of any kind with regard to this material including but not lim-) 207 525.33 T
(ited to the implied warranties of merchantability and \336tness for a particular purpose.) 207 514.33 T
(The companies listed above shall not be liable for errors contained herein or for inci-) 207 503.33 T
-0.02 (dental or consequential damages in connection with the furnishing, performance or use) 207 492.33 P
(of this material. The information contained in this document is subject to change with-) 207 481.33 T
(out notice.) 207 470.33 T
(This document contains information which is protected by copyright. All Rights) 207 452.33 T
-0.35 (Reserved. No part of this work covered by copyright here on may be reproduced or used) 207 441.33 P
-0.23 (in any form or by any means -- graphic, electronic, or mechanical, including photocopy-) 207 430.33 P
(ing, recording, taping, or information storage and retrieval systems -- without permis-) 207 419.33 T
(sion of the copyright owners. All copies of this document must include the copyright) 207 408.33 T
(and other information contained on this page.) 207 397.33 T
(The copyright owners grant the Object Management Group permission to reproduce) 207 379.33 T
(and use the information contained in this document. The copyright owners grant a lim-) 207 368.33 T
(ited waiver of the copyright on this document to members of the Object Management) 207 357.33 T
(Group so that they can each reproduce up to 50 copies of this document for their inter-) 207 346.33 T
(nal use as part of the OMG evaluation process) 207 335.33 T
-0.05 (RIGHTS RESER) 207 317.33 P
-0.05 (VED LEGEND. Use, duplication, or disclosure by government is sub-) 268.99 317.33 P
-0.27 (ject to restrictions as set forth in subdivision \050c\051\050l\051\050ii\051 of the Right in T) 207 306.33 P
-0.27 (echnical Data and) 456.08 306.33 P
(Computer Software Clause at DF) 207 295.33 T
(ARS 252.227.7013.) 326.32 295.33 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(3) 528.93 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(CHAPTER 1) 72 677.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Introduction) 207 677.99 T
(7) 290.22 677.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(1.1) 185.5 660.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Submitting Or) 207 660.66 T
(ganizations) 264.33 660.66 T
(7) 319.88 660.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.2) 185.5 644.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Supporting Or) 207 644.66 T
(ganizations) 264.32 644.66 T
(7) 319.87 644.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.3) 185.5 628.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Submission Contacts) 207 628.66 T
(7) 301.18 628.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.4) 185.5 612.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Authors) 207 612.66 T
(8) 249.22 612.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.5) 185.5 596.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Distinguished Reviewers) 207 596.66 T
(8) 317.27 596.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.6) 185.5 580.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(On-Line Documentation and Discussion) 207 580.66 T
(9) 378.37 580.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.7) 185.5 564.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Document Conventions) 207 564.66 T
(9) 311.72 564.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1.8) 185.5 548.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(References) 207 548.66 T
(9) 261.42 548.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(CHAPTER 2) 72 511.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Design Rationale) 207 511.99 T
(1) 317.82 511.99 T
(1) 324.31 511.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(2.1) 185.5 494.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Glossary of T) 207 494.66 T
(erms) 261.29 494.66 T
(1) 290.73 494.66 T
(1) 295.36 494.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.2) 185.5 478.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Design Philosophy) 207 478.66 T
(12) 292.84 478.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(2.2.1) 207 465.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Requirements and Criteria) 230.98 465.99 T
(12) 332.34 465.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.2.2) 207 455.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Additional Design Goals) 230.98 455.99 T
(13) 324.34 455.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.2.3) 207 445.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Key Design Decisions) 230.98 445.99 T
(13) 316.78 445.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.2.4) 207 435.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping Challenges) 230.98 435.99 T
(14) 311.9 435.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(2.3) 185.5 422.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping Summary) 207 422.66 T
(15) 294.5 422.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(2.3.1) 207 409.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interfaces and T) 230.98 409.99 T
(agged T) 287.9 409.99 T
(ypes) 316.81 409.99 T
(15) 341.7 409.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3.2) 207 399.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operations) 230.98 399.99 T
(16) 278.1 399.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3.3) 207 389.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Attributes) 230.98 389.99 T
(16) 272.77 389.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3.4) 207 379.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Inheritance) 230.98 379.99 T
(16) 278.55 379.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3.5) 207 369.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Data T) 230.98 369.99 T
(ypes) 254.54 369.99 T
(17) 279.44 369.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3.6) 207 359.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptions) 230.98 359.99 T
(17) 278.1 359.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.3.7) 207 349.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Names and Scoping) 230.98 349.99 T
(17) 311.01 349.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(2.4) 185.5 336.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Other Mapping Requirements) 207 336.66 T
(18) 336.43 336.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(2.4.1) 207 323.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementation Considerations) 230.98 323.99 T
(18) 349.24 323.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.2) 207 313.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Calling Convention) 230.98 313.99 T
(18) 306.11 313.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.3) 207 303.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Memory Management) 230.98 303.99 T
(18) 316.78 303.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.4.4) 207 293.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 230.98 293.99 T
(asking) 234.98 293.99 T
(18) 266.1 293.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(CHAPTER 3) 72 259.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Lexical Mapping) 207 259.99 T
(19) 317.04 259.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(3.1) 185.5 242.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping of Identi\336ers) 207 242.66 T
(19) 306.99 242.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2) 185.5 226.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping of Literals) 207 226.66 T
(19) 296.99 226.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(3.2.1) 207 213.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Integer Literals) 230.98 213.99 T
(19) 291.89 213.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2.2) 207 203.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Floating-Point Literals) 230.98 203.99 T
(20) 316.34 203.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2.3) 207 193.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Character Literals) 230.98 193.99 T
(20) 302.1 193.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.2.4) 207 183.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(String Literals) 230.98 183.99 T
(21) 287.88 183.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(3.3) 185.5 170.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping of Constant Expressions) 207 170.66 T
(21) 352.83 170.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(3.3.1) 207 157.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping of Operators) 230.98 157.99 T
(21) 316.34 157.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(CHAPTER 4) 72 123.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The Mapping of IDL to Ada) 207 123.99 T
(23) 380.03 123.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(4.1) 185.5 106.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Names) 207 106.66 T
(23) 244.77 106.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(4.1.1) 207 93.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Identi\336ers) 230.98 93.99 T
(23) 273.66 93.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(4) 54 61.63 T
2 8 Q
( of) 59.56 61.63 T
2 10 Q
( 99) 69.34 61.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(4.1.2) 189 681.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Scoped Names) 212.98 681.99 T
(23) 275.66 681.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(4.2) 167.5 668.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IDL Files) 189 668.66 T
(24) 237.61 668.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(4.2.1) 189 655.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Subsystems) 212.98 655.99 T
(24) 264.54 655.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.2.2) 189 645.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(File Inclusion) 212.98 645.99 T
(24) 267.66 645.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.2.3) 189 635.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Comments) 212.98 635.99 T
(25) 259.65 635.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.2.4) 189 625.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Other Pre-Processing) 212.98 625.99 T
(25) 297.89 625.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.2.5) 189 615.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Global Names) 212.98 615.99 T
(25) 271.66 615.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(4.3) 167.5 602.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CORBA Subsystem) 189 602.66 T
(25) 279.29 602.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.4) 167.5 586.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping Modules) 189 586.66 T
(26) 272.61 586.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5) 167.5 570.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Interfaces \050Client-Side Speci\336c\051) 189 570.66 T
(26) 380.63 570.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(4.5.1) 189 557.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Reference T) 212.98 557.99 T
(ypes) 281.9 557.99 T
(26) 306.79 557.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5.2) 189 547.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interfaces and Inheritance) 212.98 547.99 T
(26) 313.47 547.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5.3) 189 537.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping Forward Declarations) 212.98 537.99 T
(27) 329.9 537.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5.4) 189 527.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Reference Operations) 212.98 527.99 T
(27) 324.58 527.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5.5) 189 517.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Widening Object References) 212.98 517.99 T
(28) 322.79 517.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5.6) 189 507.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Narrowing Object References) 212.98 507.99 T
(28) 325.9 507.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5.7) 189 497.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Nil Object Reference) 212.98 497.99 T
(28) 294.78 497.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5.8) 189 487.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 212.98 487.99 T
(ype Object) 217.42 487.99 T
(29) 263.66 487.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.5.9) 189 477.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interface Mapping Examples) 212.98 477.99 T
(29) 322.35 477.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(4.6) 167.5 464.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for T) 189 464.66 T
(ypes) 247.18 464.66 T
(33) 275.51 464.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(4.6.1) 189 451.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ada T) 212.98 451.99 T
(ype Size Requirements) 233.88 451.99 T
(33) 324.58 451.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.2) 189 441.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Arithmetic T) 212.98 441.99 T
(ypes) 299.67 441.99 T
(33) 324.57 441.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.3) 189 431.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Boolean T) 212.98 431.99 T
(ype) 293.46 431.99 T
(34) 314.36 431.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.4) 189 421.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Enumeration T) 212.98 421.99 T
(ypes) 309.46 421.99 T
(34) 334.36 421.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.5) 189 411.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Structure T) 212.98 411.99 T
(ypes) 296.57 411.99 T
(35) 321.46 411.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.6) 189 401.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Union T) 212.98 401.99 T
(ypes) 285.01 401.99 T
(35) 309.9 401.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.7) 189 391.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Sequence T) 212.98 391.99 T
(ypes) 300.14 391.99 T
(36) 325.03 391.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.8) 189 381.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for String T) 212.98 381.99 T
(ypes) 285.01 381.99 T
(38) 309.9 381.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.9) 189 371.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Arrays) 212.98 371.99 T
(39) 288.55 371.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.10) 189 361.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Constants) 212.98 361.99 T
(39) 301.46 361.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.1) 189 351.99 T
(1) 206.2 351.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for T) 212.98 351.99 T
(ypedefs) 261.89 351.99 T
(40) 297.9 351.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.6.12) 189 341.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for T) 212.98 341.99 T
(ypeCodes) 261.89 341.99 T
(41) 305.9 341.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(4.7) 167.5 328.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Any T) 189 328.66 T
(ype) 266.9 328.66 T
(41) 291.34 328.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(4.7.1) 189 315.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Handling Known T) 212.98 315.99 T
(ypes) 277.9 315.99 T
(41) 302.79 315.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.7.2) 189 305.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Handling Unknown T) 212.98 305.99 T
(ypes) 286.78 305.99 T
(42) 311.68 305.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(4.8) 167.5 292.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Exception T) 189 292.66 T
(ypes) 290.23 292.66 T
(42) 318.56 292.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(4.8.1) 189 279.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exception Identi\336er) 212.98 279.99 T
(43) 289.01 279.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.8.2) 189 269.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exception Members) 212.98 269.99 T
(43) 291.66 269.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.8.3) 189 259.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example Use) 212.98 259.99 T
(46) 268.54 259.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(4.9) 167.5 246.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping for Operations and Attributes \050Client-Side Speci\336c\051) 189 246.66 T
(47) 444.53 246.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.10) 162.5 230.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 189 230.66 T
(gument Passing Considerations) 199.37 230.66 T
(48) 334.93 230.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.1) 162.87 214.66 T
(1) 175 214.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 189 214.66 T
(asking Considerations) 194.41 214.66 T
(48) 293.02 214.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(CHAPTER 5) 54 177.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The Mapping of) 189 177.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Pseudo-Objects to Ada) 189 161.99 T
(49) 332.09 161.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(5.1) 167.5 144.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(General Considerations) 189 144.66 T
(49) 293.15 144.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(5.1.1) 189 131.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Mapping Rules) 212.98 131.99 T
(49) 274.33 131.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.1.2) 189 121.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Semantics) 212.98 121.99 T
(49) 283.66 121.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.1.3) 189 111.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Relation to the C PIDL Mapping) 212.98 111.99 T
(50) 333.47 111.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(5.2) 167.5 98.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NamedV) 189 98.66 T
(alue) 223.99 98.66 T
(50) 250.65 98.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(5) 528.93 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(5.3) 185.5 680.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NVList) 207 680.66 T
(50) 247 680.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.4) 185.5 664.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Request) 207 664.66 T
(51) 249.22 664.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.5) 185.5 648.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Context) 207 648.66 T
(52) 248.67 648.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.6) 185.5 632.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Principal) 207 632.66 T
(53) 253.11 632.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.7) 185.5 616.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 207 616.66 T
(ypeCode) 212.41 616.66 T
(53) 257.96 616.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.8) 185.5 600.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(BOA) 207 600.66 T
(54) 238.11 600.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.9) 185.5 584.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ORB) 207 584.66 T
(55) 237.56 584.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.10) 180.5 568.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object) 207 568.66 T
(56) 243.66 568.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.1) 180.87 552.66 T
(1) 193 552.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Environment) 207 552.66 T
(57) 269.22 552.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(CHAPTER 6) 72 515.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Server) 207 515.99 T
(-Side Mapping) 243.26 515.99 T
(59) 340.87 515.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(6.1) 185.5 498.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementing Interfaces) 207 498.66 T
(59) 315.03 498.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.2) 185.5 482.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Implementing Operations and Attributes) 207 482.66 T
(59) 378.93 482.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6.3) 185.5 466.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Examples) 207 466.66 T
(60) 256.44 466.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(CHAPTER 7) 72 429.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Prede\336ned Ada Environment: Subsystem CORBA) 207 429.99 T
(61) 504.11 429.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(G.1) 183.28 412.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA) 207 412.66 T
(61) 287.27 412.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.2) 183.28 396.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.BOA) 207 396.66 T
(66) 310.88 396.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.3) 183.28 380.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Bounded_Strings;) 207 380.66 T
(67) 362 380.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.4) 183.28 364.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Context) 207 364.66 T
(68) 321.44 364.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.5) 183.28 348.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Environment) 207 348.66 T
(69) 341.99 348.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.6) 183.28 332.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Forward) 207 332.66 T
(69) 323.65 332.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.7) 183.28 316.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Iterate_Over_Any_Elements) 207 316.66 T
(69) 404.74 316.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.8) 183.28 300.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.NVList) 207 300.66 T
(70) 319.77 300.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.9) 183.28 284.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Object) 207 284.66 T
(70) 316.43 284.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.10) 178.28 268.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.ORB) 207 268.66 T
(71) 310.33 268.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.1) 178.65 252.66 T
(1) 193 252.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Principal) 207 252.66 T
(72) 325.88 252.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.12) 178.28 236.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Request) 207 236.66 T
(72) 321.99 236.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(G.13) 178.28 220.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.Sequences) 207 220.66 T
(73) 331.98 220.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(APPENDIX H) 72 183.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Preliminary CORBA 2.0 Changes) 207 183.99 T
(85) 411.55 183.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(H.1) 183.28 166.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Package CORBA.ORB) 207 166.66 T
(85) 310.33 166.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(6) 54 61.63 T
2 8 Q
( of) 59.56 61.63 T
2 10 Q
( 99) 69.34 61.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 14 Q
(APPENDIX I) 54 677.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CORBA 1.2 Prede\336ned Environment) 189 677.99 T
(87) 412.22 677.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(APPENDIX J) 54 639.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ada Reserved W) 189 639.99 T
(ords) 283.51 639.99 T
(95) 321.62 639.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Index) 189 601.99 T
(97) 234.88 601.99 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
(Notes) 136.67 584.66 T
(99) 170 584.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(7) 528.93 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (CHAPTER 1) 207 677 S
4 24 Q
(Intr) 297 677 T
(oduction) 332.11 677 T
72 413.59 558 419 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 416.8 467.34 416.8 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 416.8 143.58 416.8 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(1.1) 125.93 423.33 T
(Submitting Organizations) 153 423.33 T
2 9 Q
(1) 72 396.26 T
3 11 Q
(The following or) 153 396.26 T
(ganizations are pleased to jointly submit this speci\336cation for adoption via) 227.35 396.26 T
(the OMG Request For Comment process:) 153 384.26 T
5 F
(\245) 153 366.26 T
3 F
(Objective Interface Systems, Inc.) 171 366.26 T
5 F
(\245) 153 351.26 T
3 F
(OC Systems, Inc.) 171 351.26 T
72 305.18 558 310.59 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 308.39 467.34 308.39 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 308.39 143.58 308.39 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(1.2) 125.93 314.93 T
(Supporting Organizations) 153 314.93 T
2 9 Q
(1) 72 287.85 T
3 11 Q
(The following or) 153 287.85 T
(ganizations are pleased to support the submission of this speci\336cation for) 227.35 287.85 T
(adoption via the OMG Request For Comment process:) 153 275.85 T
5 F
(\245) 153 257.85 T
3 F
(The MITRE Corporation) 171 257.85 T
5 F
(\245) 153 242.85 T
3 F
(Gensym Corporation) 171 242.85 T
5 F
(\245) 153 227.85 T
3 F
(Defense Information Systems Agency) 171 227.85 T
72 181.78 558 187.18 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 184.98 467.34 184.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 184.98 143.58 184.98 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(1.3) 125.93 191.52 T
(Submission Contacts) 153 191.52 T
2 9 Q
(1) 72 164.44 T
3 11 Q
(Questions regarding the submission of this document should be directed to:) 153 164.44 T
5 F
(\245) 153 146.44 T
3 F
(Jef) 171 146.44 T
(f Chilton) 183.63 146.44 T
(Objective Interface Systems, Inc.) 171 134.44 T
(1895 Preston White Drive, Suite 250) 171 122.44 T
(Reston, V) 171 110.44 T
(ir) 214.34 110.44 T
(ginia 22091-5448 USA) 220.86 110.44 T
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Authors) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(8) 54 61.63 T
2 8 Q
( of) 59.56 61.63 T
2 10 Q
( 99) 69.34 61.63 T
3 11 Q
(E-mail: jef) 153 679.99 T
(f.chilton@ois.com) 200.16 679.99 T
(T) 153 667.99 T
(elephone: +1 703 264 1900) 158.95 667.99 T
(Fax: +1 703 264 1721) 153 655.99 T
5 F
(\245) 135 640.99 T
3 F
(G. V) 153 640.99 T
(incent Castellano) 173.72 640.99 T
(OC Systems, Inc.) 153 628.99 T
(9990 Lee Highway) 153 616.99 T
(, Suite 270) 236.6 616.99 T
(Fairfax, V) 153 604.99 T
(ir) 197.55 604.99 T
(ginia 22030) 204.07 604.99 T
(Email: gvc@ocsystems.com) 153 580.99 T
(T) 153 568.99 T
(elephone: +1 703 359 6012) 158.95 568.99 T
(Fax: +1 703 359 8161) 153 556.99 T
54 510.92 540 516.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 514.13 449.34 514.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 514.13 125.58 514.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(1.4) 107.93 520.66 T
(Authors) 135 520.66 T
2 9 Q
(1) 54 493.59 T
3 11 Q
(The following individuals are responsible for developing the contents of this document:) 135 493.59 T
5 F
(\245) 135 475.59 T
3 F
(V) 153 475.59 T
(ictor Giddings - Editor) 160.28 475.59 T
(The MITRE Corporation) 153 463.59 T
(7525 Colshire Drive) 153 451.59 T
(McLean, V) 153 439.59 T
(ir) 202.43 439.59 T
(ginia 22102 USA) 208.96 439.59 T
(E-mail: vtg@mitre.or) 153 427.59 T
(g) 247.88 427.59 T
(T) 153 415.59 T
(elephone: +1 703 883 5722) 158.95 415.59 T
(Fax: +1 703 883 3343) 153 403.59 T
5 F
(\245) 135 388.59 T
3 F
(Bill Beckwith) 153 388.59 T
(Objective Interface System, Inc.) 153 376.59 T
5 F
(\245) 135 361.59 T
3 F
(Diane Mularz) 153 361.59 T
(The MITRE Corporation) 153 349.59 T
5 F
(\245) 135 334.59 T
3 F
(Jef) 153 334.59 T
(f Chilton) 165.63 334.59 T
(Objective Interface System, Inc.) 153 322.59 T
5 F
(\245) 135 307.59 T
3 F
(Steven North) 153 307.59 T
(OC Systems Inc.) 153 295.59 T
5 F
(\245) 135 280.59 T
3 F
(Jon Anthony) 153 280.59 T
(Gensym Corporation) 153 268.59 T
54 222.51 540 227.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 225.72 449.34 225.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 225.72 125.58 225.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(1.5) 107.93 232.25 T
(Distinguished Reviewers) 135 232.25 T
2 9 Q
(1) 54 205.18 T
3 11 Q
(The following individuals have participated in the review for this speci\336cation:) 135 205.18 T
5 F
(\245) 135 187.18 T
3 F
(Huet Landry) 153 187.18 T
(Defense Information Systems Agency) 153 175.18 T
5 F
(\245) 135 160.18 T
3 F
(Anthony Gar) 153 160.18 T
(garo) 210.54 160.18 T
(Computer Sciences Corporation) 153 148.18 T
5 F
(\245) 135 133.18 T
3 F
(T) 153 133.18 T
(ucker T) 159.34 133.18 T
(aft) 192.47 133.18 T
(Intermetrics) 153 121.18 T
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(On-Line Documentation and Discussion) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(9) 528.93 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
72 668.92 558 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 672.13 467.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 672.13 143.58 672.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(1.6) 125.93 678.66 T
(On-Line Documentation and Discussion) 153 678.66 T
2 9 Q
(1) 72 651.59 T
3 11 Q
-0.4 (Further information and discussion of the contents of this document can be accessed through) 153 651.59 P
(the following on-line resources:) 153 639.59 T
5 F
(\245) 153 621.59 T
3 F
(http://conf4.darpa.mil/corba-ada) 171 621.59 T
5 F
(\245) 153 606.59 T
3 F
(http://jcdbs.2000.disa.mil) 171 606.59 T
5 F
(\245) 153 591.59 T
3 F
(Corba_Ada@ois.com) 171 591.59 T
5 F
(\245) 153 576.59 T
3 F
(ABWG-OMG@sw-eng.falls-church.va.us) 171 576.59 T
72 530.51 558 535.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 533.72 467.34 533.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 533.72 143.58 533.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(1.7) 125.93 540.25 T
(Document Conventions) 153 540.25 T
2 9 Q
(1) 72 513.18 T
3 11 Q
-0.2 (The requirements of this speci\336cation are indicated by the verb \322shall\323. All other statements) 153 513.18 P
(are either explanatory) 153 501.18 T
(, amplifying, or relaxing. All implementation notes are so labelled.) 248.19 501.18 T
2 9 Q
(2) 72 483.18 T
3 11 Q
-0.17 (The \336le names for generated packages are not speci\336ed by this speci\336cation. The \336le names) 153 483.18 P
(shown in examples are for the purposes of illustration only) 153 471.18 T
(. They generally follow the con-) 411.06 471.18 T
(ventions of the) 153 459.18 T
6 F
(gnat) 221.13 459.18 T
3 F
( compiler) 247.53 459.18 T
(.) 288.78 459.18 T
2 9 Q
(3) 72 441.18 T
3 11 Q
(Ada names within the text and all example Ada code appears in) 153 441.18 T
6 F
(fixed point font) 435.89 441.18 T
3 F
(.) 541.49 441.18 T
72 395.1 558 400.51 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 398.31 467.34 398.31 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 398.31 143.58 398.31 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(1.8) 125.93 404.85 T
(References) 153 404.85 T
5 11 Q
(\245) 153 377.77 T
3 F
(ANSI/ISO/IEC 8652:1995,) 171 377.77 T
4 F
(Information T) 293.53 377.77 T
(echnology -- Pr) 353.94 377.77 T
(ogramming Languages -- Ada) 422.57 377.77 T
3 F
(.) 554.87 377.77 T
5 F
(\245) 153 362.77 T
3 F
(OMG 93-12-42,) 171 362.77 T
4 F
(The Common Object Request Br) 245.24 362.77 T
(oker: Ar) 387.2 362.77 T
(chitectur) 423.76 362.77 T
(e and Speci\336cation) 462.46 362.77 T
3 F
(,) 546.17 362.77 T
(Revision 1.2, 29 December 1993) 171 350.77 T
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(References) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(10) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(1) 523.92 60.96 T
(1) 528.93 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (CHAPTER 2) 207 677 S
4 24 Q
(Design) 297 677 T
(Rationale) 297 647 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(1) 72 424.67 T
3 11 Q
-0.27 (The Ada language mapping provides the ability to access and implement CORBA objects in) 153 424.67 P
(programs written in the Ada programming language \050ANSI/ISO/IEC 8652:1995\051. The map-) 153 412.67 T
-0.29 (ping is based on the de\336nition of the ORB in "Common Object Request Broker Architecture) 153 400.67 P
(and Speci\336cation, Revision 1.2". The Ada language mapping uses the Ada language\325) 153 388.67 T
(s sup-) 526.55 388.67 T
-0.43 (port for object oriented programming\321packages, tagged types, and late binding\321to present) 153 376.67 P
(the object model described by the CORBA Architecture and Speci\336cation.) 153 364.67 T
0 8 Q
(2) 72 346.67 T
3 11 Q
(The mapping speci\336es how CORBA objects \050objects de\336ned by IDL\051 are mapped to Ada) 153 346.67 T
(packages and types. Each CORBA object is represented by an Ada tagged type reference.) 153 334.67 T
(The operations of mapped CORBA objects are invoked by calling primitive subprograms) 153 322.67 T
(de\336ned in the package associated with that object\325) 153 310.67 T
(s CORBA interface.) 373.88 310.67 T
72 264.59 558 270 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 267.8 467.34 267.8 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 267.8 143.58 267.8 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(2.1) 125.93 274.33 T
(Glossary of T) 153 274.33 T
(erms) 235.12 274.33 T
0 8 Q
(1) 72 247.26 T
3 11 Q
(This section de\336nes terms used in the document that are not de\336ned in the glossary of the) 153 247.26 T
(CORBA speci\336cation. These de\336nition are mostly quoted from the Ada 95 Reference Man-) 153 235.26 T
(ual \050RM95\051.) 153 223.26 T
3 10 Q
(Package) 164.68 205.93 T
(Packages are program units that allow the speci\336cation of groups of logically related) 207 205.93 T
(entities. T) 207 193.93 T
(ypically) 246.3 193.93 T
(, a package contains the declaration of a type along with the declara-) 277.87 193.93 T
(tions of primitive subprograms of the type, which can be called from outside the pack-) 207 181.93 T
(age, while the inner working remain hidden from outside users.) 207 169.93 T
(T) 148.99 151.93 T
(agged type) 154.4 151.93 T
(The values of a tagged type have a run-time type tag, which indicates the speci\336c type) 207 151.93 T
-0.16 (from which the value originated. An operand of a class-wide tagged type can be used in) 207 139.93 P
(a dispatching call; the tag indicates which subprogram body to invoke.) 207 127.93 T
(Primitive operations) 116.61 109.93 T
(The primitive operations of a type are the operations \050such as subprograms\051 declared) 207 109.93 T
-0.26 (together with the type declaration. They are inherited by other types in the same class of) 207 97.93 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Design Philosophy) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(12) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
3 F
(types. For a tagged type, the primitive subprograms are dispatching subprograms, pro-) 189 680.66 T
-0.26 (viding run-time polymorphism. A dispatching subprogram may be called with statically) 189 668.66 P
(tagged operands, in which case the subprogram body invoked is determined at compile) 189 656.66 T
-0.17 (time. Alternatively) 189 644.66 P
-0.17 (, a dispatching subprogram may be called using a dispatching call, in) 263.73 644.66 P
(which case the subprogram body invoked is determined at run time.) 189 632.66 T
(Class) 158.33 614.66 T
-0.15 (A class is a set of types that is closed under derivation, which means that if a given type) 189 614.66 P
-0.2 (is in the class, then all types derived from that type are also in the class. The set of types) 189 602.66 P
(of a class share common properties, such as their primitive operations.) 189 590.66 T
(Class-wide types) 111.95 572.66 T
-0.24 (Class-wide types are de\336ned for \050and belong to\051 each derivation class rooted at a tagged) 189 572.66 P
(type. Given a subtype S of a tagged type T) 189 560.66 T
(, S\325Class is the subtype_mark for a corre-) 358.79 560.66 T
(sponding subtype of the tagged class-wide type T\325Class. Such types are called \322class-) 189 548.66 T
-0.37 (wide\323 because when a formal parameter is de\336ned to be of a class-wide type T\325Class, an) 189 536.66 P
(actual parameter of any type in the derivation class rooted at T is acceptable.) 189 524.66 T
(Subsystem) 136.66 506.66 T
(A library unit is a "top-level" separately compiled program unit, and is always a pack-) 189 506.66 T
-0.3 (age, subprogram, or generic unit. Library units may have other \050logically nested\051 library) 189 494.66 P
(units as children, and may have other program units physically nested within them. A) 189 482.66 T
(root library unit, together with its children and grandchildren and so on, form a sub-) 189 470.66 T
(system.) 189 458.66 T
(Controlled type) 117.5 440.66 T
-0.19 (A controlled type supports user) 189 440.66 P
-0.19 (-de\336ned assignment and \336nalization. Objects are always) 313.58 440.66 P
(\336nalized before being destroyed.) 189 428.66 T
(W) 70.68 410.66 T
(ithing, withs, with clause) 79.72 410.66 T
-0.18 (The Ada mechanism to gain visibility to a compilation unit is to include a \322with clause\323) 189 410.66 P
(naming that compilation unit. Such a compilation unit is said to be \322withed\323 by the cur-) 189 398.66 T
-0.38 (rent unit. Conversely) 189 386.66 P
-0.38 (, the current unit \322withs\323 the named unit. This \322withing\323 allows use) 271.76 386.66 P
-0.13 (of declarations from the \322withed\323 unit through a \322selected component\323 notation consist-) 189 374.66 P
(ing of the withed unit name and \322.\323 and the declaration name.) 189 362.66 T
54 315.92 540 321.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 319.13 449.34 319.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 319.13 125.58 319.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(2.2) 107.93 325.66 T
(Design Philosophy) 135 325.66 T
0 8 Q
(1) 54 298.59 T
3 11 Q
(The following subsections describe requirements mandated by the OMG for other map-) 135 298.59 T
(pings, additional design goals for this mapping, and the key design decisions.) 135 286.59 T
2 12 Q
(2.2.1) 99.58 259.92 T
(Requirements and Criteria) 135 259.92 T
0 8 Q
(1) 54 242.59 T
3 11 Q
(Although not developed in response to a Request For Proposal by the OMG, the following) 135 242.59 T
(requirements and criteria are addressed by the mapping. They are drawn from other RFPs) 135 230.59 T
(issued by the OMG.) 135 218.59 T
2 12 Q
(2.2.1.1) 90 193.92 T
(Requirements:) 135 193.92 T
0 8 Q
(1) 54 176.59 T
(\245) 135 176.59 T
3 11 Q
(Provide a complete language mapping: The mapping is believed to completely and) 153 176.59 T
-0.44 (correctly map any legal set of de\336nitions in the IDL language to an equivalent set of Ada) 153 164.59 P
(speci\336cations.) 153 152.59 T
0 8 Q
(2) 54 137.59 T
(\245) 135 137.59 T
3 11 Q
-0.32 (Use a consistent style: Every ef) 153 137.59 P
-0.32 (fort has been made to provide a mapping that generates a) 289.61 137.59 P
(set of Ada packages that would be judged to be in "best Ada style".) 153 125.59 T
0 8 Q
(3) 54 110.59 T
(\245) 135 110.59 T
3 11 Q
(Provide a design rationale: Rationale is provided for the key design decisions.) 153 110.59 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Page: "13" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Design Philosophy) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(13) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(4) 72 679.99 T
(\245) 153 679.99 T
3 11 Q
(Identify and justify extensions to CORBA: The only proposed extension to CORBA is) 171 679.99 T
-0.31 (the concept of a subsystem name that may be applied to multiple IDL \336les. A subsystem) 171 667.99 P
(can be thought of as an enclosing virtual module; it reduces the possibility of name) 171 655.99 T
-0.41 (clashes from multiple subsystems or libraries. While the capability to generate Ada code) 171 643.99 P
(containing the subsytem name is required, the mechanism for specifying a subsystem) 171 631.99 T
(name has been left to the implementation.) 171 619.99 T
0 8 Q
(5) 72 604.99 T
(\245) 153 604.99 T
3 11 Q
(Do not provide implementation descriptions: The mapping is believed to be free of) 171 604.99 T
(implementation descriptions except as explanatory notes.) 171 592.99 T
2 12 Q
(2.2.1.2) 108 568.33 T
(Criteria:) 153 568.33 T
0 8 Q
(1) 72 550.99 T
(\245) 153 550.99 T
3 11 Q
-0.41 (Reliability: The mapping is natural for Ada and would not impact the reliability either of) 171 550.99 P
(CORBA implementations or of clients or servers built on the ORB.) 171 538.99 T
0 8 Q
(2) 72 523.99 T
(\245) 153 523.99 T
3 11 Q
(Performance: Care has been taken to allow conforming mapping products to use data) 171 523.99 T
-0.18 (representation common to underlying C or C++ implementations. Exceptions to this are) 171 511.99 P
(the mapping of object references and the mapping of sequences.) 171 499.99 T
0 8 Q
(3) 72 484.99 T
(\245) 153 484.99 T
3 11 Q
(Portability: This mapping uses standard Ada constructs. The standardization of Ada by) 171 484.99 T
(the ISO should allow more portable implementations than other languages. Care has) 171 472.99 T
(also been taken to eliminate mapping ambiguities that would af) 171 460.99 T
(fect portability of) 449.75 460.99 T
(conforming clients and servers.) 171 448.99 T
2 12 Q
(2.2.2) 117.58 422.33 T
(Additional Design Goals) 153 422.33 T
0 8 Q
(1) 72 404.99 T
(\245) 153 404.99 T
3 11 Q
(Conform with the Current CORBA 1.2 Speci\336cation: The Ada mapping requires no) 171 404.99 T
-0.36 (changes to the CORBA 1.2 speci\336cation while using the Ada language\325) 171 392.99 P
-0.36 (s object-oriented) 482.36 392.99 P
(features in a manner consistent with the CORBA architecture. A fundamental principle) 171 380.99 T
(of the CORBA speci\336cation is that CORBA objects are de\336ned and implemented) 171 368.99 T
(independently of a speci\336c programming language. It must be possible to use the Ada) 171 356.99 T
(language mapping to invoke operations on objects that are implemented in other) 171 344.99 T
(languages.) 171 332.99 T
0 8 Q
(2) 72 317.99 T
(\245) 153 317.99 T
3 11 Q
(Provide an Easy to Use Mapping: The Ada language mapping is designed to facilitate) 171 317.99 T
(the writing of reliable, well-engineered programs that use the ORB. Memory) 171 305.99 T
-0.28 (management, exception handling, and compile-time type checking are areas speci\336cally) 171 293.99 P
(addressed by the mapping.) 171 281.99 T
0 8 Q
(3) 72 266.99 T
(\245) 153 266.99 T
3 11 Q
(Encapsulate the Implementation of the Language Mapping: Ada packages are used to) 171 266.99 T
(encapsulate the implementation of the language mapping. These hide the details of the) 171 254.99 T
(implementation of, for example, the duplication of Object Reference values, and the) 171 242.99 T
(implementation of memory management.) 171 230.99 T
0 8 Q
(4) 72 215.99 T
(\245) 153 215.99 T
3 11 Q
(Support as many Ada Compilers and ORB Implementations as Possible: The mapping) 171 215.99 T
(uses only Ada language features speci\336ed by the ANSI/ISO standard for the Ada) 171 203.99 T
(programming language. It is designed to work with ORB implementations from) 171 191.99 T
(multiple suppliers.) 171 179.99 T
2 12 Q
(2.2.3) 117.58 153.33 T
(Key Design Decisions) 153 153.33 T
0 8 Q
(1) 72 135.99 T
3 11 Q
(Care has been taken to maintain the transparency of the CORBA mechanisms of communi-) 153 135.99 T
(cation between client and server objects. W) 153 123.99 T
(e believe that, by changing the implementations) 343.65 123.99 T
-0.29 (of the underlying root types that are the parents of interface types, the same client and server) 153 111.99 P
-0.09 (code can run distributed over a CORBA infrastructure, as a system of completely local, stat-) 153 99.99 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 13
%%Page: "14" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Design Philosophy) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(14) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
3 11 Q
(ically linked Ada client and server objects, or in some combination in which some server) 135 679.99 T
(objects are statically linked and some are remote. This makes the mapped IDL interfaces) 135 667.99 T
-0.46 (useful in non-CORBA contexts. T) 135 655.99 P
-0.46 (o further support this decision, mapped interfaces are "\336rst) 283.03 655.99 P
(class" objects in the Ada language, i.e., objects of that type may be declared and the object) 135 643.99 T
(types may be extended to new interfaces.) 135 631.99 T
0 8 Q
(2) 54 613.99 T
3 11 Q
(IDL inheritance is directly re\337ected in the mapped Ada type hierarchy) 135 613.99 T
(. This is true for both) 443.43 613.99 T
(the client and server side. Other mappings, including the C++ mapping, did not require this) 135 601.99 T
-0.09 (feature. Not re\337ecting the inheritance would violate the principle above, since dif) 135 589.99 P
-0.09 (ferent soft-) 491.53 589.99 P
(ware structures would be required for local versus remote implementations.) 135 577.99 T
0 8 Q
(3) 54 559.99 T
3 11 Q
(Parallel, separate inheritance hierarchies are de\336ned for client-side object references and) 135 559.99 T
(server) 135 547.99 T
(-side object implementations. This allows inheritance of object implementations on) 161.65 547.99 T
(the server side.) 135 535.99 T
2 12 Q
(2.2.4) 99.58 509.33 T
(Mapping Challenges) 135 509.33 T
0 8 Q
(1) 54 491.99 T
3 11 Q
(Several challenges face the designer of an IDL to Ada mapping. These challenges and the) 135 491.99 T
(design decisions that address them include:) 135 479.99 T
0 8 Q
(2) 54 461.99 T
(\245) 135 461.99 T
3 11 Q
-0.16 (Mapping the name space associated with IDL \336les to Ada compilation units: In contrast) 153 461.99 P
(to IDL, which follows C, Ada does not recognize \336les as units of compilations. Ada) 153 449.99 T
(instead relies on \322library units\323, constructs de\336ned by Ada syntax within \336les. Further) 153 437.99 T
(,) 531.41 437.99 T
(all compilation units have names. For this mapping, a separate package is formed to) 153 425.99 T
(hold any "bare" de\336nitions not enclosed by a module or an interface. The name of this) 153 413.99 T
(package is formed from the \336le name, a process which may decrease portability since) 153 401.99 T
(\336le names may have to change between operating systems. For this reason, the "\336le") 153 389.99 T
-0.14 (packages are not the root parent package for packages mapped from enclosed interfaces) 153 377.99 P
(or modules.) 153 365.99 T
0 8 Q
(3) 54 350.99 T
(\245) 135 350.99 T
3 11 Q
(Dealing with the scopeless nature of ANSI C++ preprocessor: The scopeless nature of) 153 350.99 T
(the C++ pre-processor) 153 338.99 T
(, with lexical inclusion of all de\336nitions necessary for) 251.11 338.99 T
-0.14 (compilation, is very dif) 153 326.99 P
-0.14 (ferent from the Ada concepts of library units and \322withing\323. The) 255.03 326.99 P
(mapping speci\336es how lexical inclusion of de\336nitions in other \336les will be mapped to) 153 314.99 T
(withs of the library units mapped from the included \336les.) 153 302.99 T
0 8 Q
(4) 54 287.99 T
(\245) 135 287.99 T
3 11 Q
(Mapping mutually dependent IDL interfaces to Ada packages and tagged types:) 153 287.99 T
(Mutually dependent IDL interfaces are caused by the use of the forward declaration) 153 275.99 T
-0.45 (construct of IDL. Since the natural mapping for dependencies between interfaces is have) 153 263.99 P
(one interface "with" the other) 153 251.99 T
(, and because circular withing is not allowed in Ada, the) 282.5 251.99 T
-0.4 (mapping has to specify special rules for mutually dependent interfaces. Several dif) 153 239.99 P
-0.4 (ferent) 511.99 239.99 P
(alternatives were examined. The chosen alternative de\336nes an explicit mapping for the) 153 227.99 T
(forward declaration and speci\336es that all references to the forward declared interface) 153 215.99 T
(before the full declaration will refer to the mapped forward declaration.) 153 203.99 T
0 8 Q
(5) 54 188.99 T
(\245) 135 188.99 T
3 11 Q
(Facilitating automatic memory reclamation in the generated Ada interfaces: The) 153 188.99 T
(mapping uses Ada's information hiding features to allow suf) 153 176.99 T
(\336cient implementation) 418.14 176.99 T
(\337exibility in certain key types that automatic memory reclamation techniques such as) 153 164.99 T
(reference counting may be implemented. Automatic memory reclamation increases the) 153 152.99 T
(ease of use of the mapped interfaces, and increases the reliability of clients and servers) 153 140.99 T
(built in the Ada language.) 153 128.99 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 14
%%Page: "15" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping Summary) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(15) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(6) 72 679.99 T
(\245) 153 679.99 T
3 11 Q
(T) 171 679.99 T
(ype) 176.95 679.99 T
6 F
(Any) 195.59 679.99 T
3 F
( in a strongly typed language. Implementations are required to provide an) 215.38 679.99 T
-0.05 (implementation of type Any) 171 667.99 P
-0.05 (, a means of extracting the T) 294.48 667.99 P
-0.05 (ypeCode from it, and type-safe) 418.96 667.99 P
(conversion subprograms that convert to and from any pre-de\336ned or IDL-de\336ned type.) 171 655.99 T
0 8 Q
(7) 72 640.99 T
(\245) 153 640.99 T
3 11 Q
(T) 171 640.99 T
(asking safety: Allowing implementations to provide tasking-safe access to CORBA) 176.95 640.99 T
(services, given non-reentrancy of current CORBA speci\336cation.) 171 628.99 T
72 582.92 558 588.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 586.13 467.34 586.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 586.13 143.58 586.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(2.3) 125.93 592.66 T
(Mapping Summary) 153 592.66 T
0 8 Q
(1) 72 565.59 T
3 11 Q
(The following table summarizes the mapping of IDL constructs to Ada constructs. The fol-) 153 565.59 T
(lowing sections elaborate on each of these constructs.) 153 553.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 12 Q
(2.3.1) 117.58 317.92 T
(Interfaces and T) 153 317.92 T
(agged T) 244.14 317.92 T
(ypes) 289.26 317.92 T
(2.3.1.1) 108 291.92 T
(Client Side) 153 291.92 T
0 8 Q
(1) 72 273.59 T
3 11 Q
-0.01 (An IDL interface is mapped to an Ada package and containing a tagged) 153 273.59 P
4 F
-0.01 (r) 470.88 273.59 P
-0.01 (efer) 474.75 273.59 P
-0.01 (ence type) 491.45 273.59 P
3 F
-0.01 (. The) 532.66 273.59 P
(package name will be mapped from the interface name. If the interface has an enclosing) 153 261.59 T
(scope \050including a subsystem \322virtual scope\323\051, the mapped package will be a child package) 153 249.59 T
-0.03 (of the package mapped from the enclosing scope. The mapped package will contain the def-) 153 237.59 P
(inition of a tagged reference type for the object class, derived from the reference type) 153 225.59 T
-0.31 (mapped from the parent IDL interface, if the IDL interface is a subclass of another interface,) 153 213.59 P
-0.24 (or from an implementation-de\336ned common root reference type,) 153 201.59 P
6 F
-0.58 (CORBA.Object.Ref) 437.92 201.59 P
3 F
-0.24 (, if) 543.52 201.59 P
(the interface is not a subclass of another interface. This allows implementations of the map-) 153 189.59 T
(ping to of) 153 177.59 T
(fer automatic memory management and improves the separation of an interface) 195.58 177.59 T
(and its implementation.) 153 165.59 T
0 8 Q
(2) 72 147.59 T
3 11 Q
(The mapped package also contains de\336nitions of constants, types, exceptions and subpro-) 153 147.59 T
(grams mapped from the de\336nitions in the interface or inherited by it.) 153 135.59 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
149.47 495.42 287.5 508.42 R
7 X
V
0 0 0 1 0 0 0 K
6 9 Q
0 X
(IDL construct) 151.97 499.92 T
0 0 0 1 0 0 0 K
288.5 495.42 539.5 508.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Ada construct) 291 499.92 T
0 0 0 1 0 0 0 K
149.47 479.42 287.5 492.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Source f) 151.97 484.92 T
(ile) 195.17 484.92 T
0 0 0 1 0 0 0 K
288.5 479.42 539.5 492.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Library package) 291 484.92 T
0 0 0 1 0 0 0 K
149.47 464.42 287.5 478.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Module) 151.97 469.92 T
0 0 0 1 0 0 0 K
288.5 464.42 539.5 478.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Package \050Child Package if nested\051) 291 469.92 T
0 0 0 1 0 0 0 K
149.47 438.42 287.5 463.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Interface) 151.97 454.92 T
0 0 0 1 0 0 0 K
288.5 438.42 539.5 463.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Package with Tagged Type \050Child Package if) 291 454.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(nested\051) 291 443.92 T
0 0 0 1 0 0 0 K
149.47 423.42 287.5 437.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Operation) 151.97 428.92 T
0 0 0 1 0 0 0 K
288.5 423.42 539.5 437.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Primitive Subprogram) 291 428.92 T
0 0 0 1 0 0 0 K
149.47 408.42 287.5 422.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Attribute) 151.97 413.92 T
0 0 0 1 0 0 0 K
288.5 408.42 539.5 422.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
-0.8 (\322Set_) 291 413.92 P
7 F
-0.8 (attribute) 318 413.92 P
6 F
-0.8 (\323 and \322) 366.6 413.92 P
7 F
-0.8 (attribute) 402.8 413.92 P
6 F
-0.8 (_of\323 subprograms) 451.4 413.92 P
0 0 0 1 0 0 0 K
149.47 371.42 287.5 407.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Inheritance:) 151.97 398.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(   Single) 151.97 387.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Multiple) 168.17 376.92 T
0 0 0 1 0 0 0 K
288.5 371.42 539.5 407.42 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
(    Tagged Type Inheritance) 291 387.92 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(    Mix-in Inheritance) 291 376.92 T
0 0 0 1 0 0 0 K
149.47 356.42 287.5 370.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Data types) 151.97 361.92 T
0 0 0 1 0 0 0 K
288.5 356.42 539.5 370.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Ada types) 291 361.92 T
0 0 0 1 0 0 0 K
149.47 341.42 287.5 355.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Exception) 151.97 346.92 T
0 0 0 1 0 0 0 K
288.5 341.42 539.5 355.42 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Exception and record type) 291 346.92 T
0 0 0 1 0 0 0 K
148.97 508.42 148.97 341.42 2 L
V
1 H
0 Z
N
288 509.42 288 340.42 2 L
V
N
540 508.42 540 341.42 2 L
V
N
148.47 508.92 540.5 508.92 2 L
V
N
149.47 494.92 539.5 494.92 2 L
V
N
149.47 492.92 539.5 492.92 2 L
V
N
148.47 478.92 540.5 478.92 2 L
V
N
148.47 463.92 540.5 463.92 2 L
V
N
148.47 437.92 540.5 437.92 2 L
V
N
148.47 422.92 540.5 422.92 2 L
V
N
148.47 407.92 540.5 407.92 2 L
V
N
148.47 370.92 540.5 370.92 2 L
V
N
148.47 355.92 540.5 355.92 2 L
V
N
148.47 340.92 540.5 340.92 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 15
%%Page: "16" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping Summary) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(16) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
2 12 Q
(2.3.1.2) 90 679.33 T
(Forward Declarations) 135 679.33 T
0 8 Q
(1) 54 660.99 T
3 11 Q
(Forward declarations result in the instantiation of a generic package that provides a refer-) 135 660.99 T
(ence type that can be used until the interface is fully de\336ned. The generic instantiation also) 135 648.99 T
(de\336nes a nested generic package that is instantiated within the full interface de\336nition and) 135 636.99 T
-0.05 (provides conversion from the forward reference type to the full interface reference type and) 135 624.99 P
-0.37 (vice versa. This allows clients that hold references to the interface to explicitly convert those) 135 612.99 P
(references to the forward reference type when required.) 135 600.99 T
2 12 Q
(2.3.1.3) 90 576.33 T
(Server Side) 135 576.33 T
0 8 Q
(1) 54 557.99 T
3 11 Q
(The server) 135 557.99 T
(-side mapping of an IDL interface creates a ".Impl" package that is a child of the) 181.51 557.99 T
(client-side interface package. The package contains a declaration for the) 135 545.99 T
6 F
(Object) 455.42 545.99 T
3 F
( type,) 495.02 545.99 T
(derived from the parent interface's object type or from a common root,) 135 533.99 T
6 F
(CORBA.Object.Object) 135 521.99 T
3 F
(, with a \050possibly private\051 extension provided to allow the) 260.4 521.99 T
(implementor to specify the actual data components of the object.) 135 509.99 T
2 12 Q
(2.3.2) 99.58 483.33 T
(Operations) 135 483.33 T
0 8 Q
(1) 54 465.99 T
3 11 Q
-0.21 (Each operation maps to an Ada subprogram with name mapped from the operation name. In) 135 465.99 P
-0.42 (the client-side package, the \336rst \050controlling\051 parameter to the operation is the reference type) 135 453.99 P
-0.05 (for the interface. In the server side package, the controlling parameter is an anonymous gen-) 135 441.99 P
(eral access-to-variable type. Operations with non-void result type that have only in-mode) 135 429.99 T
(parameters are mapped to Ada functions returning an Ada type mapped from the operation) 135 417.99 T
(result type. Otherwise, operations are mapped to Ada procedures. A non-void result is) 135 405.99 T
(returned by an added parameter to a procedure.) 135 393.99 T
2 12 Q
(2.3.3) 99.58 367.33 T
(Attributes) 135 367.33 T
0 8 Q
(1) 54 349.99 T
3 11 Q
(The Ada mapping models attributes as pairs of primitive subprograms declared in an inter-) 135 349.99 T
-0.05 (face package, one to set and one to get the attribute value. An attribute may be read-only) 135 337.99 P
-0.05 (, in) 523.29 337.99 P
(which case only a retrieval function is provided. The name of the retrieval function is) 135 325.99 T
(formed by appending \322) 135 313.99 T
6 F
(_Of) 236.73 313.99 T
3 F
(\323 to the attribute name. \322) 256.53 313.99 T
6 F
(Set_) 365.29 313.99 T
3 F
(\323 is used to form the names of) 391.68 313.99 T
-0.38 (attribute set procedures. Like operations, a \336rst controlling parameter is added. In client-side) 135 301.99 P
-0.36 (packages, the controlling parameter is of the reference type, while in server) 135 289.99 P
-0.36 (-side packages, it) 462.26 289.99 P
(is an anonymous general access-to-variable type.) 135 277.99 T
2 12 Q
(2.3.4) 99.58 251.33 T
(Inheritance) 135 251.33 T
0 8 Q
(1) 54 233.99 T
3 11 Q
(IDL inheritance allows an interface to be derived from other interfaces. IDL inheritance is) 135 233.99 T
(interface inheritance; the only associated semantics at the IDL level are that a child object) 135 221.99 T
(reference has "access to" all the operations of any of its parents. Re\337ection of IDL inherit-) 135 209.99 T
(ance in mapped code is a function solely of the language mapping,.) 135 197.99 T
0 8 Q
(2) 54 179.99 T
3 11 Q
(Single inheritance of IDL interfaces is directly mapped to inheritance in the Ada mapping,) 135 179.99 T
(i.e., an interface with a parent is mapped to a tagged type that is derived from the tagged) 135 167.99 T
(type mapped from the parent. The de\336nitions of types, constants, and exceptions in the par-) 135 155.99 T
-0.26 (ent package are renamed or subtyped so that they are also "inherited" in accordance with the) 135 143.99 P
(IDL semantics.) 135 131.99 T
0 8 Q
(3) 54 113.99 T
3 11 Q
(The client-side of multiple inheritance in IDL maps to a single Ref tagged type, as with sin-) 135 113.99 T
(gle inheritance, where the parent type is the \336rst interface listed in the IDL parent interface) 135 101.99 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 16
%%Page: "17" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping Summary) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(17) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
3 11 Q
(list.  The IDL compiler must generate additional primitive subprograms that correspond to) 153 679.99 T
(the operations inherited from the second and subsequent parent interfaces listed in the IDL.) 153 667.99 T
2 12 Q
(2.3.5) 117.58 641.33 T
(Data T) 153 641.33 T
(ypes) 188.78 641.33 T
0 8 Q
(1) 72 623.99 T
3 11 Q
-0.1 (The mapping of types is speci\336ed fairly straightforward and is summarized in the following) 153 623.99 P
(table:) 153 611.99 T
2 12 Q
(2.3.6) 117.58 337.33 T
(Exceptions) 153 337.33 T
0 8 Q
(1) 72 319.99 T
3 11 Q
(An IDL exception maps directly to an Ada exception declaration of the same name. The) 153 319.99 T
(optional body of an exception maps to a type that is an extension of a prede\336ned abstract) 153 307.99 T
(tagged type. The components of the record will be mapped from the member of the excep-) 153 295.99 T
(tion body in a manner similar to the mapping of record types. Implementers must provide a) 153 283.99 T
(function that returns the exception members from the Ada-provided) 153 271.99 T
6 F
(Exception_Occurrence) 153 259.99 T
3 F
( for each exception type.) 285 259.99 T
2 12 Q
(2.3.7) 117.58 233.33 T
(Names and Scoping) 153 233.33 T
0 8 Q
(1) 72 215.99 T
3 11 Q
(Modules are mapped directly to packages. Nested modules map to child packages of the) 153 215.99 T
(packages mapped from the enclosing module.) 153 203.99 T
0 8 Q
(2) 72 185.99 T
3 11 Q
(This mapping requires support the introduction of a subsystem name that serves as a root) 153 185.99 T
-0.11 (virtual module for all declarations in one or more \336les. When speci\336ed, subsystems create a) 153 173.99 P
(library package.) 153 161.99 T
0 8 Q
(3) 72 143.99 T
3 11 Q
(Files \050actually inclusion streams\051 create a package to contain the "bare" de\336nitions de\336ned) 153 143.99 T
(in IDL's global scope. The package name is formed from the concatenation of the \336lename) 153 131.99 T
(and ") 153 119.99 T
6 F
(_IDL_File) 176.12 119.99 T
3 F
(".) 235.52 119.99 T
0 0 0 1 0 0 0 K
149.47 570.83 251.5 586.83 R
7 X
V
0 0 0 1 0 0 0 K
6 10 Q
0 X
(Type\050s\051) 152.97 576.66 T
0 0 0 1 0 0 0 K
252.5 570.83 494.5 586.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Mapping) 256 576.66 T
0 0 0 1 0 0 0 K
149.47 551.83 251.5 567.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Arithmetic) 152.97 558.66 T
0 0 0 1 0 0 0 K
252.5 551.83 494.5 567.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Corresponding Ada arithmetic types) 256 558.66 T
0 0 0 1 0 0 0 K
149.47 533.83 251.5 550.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(char) 152.97 540.66 T
0 0 0 1 0 0 0 K
252.5 533.83 494.5 550.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Character) 256 540.66 T
0 0 0 1 0 0 0 K
149.47 515.83 251.5 532.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(boolean) 152.97 522.66 T
0 0 0 1 0 0 0 K
252.5 515.83 494.5 532.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Boolean) 256 522.66 T
0 0 0 1 0 0 0 K
149.47 497.83 251.5 514.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(octet) 152.97 504.66 T
0 0 0 1 0 0 0 K
252.5 497.83 494.5 514.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Interfaces.Unsigned_8) 256 504.66 T
0 0 0 1 0 0 0 K
149.47 479.83 251.5 496.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(any) 152.97 486.66 T
0 0 0 1 0 0 0 K
252.5 479.83 494.5 496.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(CORBA.Any \050implementation defined\051) 256 486.66 T
0 0 0 1 0 0 0 K
149.47 461.83 251.5 478.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(struct) 152.97 468.66 T
0 0 0 1 0 0 0 K
252.5 461.83 494.5 478.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(record with corresponding components) 256 468.66 T
0 0 0 1 0 0 0 K
149.47 443.83 251.5 460.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(union) 152.97 450.66 T
0 0 0 1 0 0 0 K
252.5 443.83 494.5 460.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(discriminated record) 256 450.66 T
0 0 0 1 0 0 0 K
149.47 425.83 251.5 442.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(enum) 152.97 432.66 T
0 0 0 1 0 0 0 K
252.5 425.83 494.5 442.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(enumerated type) 256 432.66 T
0 0 0 1 0 0 0 K
149.47 396.83 251.5 424.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(sequence) 152.97 414.66 T
0 0 0 1 0 0 0 K
252.5 396.83 494.5 424.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(instantiation of pre-defined generic) 256 414.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(package) 256 403.66 T
0 0 0 1 0 0 0 K
149.47 378.83 251.5 395.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(string) 152.97 385.66 T
0 0 0 1 0 0 0 K
252.5 378.83 494.5 395.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Ada.Strings type) 256 385.66 T
0 0 0 1 0 0 0 K
149.47 360.83 251.5 377.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(Arrays) 152.97 367.66 T
0 0 0 1 0 0 0 K
252.5 360.83 494.5 377.83 R
7 X
V
0 0 0 1 0 0 0 K
0 X
(array types) 256 367.66 T
0 0 0 1 0 0 0 K
148.97 586.83 148.97 360.83 2 L
V
1 H
0 Z
N
252 587.83 252 359.83 2 L
V
N
495 586.83 495 360.83 2 L
V
N
148.47 587.33 495.5 587.33 2 L
V
N
149.47 570.33 494.5 570.33 2 L
V
N
149.47 568.33 494.5 568.33 2 L
V
N
148.47 551.33 495.5 551.33 2 L
V
N
148.47 533.33 495.5 533.33 2 L
V
N
148.47 515.33 495.5 515.33 2 L
V
N
148.47 497.33 495.5 497.33 2 L
V
N
148.47 479.33 495.5 479.33 2 L
V
N
148.47 461.33 495.5 461.33 2 L
V
N
148.47 443.33 495.5 443.33 2 L
V
N
148.47 425.33 495.5 425.33 2 L
V
N
148.47 396.33 495.5 396.33 2 L
V
N
148.47 378.33 495.5 378.33 2 L
V
N
148.47 360.33 495.5 360.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 17
%%Page: "18" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Other Mapping Requirements) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(18) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(4) 54 679.99 T
3 11 Q
-0.37 (Lexical inclusion \050) 135 679.99 P
6 F
-0.9 (#include) 216.74 679.99 P
3 F
-0.37 (\051 is mapped to with clauses for the packages mapped from the) 269.54 679.99 P
(included \336les, modules, and interfaces.) 135 667.99 T
54 621.92 540 627.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 625.13 449.34 625.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 625.13 125.58 625.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(2.4) 107.93 631.66 T
(Other Mapping Requirements) 135 631.66 T
2 12 Q
(2.4.1) 99.58 597.92 T
(Implementation Considerations) 135 597.92 T
0 8 Q
(1) 54 580.59 T
3 11 Q
(The Ada language mapping can be implemented a number of ways. Stub packages, ORB) 135 580.59 T
(packages, and data type packages may vary between implementations of the mapping. This) 135 568.59 T
(is a natural consequence of using an object-oriented programming language\321the imple-) 135 556.59 T
(mentation of a package should not be visible to its user) 135 544.59 T
(.) 376.37 544.59 T
2 12 Q
(2.4.2) 99.58 517.92 T
(Calling Convention) 135 517.92 T
0 8 Q
(1) 54 500.59 T
3 11 Q
-0.26 (Like IDL, Ada allows the passing of parameters to operations using) 135 500.59 P
6 F
-0.61 (in) 432.8 500.59 P
3 F
-0.26 (,) 446 500.59 P
6 F
-0.61 (out,) 451.25 500.59 P
3 F
-0.26 ( and) 477.65 500.59 P
6 F
-0.61 (in out) 498.52 500.59 P
3 F
(modes and returning values as results. The Ada language mapping preserves these in/out) 135 488.59 T
-0.25 (modes in an operation\325) 135 476.59 P
-0.25 (s subprogram speci\336cation. Parameters may be passed by value or by) 234.78 476.59 P
(reference object.) 135 464.59 T
2 12 Q
(2.4.3) 99.58 437.92 T
(Memory Management) 135 437.92 T
0 8 Q
(1) 54 420.59 T
3 11 Q
(The mapping permits automatic memory management. However) 135 420.59 T
(, the language mapping) 418.99 420.59 T
-0.02 (does not specify what kind, if any) 135 408.59 P
-0.02 (, of memory management facility is provided by an imple-) 282.94 408.59 P
(mentation.) 135 396.59 T
2 12 Q
(2.4.4) 99.58 369.92 T
(T) 135 369.92 T
(asking) 141.44 369.92 T
0 8 Q
(1) 54 352.59 T
3 11 Q
-0.14 (The mapping encourages implementors to provide tasking-safe access to CORBA services.) 135 352.59 P
(At a minimum, access via Basis Object Adapter \050BOA\051 \050Section) 135 340.59 T
(5.8 on page) 421.26 340.59 T
(54\051 should be) 475.03 340.59 T
(tasking-safe.) 135 328.59 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 18
%%Page: "19" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(19) 523.37 60.96 T
2 9 Q
( of 97) 534.49 60.96 T
1 10 Q
1 (CHAPTER 3) 207 677 S
4 24 Q
(Lexical) 297 677 T
(Mapping) 297 647 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(1) 72 424.67 T
3 11 Q
(This section speci\336es the mapping of IDL identi\336ers, literals, and constant expressions.) 153 424.67 T
72 378.59 558 384 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 381.8 467.34 381.8 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 381.8 143.58 381.8 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(3.1) 125.93 388.33 T
(Mapping of Identi\336ers) 153 388.33 T
0 8 Q
(1) 72 361.26 T
3 11 Q
-0.08 (IDL identi\336ers follow rules similar to those of Ada but more strict with regard to case \050iden-) 153 361.26 P
(ti\336ers that dif) 153 349.26 T
(fer only in case are disallowed\051 and less restrictive regarding the use of under-) 212.08 349.26 T
(scores. A conforming implementation shall map identi\336ers by the following rules:) 153 337.26 T
0 8 Q
(2) 72 319.26 T
(\245) 153 319.26 T
3 11 Q
(Where \322_\323 is followed by another underscore, replace the second underscore with the) 171 319.26 T
(character \324) 171 307.26 T
6 F
(U) 217.72 307.26 T
3 F
(\325.) 224.32 307.26 T
0 8 Q
(3) 72 292.26 T
(\245) 153 292.26 T
3 11 Q
(Where \322_\323 is at the end of an identi\336er) 171 292.26 T
(, add the character \325) 341.02 292.26 T
6 F
(U) 428.06 292.26 T
3 F
(\325 after the underscore.) 434.66 292.26 T
0 8 Q
(4) 72 277.26 T
(\245) 153 277.26 T
3 11 Q
(When an IDL identi\336er collides with an Ada reserved word, insert the string \322IDL_\323) 171 277.26 T
(before the identi\336er) 171 265.26 T
(. See APPENDIX J on page) 257.15 265.26 T
(95 for a list of Ada reserved words.) 382.72 265.26 T
72 219.18 558 224.59 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 222.39 467.34 222.39 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 222.39 143.58 222.39 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(3.2) 125.93 228.93 T
(Mapping of Literals) 153 228.93 T
0 8 Q
(1) 72 201.85 T
3 11 Q
(IDL literals shall be mapped to lexically equivalent Ada literals or semantically equivalent) 153 201.85 T
-0.29 (expressions. The following sections describe the lexical mapping of IDL literals to Ada liter-) 153 189.85 P
(als. This information may be used to provide semantic interpretation of the literals found in) 153 177.85 T
(IDL constant expressions in order to calculate the value of an IDL constant or as the basis) 153 165.85 T
(for translating those literals into equivalent Ada literals.) 153 153.85 T
2 12 Q
(3.2.1) 117.58 127.18 T
(Integer Literals) 153 127.18 T
0 8 Q
(1) 72 109.85 T
3 11 Q
(IDL supports decimal, octal, and hexadecimal integer literals.) 153 109.85 T
0 1 1 0 1 0 0 K
52 261.59 54 272.59 R
0 1 1 0 1 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 19
%%Page: "20" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping of Literals) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(20) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 97) 74.9 61.63 T
0 8 Q
(2) 54 679.99 T
3 11 Q
(A decimal literal consists of a sequence of digits that does not begin with \3240\325. Decimal liter-) 135 679.99 T
(als are lexically equivalent to Ada literal values.) 135 667.99 T
0 8 Q
(3) 54 649.99 T
3 11 Q
-0.13 (An octal literal consists of a leading \3240\325 followed by a sequence of octal digits \0500 .. 7\051. Octal) 135 649.99 P
-0.41 (constants may be lexically mapped by prepending \3228#\323 and appending \322#\323 to the IDL literal.) 135 637.99 P
(The leading zero in the IDL literal may be deleted or kept.) 135 625.99 T
0 8 Q
(4) 54 607.99 T
3 11 Q
(A hexadecimal literal consists of \3220x\323 or \3220X\323 followed by a sequence of hexadecimal dig-) 135 607.99 T
(its \0500 .. 9, [a|A] .. [f|F]\051. Hexadecimal literals may be lexically mapped by Ada literals by) 135 595.99 T
(deleting the leading \3220x\323 or \3220X\323, prepending \32216#\323 and appending \322#\323.) 135 583.99 T
2 12 Q
(3.2.2) 99.58 557.33 T
(Floating-Point Literals) 135 557.33 T
0 8 Q
(1) 54 539.99 T
3 11 Q
(An IDL \337oating-point literal consists of an integer part, a decimal point, a fraction part, an) 135 539.99 T
(\324e\325 or \324E\325, an optionally signed integer exponent.) 135 527.99 T
2 9 Q
(\310 NOTE) 126 504.66 T
3 10 Q
(IDL before version 1.2 allowed an optional type suf) 189 504.66 T
(\336x [f, F) 396.28 504.66 T
(, d, or D].) 425.76 504.66 T
0 8 Q
(2) 54 485.99 T
3 11 Q
(The integer and fraction parts consist of sequences of decimal digits.) 135 485.99 T
0 8 Q
(3) 54 467.99 T
3 11 Q
(Either the integer part or the fraction part, but not both, may be missing.) 135 467.99 T
0 8 Q
(4) 54 449.99 T
3 11 Q
(Either the decimal point and the fractional part or the \324e\325 \050or \324E\325\051 and the exponent, but not) 135 449.99 T
(both, may be missing.) 135 437.99 T
0 8 Q
(5) 54 419.99 T
3 11 Q
-0.01 (A lexically equivalent \337oating point literal may be formed by appending, to the integer part) 135 419.99 P
(\050or \3220\323 if the integer part is missing\051, a \322.\323 \050decimal point\051, the fraction part \050or \3220\323 if the) 135 407.99 T
(fraction part is missing\051, an \322E\323, and the exponent \050or \3220\323 if the exponent is missing\051.) 135 395.99 T
0 8 Q
(6) 54 377.99 T
3 11 Q
(Optionally) 135 377.99 T
(, the ending \322E0\323 may be left of) 181.34 377.99 T
(f if the IDL did not have an exponent.) 321.67 377.99 T
2 9 Q
(\310 NOTE) 126 354.66 T
3 10 Q
(For implementations choosing a mapping for the pre-1.2 optional type suf) 189 354.66 T
(\336x, the fol-) 484.63 354.66 T
(lowing rule should be observed: If a type suf) 189 342.66 T
(\336x is appended, the above construction) 367.68 342.66 T
(should be appended to the Ada mapping of the type suf) 189 330.66 T
(\336x followed by \322) 409.9 330.66 T
3 11 Q
(\325) 477.95 330.66 T
3 10 Q
(\050\322, and a clos-) 481.61 330.66 T
(ing \322\051\323 should be appended.) 189 318.66 T
2 12 Q
(3.2.3) 99.58 291.33 T
(Character Literals) 135 291.33 T
0 8 Q
(1) 54 273.99 T
3 11 Q
(IDL character literals are single graphic characters or escape sequences enclosed by single) 135 273.99 T
-0.11 (quotes. The \336rst form is lexically equivalent to an Ada character literal. The following table) 135 261.99 P
(supplies lexical equivalents for the de\336ned escape sequences. Equivalent character literals) 135 249.99 T
(may also be used, but are not recommended when used in concatenation expressions.) 135 237.99 T
2 8 Q
(Description) 141 197.99 T
(IDL) 211.55 215.99 T
(Escape) 211.55 206.99 T
(Sequence) 211.55 197.99 T
(ISO 646 Octal V) 265.55 197.99 T
(alue) 324.25 197.99 T
(Ada Lexical Mapping) 358.81 197.99 T
3 10 Q
(newline) 141 182.66 T
(\134n) 211.55 182.66 T
(012) 265.55 182.66 T
(Ada.Characters.Latin_1.LF) 358.81 182.66 T
(horizontal tab) 141 166.66 T
(\134t) 211.55 166.66 T
(011) 265.55 166.66 T
(Ada.Characters.Latin_1.HT) 358.81 166.66 T
(vertical tab) 141 150.66 T
(\134v) 211.55 150.66 T
(013) 265.55 150.66 T
(Ada.Characters.Latin_1.VT) 358.81 150.66 T
(backspace) 141 134.66 T
(\134b) 211.55 134.66 T
(010) 265.55 134.66 T
(Ada.Characters.Latin_1.BS) 358.81 134.66 T
-0.03 (carriage return) 141 118.66 P
(\134r) 211.55 118.66 T
(015) 265.55 118.66 T
(Ada.Characters.Latin_1.CR) 358.81 118.66 T
(form feed) 141 102.66 T
(\134f) 211.55 102.66 T
(014) 265.55 102.66 T
(Ada.Characters.Latin_1.FF) 358.81 102.66 T
135 228.08 135 97.58 2 L
V
0.5 H
0 Z
N
205.55 228.58 205.55 97.08 2 L
V
0.25 H
N
259.55 228.58 259.55 97.08 2 L
V
N
352.81 228.58 352.81 97.08 2 L
V
N
540 228.08 540 97.58 2 L
V
0.5 H
N
134.75 228.33 540.25 228.33 2 L
V
N
134.75 193.33 540.25 193.33 2 L
V
2 H
N
134.75 177.33 540.25 177.33 2 L
V
0.25 H
N
134.75 161.33 540.25 161.33 2 L
V
N
134.75 145.33 540.25 145.33 2 L
V
N
134.75 129.33 540.25 129.33 2 L
V
N
134.75 113.33 540.25 113.33 2 L
V
N
134.75 97.33 540.25 97.33 2 L
V
0.5 H
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 20
%%Page: "21" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping of Constant Expressions) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(21) 523.37 60.96 T
2 9 Q
( of 97) 534.49 60.96 T
2 12 Q
(3.2.4) 117.58 494.33 T
(String Literals) 153 494.33 T
0 8 Q
(1) 72 476.99 T
3 11 Q
-0.33 (An IDL string literal is a sequence of IDL characters surrounded by double quotes. Adjacent) 153 476.99 P
-0.32 (string literals are concatenated. W) 153 464.99 P
-0.32 (ithin a string, the double quote character must be preceded) 301.25 464.99 P
-0.16 (by a \324\134\325. A string literal may not contain the \322nul\323 character) 153 452.99 P
-0.16 (. Lexically equivalent Ada string) 411.54 452.99 P
(literals may be formed as follows. If the string literal does not contain escape sequences) 153 440.99 T
-0.07 (\050does not contain \324\134\325\051, the IDL literal is lexically equivalent to a valid Ada literal. If the IDL) 153 428.99 P
(literal contains escape sequences, the string must be partitioned into substrings. As each) 153 416.99 T
(embedded escape sequence is encountered, three partitions must be formed: one containing) 153 404.99 T
(a substring with the contents of the string before the escape sequence, one containing the) 153 392.99 T
(escape sequence only) 153 380.99 T
(, and one containing the remainder of the string. The remainder of the) 246.97 380.99 T
-0.03 (string is \050iteratively\051 checked for additional escape sequences. The substrings containing an) 153 368.99 P
(escape sequence must be replaced by their lexically equivalent Ada character literals as) 153 356.99 T
-0.48 (speci\336ed in the preceding section. These substrings must be concatenated together \050using the) 153 344.99 P
(Ada \322&\323 operator\051 in the original order) 153 332.99 T
(. Finally) 325.29 332.99 T
(, adjacent strings must be concatenated.) 361.25 332.99 T
72 286.92 558 292.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 290.13 467.34 290.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 290.13 143.58 290.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(3.3) 125.93 296.66 T
(Mapping of Constant Expressions) 153 296.66 T
0 8 Q
(1) 72 269.59 T
3 11 Q
(In IDL, constant expressions are used to de\336ne the values of constants in constant declara-) 153 269.59 T
-0.25 (tions. A subset, those expressions that evaluate to positive integer values, may also be found) 153 257.59 P
-0.2 (as the maximum length of a bounded sequence, as the maximum length of a bounded string,) 153 245.59 P
(or as the \336xed array size in complex declarators. An IDL constant expression shall be) 153 233.59 T
(mapped to an Ada static expression or a literal with the same value as the IDL constant) 153 221.59 T
-0.29 (expression. The value of the IDL expression must be interpreted according to the syntax and) 153 209.59 P
(semantics in Section 4.6 of the CORBA speci\336cation. The mapping may be accomplished) 153 197.59 T
-0.49 (by interpreting the IDL constant expression yielding an equivalent Ada literal of the required) 153 185.59 P
(type or by building an expression containing operations on literals, scoped names, and) 153 173.59 T
-0.2 (interim results that mimic the form and semantics of the IDL literal expression and yield the) 153 161.59 P
(same value.) 153 149.59 T
2 12 Q
(3.3.1) 117.58 122.92 T
(Mapping of Operators) 153 122.92 T
0 8 Q
(1) 72 105.59 T
3 11 Q
-0.03 (The following table provides the correspondence between IDL operators in a valid constant) 153 105.59 P
-0.19 (expression and semantically equivalent Ada operators. This information may be used to pro-) 153 93.59 P
3 10 Q
(alert) 159 641.66 T
(\134a) 229.55 641.66 T
(007) 283.55 641.66 T
(Ada.Characters.Latin_1.BEL) 376.81 641.66 T
(backslash) 159 625.66 T
(\134\134) 229.55 625.66 T
(134) 283.55 625.66 T
(Ada.Characters.Latin_1.Reverse_Solidus) 376.81 625.66 T
(question mark) 159 609.66 T
(\134?) 229.55 609.66 T
(077) 283.55 609.66 T
(Ada.Characters.Latin_1.Question) 376.81 609.66 T
(single quote) 159 593.66 T
(\134\325) 229.55 593.66 T
(047) 283.55 593.66 T
(Ada.Characters.Latin_1.Apostrophe) 376.81 593.66 T
(double quote) 159 577.66 T
(\134\323) 229.55 577.66 T
(042) 283.55 577.66 T
(Ada.Characters.Latin_1.Quotation) 376.81 577.66 T
(octal number) 159 561.66 T
(\134ooo) 229.55 561.66 T
(ooo) 283.55 561.66 T
(Character\325val\0508#ooo#\051) 376.81 561.66 T
(hex number) 159 545.66 T
(\134xhh) 229.55 545.66 T
(Octal equivalent to) 283.55 545.66 T
(the hexadecimal) 283.55 533.66 T
(number hh) 283.55 521.66 T
(Character\325val\05016#hh#\051) 376.81 545.66 T
2 8 Q
(Description) 159 656.99 T
(IDL) 229.55 674.99 T
(Escape) 229.55 665.99 T
(Sequence) 229.55 656.99 T
(ISO 646 Octal V) 283.55 656.99 T
(alue) 342.25 656.99 T
(Ada Lexical Mapping) 376.81 656.99 T
153 687.08 153 516.58 2 L
V
0.5 H
0 Z
N
223.55 687.58 223.55 516.08 2 L
V
0.25 H
N
277.55 687.58 277.55 516.08 2 L
V
N
370.81 687.58 370.81 516.08 2 L
V
N
558 687.08 558 516.58 2 L
V
0.5 H
N
152.75 687.33 558.25 687.33 2 L
V
N
152.75 652.33 558.25 652.33 2 L
V
2 H
N
152.75 636.33 558.25 636.33 2 L
V
0.25 H
N
152.75 620.33 558.25 620.33 2 L
V
N
152.75 604.33 558.25 604.33 2 L
V
N
152.75 588.33 558.25 588.33 2 L
V
N
152.75 572.33 558.25 572.33 2 L
V
N
152.75 556.33 558.25 556.33 2 L
V
N
152.75 516.33 558.25 516.33 2 L
V
0.5 H
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 21
%%Page: "22" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping of Constant Expressions) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(22) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 97) 74.9 61.63 T
3 11 Q
(vide semantic interpretation of the operators found in IDL constant expressions or as the) 135 679.99 T
(basis for translating expression containing those operators into equivalent Ada expressions.) 135 667.99 T
0 8 Q
(2) 54 364.99 T
3 11 Q
-0.09 (Note that the following IDL semantics \050from 4.6.2 of the CORBA spec\051 requires some coer-) 135 364.99 P
(cion of types. Dif) 135 352.99 T
(ferences in applicability of operators to types may force some additional) 211.79 352.99 T
(type conversions in order to obtain Ada expressions semantically equivalent to the IDL) 135 340.99 T
(expressions.) 135 328.99 T
4 F
(\322Mixed type expr) 162 310.99 T
(essions \050e.g. integers mixed with \337oats\051 ar) 238.57 310.99 T
(e illegal.) 423.93 310.99 T
(An integer constant expr) 162 292.99 T
(ession is evaluated as unsigned long unless it contains a) 270.05 292.99 T
-0.3 (negated integer literal or the name of an integer constant with a negative value. In the) 162 280.99 P
-0.38 (latter case, the constant expr) 162 268.99 P
-0.38 (ession is evaluated as signed long. The computed value is) 287.47 268.99 P
(coer) 162 256.99 T
(ced back to the tar) 181.14 256.99 T
(get type in constant initializers. It is an err) 262.61 256.99 T
(or if the computed) 450.12 256.99 T
(value exceeds the range of the evaluated-as type \050long or unsigned long\051.) 162 244.99 T
(All \337oating-point literals ar) 162 226.99 T
(e double, all \337oating-point constants ar) 283.53 226.99 T
(e coer) 457.3 226.99 T
(ced to dou-) 484.07 226.99 T
(ble, and all \337oating-point expr) 162 214.99 T
(ession ar) 296.34 214.99 T
(e computed as doubles. The computed double) 335.96 214.99 T
(value is coer) 162 202.99 T
(ced back to the tar) 217.8 202.99 T
(get type in constant initializers. It is an err) 299.27 202.99 T
(or if this) 486.79 202.99 T
(coer) 162 190.99 T
(cion fails or if any intermediate values \050when evaluating the expr) 181.14 190.99 T
(ession\051 exceed) 467.93 190.99 T
(the range of double.\323) 162 178.99 T
3 9 Q
(IDL) 141 644.33 T
(Operator) 141 633.33 T
(IDL) 185.29 644.33 T
(symbol) 185.29 633.33 T
(Applicable Types) 224.39 644.33 T
(Ada) 305.7 644.33 T
(Operator) 305.7 633.33 T
(Supported by Ada Types) 362.14 644.33 T
(Integer) 224.39 629.33 T
(Floating) 263.3 629.33 T
(point) 263.3 618.33 T
(Boolean) 362.14 629.33 T
(Modular) 406.48 629.33 T
(Integer) 406.48 618.33 T
(Signed) 451.71 629.33 T
(Integer) 451.71 618.33 T
(Floating) 491.33 629.33 T
(Point) 491.33 618.33 T
3 8 Q
(or) 141 603.99 T
(|) 185.29 603.99 T
8 F
(3) 224.39 603.99 T
3 F
(or) 305.7 603.99 T
8 F
(3) 362.14 603.99 T
(3) 406.48 603.99 T
3 F
(xor) 141 589.99 T
(^) 185.29 589.99 T
8 F
(3) 224.39 589.99 T
3 F
(xor) 305.7 589.99 T
8 F
(3) 362.14 589.99 T
(3) 406.48 589.99 T
3 9 Q
(and) 141 575.33 T
(&) 185.29 575.33 T
8 F
(3) 224.39 575.33 T
3 F
(and) 305.7 575.33 T
8 F
(3) 362.14 575.33 T
(3) 406.48 575.33 T
3 F
(shift) 141 560.33 T
(<<) 185.29 560.33 T
8 F
(3) 224.39 560.33 T
3 F
(Interfaces.) 305.7 560.33 T
(Shift_Left) 305.7 549.33 T
8 F
(3) 406.48 560.33 T
3 F
(>>) 185.29 534.33 T
8 F
(3) 224.39 534.33 T
3 F
(Interfaces.) 305.7 534.33 T
(Shift_Right) 305.7 523.33 T
8 F
(3) 406.48 534.33 T
3 F
(add) 141 508.33 T
(+) 185.29 508.33 T
8 F
(3) 224.39 508.33 T
(3) 263.3 508.33 T
3 F
(+) 305.7 508.33 T
8 F
(3) 406.48 508.33 T
(3) 451.71 508.33 T
(3) 491.33 508.33 T
3 F
(-) 185.29 493.33 T
8 F
(3) 224.39 493.33 T
(3) 263.3 493.33 T
3 F
(-) 305.7 493.33 T
8 F
(3) 406.48 493.33 T
(3) 451.71 493.33 T
(3) 491.33 493.33 T
3 F
(multiply) 141 478.33 T
(*) 185.29 478.33 T
8 F
(3) 224.39 478.33 T
(3) 263.3 478.33 T
3 F
(*) 305.7 478.33 T
8 F
(3) 406.48 478.33 T
(3) 451.71 478.33 T
(3) 491.33 478.33 T
3 F
(/) 185.29 463.33 T
8 F
(3) 224.39 463.33 T
(3) 263.3 463.33 T
3 F
(/) 305.7 463.33 T
8 F
(3) 406.48 463.33 T
(3) 451.71 463.33 T
(3) 491.33 463.33 T
3 F
(%) 185.29 448.33 T
8 F
(3) 224.39 448.33 T
3 F
(rem) 305.7 448.33 T
8 F
(3) 406.48 448.33 T
(3) 451.71 448.33 T
(3) 491.33 448.33 T
3 F
(unary) 141 433.33 T
(-) 185.29 433.33 T
8 F
(3) 224.39 433.33 T
(3) 263.3 433.33 T
3 F
(-) 305.7 433.33 T
8 F
(3) 406.48 433.33 T
(3) 451.71 433.33 T
(3) 491.33 433.33 T
3 F
(+) 185.29 418.33 T
8 F
(3) 224.39 418.33 T
(3) 263.3 418.33 T
3 F
(+) 305.7 418.33 T
8 F
(3) 406.48 418.33 T
(3) 451.71 418.33 T
(3) 491.33 418.33 T
3 F
(~) 185.29 403.33 T
8 F
(3) 224.39 403.33 T
3 F
(not) 305.7 403.33 T
(-\050value - 1\051) 305.7 392.33 T
8 F
(3) 362.14 403.33 T
(3) 406.48 403.33 T
(3) 451.71 392.33 T
135 654.08 135 387.58 2 L
V
0.5 H
0 Z
N
179.29 654.58 179.29 387.08 2 L
V
N
218.39 654.58 218.39 387.08 2 L
V
N
257.3 639.33 257.3 387.08 2 L
V
N
299.7 654.58 299.7 387.08 2 L
V
2 H
N
356.14 654.58 356.14 387.08 2 L
V
0.5 H
N
400.48 639.33 400.48 387.08 2 L
V
N
445.71 639.33 445.71 387.08 2 L
V
N
485.33 639.33 485.33 387.08 2 L
V
N
529.64 654.08 529.64 387.58 2 L
V
N
134.75 654.33 529.89 654.33 2 L
V
N
134.75 613.33 529.89 613.33 2 L
V
2 H
N
134.75 599.33 529.89 599.33 2 L
V
0.5 H
N
134.75 585.33 529.89 585.33 2 L
V
N
134.75 570.33 529.89 570.33 2 L
V
N
179.04 544.33 529.89 544.33 2 L
V
N
134.75 518.33 529.89 518.33 2 L
V
N
179.04 503.33 529.89 503.33 2 L
V
N
134.75 488.33 529.89 488.33 2 L
V
N
179.04 473.33 529.89 473.33 2 L
V
N
179.04 458.33 529.89 458.33 2 L
V
N
134.75 443.33 529.89 443.33 2 L
V
N
179.04 428.33 529.89 428.33 2 L
V
N
179.04 413.33 529.89 413.33 2 L
V
N
134.75 387.33 529.89 387.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 22
%%Page: "23" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(23) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (CHAPTER 4) 207 677 S
4 24 Q
(The Mapping of) 297 677 T
(IDL to Ada) 297 647 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(1) 72 424.67 T
3 11 Q
(This chapter speci\336es the syntactic and semantic mapping of OMG IDL to Ada. Unless) 153 424.67 T
-0.19 (noted, the mapping is applicable to both client-side and server) 153 412.67 P
-0.19 (-side interfaces. Mapping con-) 424.17 412.67 P
-0.17 (siderations unique to the server) 153 400.67 P
-0.17 (-side interface are speci\336ed in a subsequent chapter \050\322Server) 289.57 400.67 P
-0.17 (-) 554.34 400.67 P
(Side Mapping\323 on page) 153 388.67 T
(59\051.) 259.93 388.67 T
72 342.59 558 348 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 345.8 467.34 345.8 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 345.8 143.58 345.8 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.1) 125.93 352.33 T
(Names) 153 352.33 T
2 12 Q
(4.1.1) 117.58 318.59 T
(Identi\336ers) 153 318.59 T
0 8 Q
(1) 72 301.26 T
3 11 Q
-0.05 (The lexical mapping of IDL identi\336ers is speci\336ed in Section) 153 301.26 P
-0.05 (3.1 on page) 424.44 301.26 P
-0.05 (19. All identi\336ers) 478.1 301.26 P
-0.27 (in the Ada interfaces generated from IDL shall be mapped from the corresponding IDL iden-) 153 289.26 P
(ti\336ers.) 153 277.26 T
2 12 Q
(4.1.2) 117.58 250.59 T
(Scoped Names) 153 250.59 T
0 8 Q
(1) 72 233.26 T
3 11 Q
(Name scopes in IDL have the following corresponding Ada named declarative regions:) 153 233.26 T
0 8 Q
(2) 72 215.26 T
(\245) 153 215.26 T
3 11 Q
(The subsystem name, if speci\336ed, forms an Ada library package.) 171 215.26 T
0 8 Q
(3) 72 200.26 T
(\245) 153 200.26 T
3 11 Q
-0.07 (The \322global\323 name space of IDL \336les are mapped to Ada \322_IDL_File\323 library packages.) 171 200.26 P
0 8 Q
(4) 72 185.26 T
(\245) 153 185.26 T
3 11 Q
(IDL modules are mapped to Ada child packages of the packages representing their) 171 185.26 T
(enclosing scope.) 171 173.26 T
0 8 Q
(5) 72 158.26 T
(\245) 153 158.26 T
3 11 Q
(IDL interfaces are mapped to Ada child packages of the packages representing their) 171 158.26 T
(enclosing scope.) 171 146.26 T
0 8 Q
(6) 72 131.26 T
(\245) 153 131.26 T
3 11 Q
(All IDL constructs scoped to an interface are accessed via Ada expanded names. For) 171 131.26 T
(example, if a type) 171 119.26 T
6 F
(mode) 252.57 119.26 T
3 F
( were de\336ned in interface) 278.96 119.26 T
6 F
(printer) 393.51 119.26 T
3 F
( then the Ada type would) 439.71 119.26 T
(be referred to as) 171 107.26 T
6 F
(Printer.Mode.) 244.91 107.26 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 23
%%Page: "24" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(IDL Files) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(24) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(7) 54 679.99 T
3 11 Q
(These mappings allow the corresponding mechanisms in IDL and Ada to be used to build) 135 679.99 T
(scoped names.) 135 667.99 T
54 621.92 540 627.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 625.13 449.34 625.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 625.13 125.58 625.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.2) 107.93 631.66 T
(IDL Files) 135 631.66 T
2 12 Q
(4.2.1) 99.58 597.92 T
(Subsystems) 135 597.92 T
0 8 Q
(1) 54 580.59 T
3 11 Q
-0.42 (Subsystems are expressed in Ada by hierarchies of packages and child packages. The closest) 135 580.59 P
(corresponding construct in IDL is the \322module\323, which de\336nes a scope that can contain) 135 568.59 T
(other modules, interfaces, and de\336nitions. However) 135 556.59 T
(, at least in Revision 1.2, a module may) 361.85 556.59 T
-0.1 (not extend across a \336le boundary) 135 544.59 P
-0.1 (. This is a serious limitation in the ability of a provider of a) 278.91 544.59 P
(set of capabilities to prevent name clashes with other subsystems. For this reason, the sup-) 135 532.59 T
(port for the generation of a subsystem is de\336ned.) 135 520.59 T
2 12 Q
(4.2.1.1) 90 495.92 T
(Specifying a Subsystem) 135 495.92 T
0 8 Q
(1) 54 477.59 T
3 11 Q
(An implementation shall allow a user to specify a name for a subsystem. The subsystem) 135 477.59 T
(name will serve as a root \322virtual\323 name scope for the component \336les that helps prevent) 135 465.59 T
(name clashes. The mechanism for accomplishing this is not speci\336ed.) 135 453.59 T
2 9 Q
(\310 NOTE) 126 430.25 T
3 10 Q
(T) 189 430.25 T
(wo implementations were considered, but not adopted as requirements: a subsystem) 194.41 430.25 T
-0.22 (pragma, and a command line ar) 189 418.25 P
-0.22 (gument to the \322IDL compiler\323. In order) 313.8 418.25 P
-0.22 (, to promote port-) 470.11 418.25 P
-0.01 (ability) 189 406.25 P
-0.01 (, implementations are ur) 213.91 406.25 P
-0.01 (ged to use the following rules for the subsystem pragma,) 310.92 406.25 P
(if adopted:) 189 394.25 T
(The syntax for the subsystem pragma is as follows:) 189 382.25 T
6 F
(#pragma Subsystem\050Subsystem_Name\051;) 199 370.25 T
3 F
(where) 189 358.25 T
6 F
(Subsystem_Name) 215.93 358.25 T
3 F
( is a string that is a valid IDL identi\336er \050preferably a valid) 299.93 358.25 T
(Ada identi\336er\051 that speci\336es the name of the subsystem. The keyword \322) 189 346.25 T
6 F
(Subsystem) 475.62 346.25 T
3 F
(\323) 529.62 346.25 T
(may be of arbitrary case. The subsystem pragma may appear in any line of a \336le.) 189 334.25 T
2 12 Q
(4.2.1.2) 90 308.92 T
(Mapping of Subsystem) 135 308.92 T
0 8 Q
(1) 54 290.59 T
3 11 Q
-0.03 (A subsystem speci\336cation shall be mapped to an \050empty\051 library level package with a name) 135 290.59 P
(mapped from the provided subsystem name. This package shall form an enclosing name) 135 278.59 T
(scope for all packages mapped from enclosed modules or interfaces.) 135 266.59 T
2 9 Q
(\310 NOTE) 126 243.25 T
3 10 Q
(Because the generated package is empty) 189 243.25 T
(, implementations are free to re-generate this) 349.69 243.25 T
(package regardless of its previous existence, e.g., if it had been generated from the sub-) 189 231.25 T
(system pragma in another \336le.) 189 219.25 T
2 12 Q
(4.2.2) 99.58 191.92 T
(File Inclusion) 135 191.92 T
0 8 Q
(1) 54 174.59 T
3 11 Q
-0.28 (While the CORBA Architecture and Speci\336cation document \050Revision 1.2\051 states that \322T) 135 174.59 P
-0.28 (ext) 524.08 174.59 P
-0.38 (in \336les included with a) 135 162.59 P
6 F
-0.91 (#include) 236.07 162.59 P
3 F
-0.38 ( directive is treated as if it appeared in the including \336le,\323) 288.87 162.59 P
(a more natural Ada mapping for these includes is mapping to Ada \322with clauses\323. This is) 135 150.59 T
(consistent with the primary use of the preprocessor facility which is to make available de\336-) 135 138.59 T
-0.27 (nitions from other IDL speci\336cations and avoids the problem of redundant Ada type declara-) 135 126.59 P
(tions that a literal interpretation of the inclusion would cause.) 135 114.59 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 24
%%Page: "25" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(CORBA Subsystem) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(25) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(2) 72 679.99 T
3 11 Q
-0.04 (The presence of an include directive in a \336le shall result in Ada with clauses to library units) 153 679.99 P
(mapped from the de\336nition in \322included\323 \336le suf) 153 667.99 T
(\336cient to provide visibility \050as de\336ned by) 367.59 667.99 T
(the Ada language\051 to all de\336nitions referenced in included \336les.) 153 655.99 T
2 9 Q
(\310 NOTE) 144 632.66 T
3 10 Q
-0.36 (The simplest implementation of this requirement might be to include with clauses for all) 207 632.66 P
(included \322\336le packages\323 \050see below\051, module packages, interface \050sub\051packages, and,) 207 620.66 T
(transitively) 207 608.66 T
(, all inclusions of the included \336le. However) 251.35 608.66 T
(, signi\336cant readability and) 428.43 608.66 T
(maintainability bene\336ts can be gained from withing only de\336nitions actually used.) 207 596.66 T
2 12 Q
(4.2.3) 117.58 569.33 T
(Comments) 153 569.33 T
0 8 Q
(1) 72 551.99 T
3 11 Q
(The handling of comments in IDL source code is not speci\336ed. However) 153 551.99 T
(, implementations) 472.73 551.99 T
(are encouraged to transfer comment text to the generated Ada code.) 153 539.99 T
2 12 Q
(4.2.4) 117.58 513.33 T
(Other Pre-Processing) 153 513.33 T
0 8 Q
(1) 72 495.99 T
3 11 Q
(Other preprocessing directives \050other than #include\051 shall have the ef) 153 495.99 T
(fect speci\336ed in the) 456.75 495.99 T
(CORBA speci\336cation.) 153 483.99 T
2 9 Q
(\310 NOTE) 144 460.66 T
3 10 Q
(Implementations may \336nd it useful to invoke a compliant C++ pre-processor on the) 207 460.66 T
(input IDL source and process the result. The presence of include directives can be) 207 448.66 T
0 (detected by using the \322line control\323 information found in the output stream of most pre-) 207 436.66 P
(processors.) 207 424.66 T
2 12 Q
(4.2.5) 117.58 397.33 T
(Global Names) 153 397.33 T
0 8 Q
(1) 72 379.99 T
3 11 Q
-0.38 (The naming scope de\336ned by an IDL \336le outside of any module or interface shall be mapped) 153 379.99 P
-0.05 (to an Ada package whose name shall be formed by removing the extension, if any) 153 367.99 P
-0.05 (, from the) 512.33 367.99 P
(IDL source \336le name and appending \322) 153 355.99 T
6 F
(_IDL_File) 321.01 355.99 T
3 F
(\323. If the \336le is part of a subsystem, the) 380.41 355.99 T
-0.01 (global name scope shall be mapped as a child of the \050implied\051 subsystem package. If all the) 153 343.99 P
(IDL statements in a \336le are enclosed by a single module or interface de\336nition, the genera-) 153 331.99 T
(tion of this \322\336le package\323 is optional.) 153 319.99 T
2 9 Q
(\310 NOTE) 144 296.66 T
3 10 Q
(Not generating the \322\336le package\323 when not needed, permits operating system-speci\336c) 207 296.66 T
-0.01 (\336le naming rules to be isolated from the resulting Ada, and so is encouraged. However) 207 284.66 P
-0.01 (,) 553.01 284.66 P
(it may complicate an implementation of the withing rules for inclusion. See above.) 207 272.66 T
72 225.92 558 231.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 229.13 467.34 229.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 229.13 143.58 229.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.3) 125.93 235.66 T
(CORBA Subsystem) 153 235.66 T
0 8 Q
(1) 72 208.59 T
3 11 Q
-0.29 (The Ada mapping relies on some prede\336ned types, packages, and functions. In CORBA 1.2,) 153 208.59 P
(these are logically de\336ned in a module named) 153 196.59 T
6 F
(CORBA) 357.69 196.59 T
3 F
( that is automatically accessible. All) 390.69 196.59 T
-0.16 (Ada compilation units generated from an IDL speci\336cation shall have \050non-direct\051 visibility) 153 184.59 P
(to the CORBA subsystem \050through a with clause.\051) 153 172.59 T
0 8 Q
(2) 72 154.59 T
3 11 Q
-0.1 (In the examples presented in this document, CORBA de\336nitions may be referenced without) 153 154.59 P
(explicit selection for simplicity) 153 142.59 T
(. In practice, identi\336ers from the CORBA module would) 289.48 142.59 T
(require the) 153 130.59 T
6 F
(CORBA) 203.09 130.59 T
3 F
( package pre\336x.) 236.09 130.59 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 25
%%Page: "26" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping Modules) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(26) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
54 668.92 540 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 672.13 449.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 672.13 125.58 672.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.4) 107.93 678.66 T
(Mapping Modules) 135 678.66 T
0 8 Q
(1) 54 651.59 T
3 11 Q
0 (Modules de\336ne a name scope and can contain the declarations of other modules, interfaces,) 135 651.59 P
(types, constants, and exceptions.) 135 639.59 T
0 8 Q
(2) 54 621.59 T
3 11 Q
-0.2 (T) 135 621.59 P
-0.2 (op level modules \050i.e., those not enclosed by other modules\051 shall be mapped to child pack-) 140.95 621.59 P
(ages of the subsystem package, if a subsystem is speci\336ed, or root library packages other-) 135 609.59 T
(wise. Modules nested within other modules or within subsystems shall be mapped to child) 135 597.59 T
-0.33 (packages of the corresponding package for the enclosing module or subsystem. The name of) 135 585.59 P
(the generated package shall be mapped from the module name.) 135 573.59 T
0 8 Q
(3) 54 555.59 T
3 11 Q
-0.03 (Packages mapped from modules form an enclosing name scope for enclosed modules, inter-) 135 555.59 P
(faces, or other declarations.) 135 543.59 T
0 8 Q
(4) 54 525.59 T
3 11 Q
-0.17 (Declarations scoped within an IDL module shall be mapped to declarations within the corre-) 135 525.59 P
(sponding mapped Ada package.) 135 513.59 T
54 467.51 540 472.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 470.72 449.34 470.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 470.72 125.58 470.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.5) 107.93 477.25 T
(Mapping for Interfaces \050Client-Side Speci\336c\051) 135 477.25 T
0 8 Q
(1) 54 450.18 T
3 11 Q
(An IDL interface shall be mapped to a child package of the package associated with its) 135 450.18 T
(enclosing name scope, if any) 135 438.18 T
(, or to a root library package, if there is no enclosing name) 261.68 438.18 T
(scope. This \322interface package\323 shall de\336ne a new controlled tagged type, with name) 135 426.18 T
(\322) 135 414.18 T
6 F
(Ref) 139.88 414.18 T
3 F
(\323, used to represent object references for the mapped interface. This reference type) 159.68 414.18 T
(shall be derived from an implementation-speci\336c type called \322) 135 402.18 T
6 F
(Corba.Object.Ref) 409.34 402.18 T
3 F
(\323 or) 514.94 402.18 T
(from its parent Ref type as speci\336ed in \322Interfaces and Inheritance\323 on page) 135 390.18 T
(26.) 471.93 390.18 T
0 8 Q
(2) 54 372.18 T
3 11 Q
(The names of constant, exception, and interface declarations scoped within interfaces map) 135 372.18 T
(directly to Ada names.) 135 360.18 T
2 12 Q
(4.5.1) 99.58 333.51 T
(Object Reference T) 135 333.51 T
(ypes) 243.48 333.51 T
0 8 Q
(1) 54 316.18 T
3 11 Q
-0.11 (The use of an interface type in IDL denotes an object reference. Each IDL interface shall be) 135 316.18 P
-0.07 (mapped to an Ada controlled type. For interface) 135 304.18 P
6 F
-0.17 (A) 348.57 304.18 P
3 F
-0.07 (, the object reference type shall be named) 355.17 304.18 P
6 F
(A.Ref) 135 292.18 T
3 F
( \050type) 168 292.18 T
6 F
(Ref) 196.1 292.18 T
3 F
( in package) 215.9 292.18 T
6 F
(A) 268.75 292.18 T
3 F
(\051. All reference types shall be part of) 275.35 292.18 T
6 F
(CORBA.Object.Ref\325class) 135 280.18 T
3 F
(, i.e. they are derived from) 280.2 280.18 T
6 F
(CORBA.Object.Ref) 399.64 280.18 T
3 F
(or one) 505.24 280.18 T
(of its descendants.) 135 268.18 T
0 8 Q
(2) 54 250.18 T
3 11 Q
(The IDL interface operations are de\336ned as primitive operations of the Ada controlled) 135 250.18 T
(tagged type,) 135 238.18 T
6 F
(Ref) 191.52 238.18 T
3 F
(. For example, if an interface de\336nes an operation called) 211.32 238.18 T
6 F
(Op) 461.81 238.18 T
3 F
( with no) 475.01 238.18 T
(parameters and) 135 226.18 T
6 F
(My_Ref) 204.64 226.18 T
3 F
( is a reference to the interface type, then a call would be written) 244.24 226.18 T
6 F
(A.Op\050My_Ref\051) 135 214.18 T
3 F
(.) 214.2 214.18 T
0 8 Q
(3) 54 196.18 T
3 11 Q
(The) 135 196.18 T
6 F
(Ref) 154.85 196.18 T
3 F
( controlled tagged type shall automatically release its object reference when it is) 174.65 196.18 T
(deallocated, assigned a new object reference, or it passes out of scope.) 135 184.18 T
0 8 Q
(4) 54 166.18 T
3 11 Q
(A reference type shall be a private type -- i.e., its implementation is not visible to clients.) 135 166.18 T
2 12 Q
(4.5.2) 99.58 139.51 T
(Interfaces and Inheritance) 135 139.51 T
0 8 Q
(1) 54 122.18 T
3 11 Q
-0.16 (The reference type associated with a derived interface will inherit all of the operations of all) 135 122.18 P
(of its parents as follows:) 135 110.18 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 26
%%Page: "27" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Interfaces \050Client-Side Speci\336c\051) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(27) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(2) 72 679.99 T
3 11 Q
(Let) 153 679.99 T
6 F
(C) 170.41 679.99 T
3 F
( be derived from) 177.01 679.99 T
6 F
(P) 252.77 679.99 T
6 8.8 Q
(1) 259.37 677.24 T
6 11 Q
(...P) 264.65 679.99 T
6 8.8 Q
(n) 291.05 677.24 T
3 11 Q
(, where for each) 296.33 679.99 T
6 F
(i) 369.93 679.99 T
3 F
(,) 376.53 679.99 T
6 F
(P) 382.03 679.99 T
6 8.8 Q
(i) 388.63 677.24 T
3 11 Q
( is an interface. Let) 393.91 679.99 T
6 10 Q
(OP) 153 667.99 T
6 8 Q
(1) 165 665.49 T
6 10 Q
(\050P) 169.8 667.99 T
6 8 Q
(i) 181.8 665.49 T
6 10 Q
(\051...OP) 186.6 667.99 T
6 8 Q
(m) 222.6 665.49 T
6 10 Q
(\050P) 227.4 667.99 T
6 8 Q
(i) 239.4 665.49 T
6 10 Q
(\051) 244.2 667.99 T
3 11 Q
( be the operations speci\336ed for) 250.2 667.99 T
6 F
(P) 388.28 667.99 T
6 8.8 Q
(i) 394.88 665.24 T
3 11 Q
(.  Then C's mapping will be a pack-) 400.16 667.99 T
-0.13 (age which will contain an) 153 655.99 P
6 F
-0.31 (OP\050C) 268.14 655.99 P
3 F
-0.13 (\051 for each) 294.54 655.99 P
6 F
-0.31 (OP) 339.04 655.99 P
6 8.8 Q
-0.25 (j) 352.24 653.24 P
6 11 Q
-0.31 (\050P) 357.52 655.99 P
6 8.8 Q
-0.25 (i) 370.72 653.24 P
6 11 Q
-0.31 (\051) 376 655.99 P
3 F
-0.13 ( where) 382.6 655.99 P
6 F
-0.31 (i) 414.71 655.99 P
3 F
-0.13 ( is) 421.32 655.99 P
6 F
-0.31 (2) 433.89 655.99 P
3 F
-0.13 ( to) 440.49 655.99 P
6 F
-0.31 (n) 454.29 655.99 P
3 F
-0.13 (.  The) 460.89 655.99 P
6 F
-0.31 (OP) 488.61 655.99 P
6 8.8 Q
-0.25 (j) 501.81 653.24 P
6 11 Q
-0.31 (\050P) 507.09 655.99 P
6 8.8 Q
-0.25 (1) 520.29 653.24 P
6 11 Q
-0.31 (\051) 525.57 655.99 P
3 F
-0.13 ( oper-) 532.17 655.99 P
(ations are inherited using Ada's inheritance mechanism.) 153 643.99 T
2 12 Q
(4.5.3) 117.58 617.33 T
(Mapping Forward Declarations) 153 617.33 T
0 8 Q
(1) 72 599.99 T
3 11 Q
(In IDL, a forward declaration de\336nes the name of an interface without de\336ning it. This) 153 599.99 T
-0.09 (allows de\336nitions of interfaces that refer to each other) 153 587.99 P
-0.09 (. This presents a challenge to the map-) 389.36 587.99 P
(ping since Ada packages cannot with each other) 153 575.99 T
(. An explicit mapping of forward declara-) 364.09 575.99 T
(tions is de\336ned in order to break this withing problem.) 153 563.99 T
0 8 Q
(2) 72 545.99 T
3 11 Q
-0.16 (Conforming implementations shall provied a generic package,) 153 545.99 P
6 F
-0.38 (CORBA.Forward) 428.68 545.99 P
3 F
-0.16 (, with the) 514.48 545.99 P
(following speci\336cation  that will be used in the mapping of forward declarations.) 153 533.99 T
0 8 Q
(3) 72 287.99 T
3 11 Q
(An instantiation of) 153 287.99 T
6 F
(CORBA.Forward) 238.25 287.99 T
3 F
( shall be performed for every forward declaration of) 324.05 287.99 T
(an interface. The name of the instantiation shall be the interface name appended by) 153 275.99 T
-0.21 (\322) 153 263.99 P
6 F
-0.5 (_Forward) 157.88 263.99 P
3 F
-0.21 (\323. All references to the forward declared interface before the full declaration of) 210.68 263.99 P
(the interface shall be mapped to the) 153 251.99 T
6 F
(Ref) 312.16 251.99 T
3 F
( type in this instantiated package.) 331.96 251.99 T
0 8 Q
(4) 72 233.99 T
3 11 Q
-0.14 (W) 153 233.99 P
-0.14 (ithin the full declaration of the forward declared interface, the nested) 162.94 233.99 P
6 F
-0.33 (Convert) 466.89 233.99 P
3 F
-0.14 (package) 519.35 233.99 P
(shall be instantiated with the actual) 153 221.99 T
6 F
(Ref) 310.65 221.99 T
3 F
( type. The name of the instantiation shall be) 330.45 221.99 T
6 F
(Convert_Forward) 153 209.99 T
3 F
(. Implementations of the contained) 252 209.99 T
6 F
(To_Forward) 407.82 209.99 T
3 F
( and) 473.82 209.99 T
6 F
(To_Ref) 495.2 209.99 T
3 F
( sub-) 534.8 209.99 T
(programs shall allow clients of the forward declaration package to convert freely from the) 153 197.99 T
(actual) 153 185.99 T
6 F
(Ref) 182.02 185.99 T
3 F
( to the forward) 201.82 185.99 T
6 F
(Ref) 269.63 185.99 T
3 F
( and vice versa. Clients holding an instance of a valid refer-) 289.43 185.99 T
(ence for an interface will have to convert those references to the corresponding forward ref-) 153 173.99 T
(erences for references mapped before the actual interface declaration.) 153 161.99 T
2 12 Q
(4.5.4) 117.58 135.33 T
(Object Reference Operations) 153 135.33 T
0 8 Q
(1) 72 117.99 T
3 11 Q
-0.43 (CORBA de\336nes three operations an any object reference: duplicate, release, and is_nil. Note) 153 117.99 P
-0.31 (that these operations are on the object reference, not the object implementation. Conforming) 153 105.99 P
-0.14 (implementations shall provide these operations as follows. The Duplicate operation shall be) 153 93.99 P
6 9 Q
(with Corba.Object;) 159 510.33 T
(generic) 159 495.33 T
(package Corba.Forward is) 159 484.33 T
(    type Ref is private;) 159 473.33 T
(    generic) 159 458.33 T
(        type Ref_Type is) 159 447.33 T
(            abstract new Corba.Object.Ref with private;) 159 436.33 T
(    package Convert is) 159 425.33 T
(        function To_Ref) 159 414.33 T
(               \050The_Forward : in Forward.Ref\051) 159 403.33 T
(           return Ref_Type\325Class;) 159 392.33 T
(        function To_Forward) 159 381.33 T
(               \050The_Ref : in Ref_Type\325Class\051) 159 370.33 T
(           return Ref;) 159 359.33 T
(    end Convert;) 159 348.33 T
(private) 159 337.33 T
(    type Ref is new Corba.Object.Ref with null record;) 159 326.33 T
(end Corba.Forward;) 159 315.33 T
153 520.08 153 310.58 2 L
V
0.5 H
0 Z
N
495 520.08 495 310.58 2 L
V
N
152.75 520.33 495.25 520.33 2 L
V
N
152.75 310.33 495.25 310.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 27
%%Page: "28" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Interfaces \050Client-Side Speci\336c\051) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(28) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
3 11 Q
(provided by assignment in the Ada language. The other two operations shall be provided in) 135 679.99 T
(the pre-de\336ned package CORBA.Object \050see Section) 135 667.99 T
(5.10 on page) 371.75 667.99 T
(56\051 as follows:) 431.02 667.99 T
6 9 Q
(-- Duplicate unneeded, use assignment) 153 651.33 T
(function Is_Nil\050Self : Ref\051 return Boolean;) 153 631.33 T
(procedure Release\050Self : Ref\325CLASS\051;) 153 611.33 T
0 8 Q
(2) 54 583.99 T
3 11 Q
-0.13 (The) 135 583.99 P
6 F
-0.31 (Release) 154.73 583.99 P
3 F
-0.13 ( procedure indicates that the caller will no longer access the reference so that) 200.93 583.99 P
-0.25 (associated resources may be deallocated. If the given object reference is nil,) 135 571.99 P
6 F
-0.6 (Release) 468.64 571.99 P
3 F
-0.25 ( does) 514.84 571.99 P
-0.05 (nothing. The) 135 559.99 P
6 F
-0.13 (Is_Nil) 193.87 559.99 P
3 F
-0.05 ( operation returns) 233.46 559.99 P
6 F
-0.13 (True) 313.65 559.99 P
3 F
-0.05 ( if the object reference contains an empty ref-) 340.05 559.99 P
(erence.) 135 547.99 T
2 12 Q
(4.5.5) 99.58 521.33 T
(W) 135 521.33 T
(idening Object References) 146.22 521.33 T
0 8 Q
(1) 54 503.99 T
3 11 Q
-0.02 (W) 135 503.99 P
-0.02 (idening of tagged types is supported by Ada through explicit type conversion and, implic-) 144.94 503.99 P
-0.35 (itly) 135 491.99 P
-0.35 (, through parameter passing and assignment. Any object reference may be widened to the) 148.96 491.99 P
(base type) 135 479.99 T
6 F
(CORBA.Object.Ref) 178.99 479.99 T
3 F
(using Ada syntax. W) 291.19 479.99 T
(idening using Ada syntax is sup-) 383.02 479.99 T
-0.08 (ported for object references in the \322primary line of descent\323 of a particular object reference.) 135 467.99 P
-0.27 (The primary line of descent of an object reference consists of its single or \336rst-named parent) 135 455.99 P
(and, recursively) 135 443.99 T
(, their single or \336rst-named parents.) 204.54 443.99 T
0 8 Q
(2) 54 425.99 T
3 11 Q
(For each object reference,) 135 425.99 T
6 F
(C) 251.97 425.99 T
3 F
(, with multiple parents, conforming implementations shall gen-) 258.57 425.99 T
(erate, for each parent P) 135 413.99 T
3 8.8 Q
(i) 236.71 411.24 T
3 11 Q
(, except P) 239.15 413.99 T
3 8.8 Q
(1) 282.23 411.24 T
3 11 Q
(, a "widening" operation with speci\336cation:) 286.63 413.99 T
6 10 Q
(function To_Pi \050Self : C.Ref\051 return Pi.Ref'CLASS;) 153 396.66 T
2 12 Q
(4.5.6) 99.58 370.33 T
(Narrowing Object References) 135 370.33 T
0 8 Q
(1) 54 352.99 T
3 11 Q
(Often it is necessary to convert an object reference from a more general type to a more spe-) 135 352.99 T
-0.26 (ci\336c, derived type. In particular) 135 340.99 P
-0.26 (, the root object reference IDL type Object must often be nar-) 272.21 340.99 P
-0.05 (rowed to a speci\336c interface object reference type. Object reference narrowing may involve) 135 328.99 P
(the ORB so a special primitive subprogram is included in each interface package to check) 135 316.99 T
(the narrowing operation at run-time.) 135 304.99 T
0 8 Q
(2) 54 286.99 T
3 11 Q
(Each interface mapping shall include a function with speci\336cation:) 135 286.99 T
6 10 Q
(function To_) 153 269.66 T
7 F
(interface) 225 269.66 T
6 F
(\050The_Ref : in CORBA.Object.Ref\325class\051) 279 269.66 T
(    return) 153 258.66 T
7 F
(interface) 219 258.66 T
6 F
(.Ref;) 273 258.66 T
0 8 Q
(3) 54 240.99 T
3 11 Q
(where) 135 240.99 T
7 F
(interface) 164.62 240.99 T
3 F
( is mapped from the interface name.The provided implementation shall) 224.02 240.99 T
(be able to narrow any ancestor of the interface, regardless of whether the ancestor was) 135 228.99 T
(de\336ned through single or multiple inheritance. If) 135 216.99 T
6 F
(The_Ref) 351.92 216.99 T
3 F
( cannot be narrowed to the) 398.12 216.99 T
(desired interface, this function shall raise) 135 204.99 T
6 F
(Constraint_Error) 318.6 204.99 T
3 F
(.) 423.6 204.99 T
2 12 Q
(4.5.7) 99.58 178.33 T
(Nil Object Reference) 135 178.33 T
0 8 Q
(1) 54 160.99 T
3 11 Q
-0.12 (ORBs are required to de\336ne a special value of each object reference that identi\336es an object) 135 160.99 P
(reference that has not been given a valid value. Conceptually this is the \322nil\323 value. This) 135 148.99 T
(mapping relies on the Is_Nil function to detect uninitialized object references, and does) 135 136.99 T
(require or allow de\336nition of a Nil constant.) 135 124.99 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 28
%%Page: "29" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Interfaces \050Client-Side Speci\336c\051) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(29) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
2 12 Q
(4.5.8) 117.58 679.33 T
(T) 153 679.33 T
(ype Object) 159.44 679.33 T
0 8 Q
(1) 72 661.99 T
3 11 Q
(Each occurrence of pre-de\336ned type Object shall be mapped to) 153 661.99 T
6 F
(CORBA.Object.Ref\325class) 153 649.99 T
3 F
(.) 298.2 649.99 T
0 8 Q
(2) 72 631.99 T
3 11 Q
(T) 153 631.99 T
(ype Object is a full \050non-pseudo\051 object type. However) 158.95 631.99 T
(, because it is the pre-de\336ned root) 400.76 631.99 T
(type for the Object class, its implementation does not conform to the mapping rules for) 153 619.99 T
(interfaces and its implementation is left unspeci\336ed. See Section) 153 607.99 T
(5.10 on page) 439.58 607.99 T
(56 for more) 498.85 607.99 T
(information.) 153 595.99 T
2 12 Q
(4.5.9) 117.58 569.33 T
(Interface Mapping Examples) 153 569.33 T
0 8 Q
(1) 72 551.99 T
3 11 Q
(Assuming that a pragma is supported for de\336ning subsystems, the following IDL speci\336ca-) 153 551.99 T
(tion:) 153 539.99 T
0 8 Q
(2) 72 320.99 T
3 11 Q
(is mapped to these Ada packages:) 153 320.99 T
2 8 Q
(File barn.idl) 159 513.99 T
6 9 Q
(typedef long measure;) 159 499.33 T
(interface Feed {) 159 488.33 T
(    attribute measure weight;) 159 477.33 T
(};) 159 466.33 T
(interface Animal {) 159 455.33 T
(    enum State {SLEEPING, AWAKE};) 159 444.33 T
(    boolean eat\050inout Feed bag\051;) 159 433.33 T
(    // returns true if animal is full) 159 422.33 T
(    attribute State alertness;) 159 411.33 T
(};) 159 400.33 T
(interface Horse: Animal{) 159 385.33 T
(    void trot\050in short distance\051;) 159 374.33 T
(};) 159 363.33 T
(pragma Subsystem\050\322Example1\323\051;) 159 348.33 T
(with Corba;) 159 297.33 T
(package Example1.Barn_IDL_FILE is) 159 282.33 T
(type Measure is new Corba.Long;) 175.2 271.33 T
(end Example1.Barn_IDL_FILE;) 159 260.33 T
(with Corba;) 159 231.33 T
(with Corba.Object;) 159 220.33 T
(with Example1.Barn_IDL_FILE;) 159 209.33 T
(package Example1.Feed is) 159 194.33 T
(    type Ref is new Corba.Object.Ref with null record;) 159 183.33 T
(    procedure Set_Weight) 159 172.33 T
(        \050Self : in Ref;) 159 161.33 T
(         To   : in Example1.Barn_IDL_FILE.Measure\051;) 159 150.33 T
(    function Weight_Of) 159 139.33 T
-0.37 (        \050Self : in Ref\051 return Example1.Barn_IDL_FILE.Measure;) 159 128.33 P
(    function To_Feed\050The_Ref : in CORBA.Object.Ref\325class\051) 159 117.33 T
(        return Ref;) 159 106.33 T
(end Example1.Feed;) 159 95.33 T
153 526.08 153 343.58 2 L
V
0.5 H
0 Z
N
396 526.08 396 343.58 2 L
V
N
152.75 526.33 396.25 526.33 2 L
V
N
152.75 509.33 396.25 509.33 2 L
V
2 H
N
152.75 343.33 396.25 343.33 2 L
V
0.5 H
N
153 307.08 153 255.58 2 L
V
N
495 307.08 495 255.58 2 L
V
N
152.75 307.33 495.25 307.33 2 L
V
N
152.75 255.33 495.25 255.33 2 L
V
N
153 241.08 153 90.58 2 L
V
N
495 241.08 495 90.58 2 L
V
N
152.75 241.33 495.25 241.33 2 L
V
N
152.75 90.33 495.25 90.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 29
%%Page: "30" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Interfaces \050Client-Side Speci\336c\051) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(30) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(3) 54 327.99 T
0 0 0 1 0 0 0 K
3 12 Q
-0.09 (The following) 135 327.99 P
0 0 0 1 0 0 0 K
3 11 Q
-0.08 (illustrates the use of the forward reference mapping to  resolve circular de\336-) 206.15 327.99 P
(nitions.) 135 315.99 T
0 8 Q
(4) 54 297.99 T
3 11 Q
(Consider the two \336les:) 135 297.99 T
6 9 Q
(with Corba.Object;) 141 677.33 T
(with Example1.Feed;) 141 666.33 T
(package Example1.Animal is) 141 651.33 T
(    type Ref is new Corba.Object.Ref with null record;) 141 640.33 T
(    type State is \050SLEEPING, AWAKE\051;) 141 629.33 T
(    procedure Eat) 141 618.33 T
(        \050Self    : in     Ref;) 141 607.33 T
(         Bag     : in out Example1.Feed.Ref\325CLASS;) 141 596.33 T
(         Returns :    out Boolean\051;) 141 585.33 T
(    -- returns true if animal is full) 141 574.33 T
(    procedure Set_Alertness) 141 563.33 T
(        \050Self : in Ref;) 141 552.33 T
(         To   : in State\051;) 141 541.33 T
(    function Alertness_Of) 141 530.33 T
(        \050Self : in Ref\051 return State;) 141 519.33 T
(    function To_Animal\050The_Ref : in CORBA.Object.Ref\325class\051) 141 508.33 T
(        return Ref;) 141 497.33 T
(end Example1.Animal;) 141 486.33 T
(with Example1.Animal;) 141 457.33 T
(package Example1.Horse is) 141 442.33 T
(    type Ref is new Example1.Animal.Ref with null record;) 141 431.33 T
(    subtype State is Example1.Animal.State;) 141 420.33 T
(    procedure Trot) 141 409.33 T
(        \050Self     : in Ref;) 141 398.33 T
(         Distance : in Corba.Short\051;) 141 387.33 T
(    function To_Horse\050The_Ref : in CORBA.Object.Ref\325class\051) 141 376.33 T
(        return Ref;) 141 365.33 T
(end Example1.Horse;) 141 354.33 T
2 8 Q
(File chicken.idl:) 141 271.99 T
(File egg.idl:) 303 271.99 T
6 9 Q
(#ifndef CHICKEN) 141 257.33 T
(#def) 141 246.33 T
(ine CHICKEN) 162.6 246.33 T
(interface Chicken;) 141 235.33 T
(#include <egg.idl>) 141 224.33 T
(interface Chicken {) 141 213.33 T
(    Egg lay\050\051;) 141 202.33 T
(};) 141 191.33 T
(#endif) 141 180.33 T
(#ifndef EGG) 303 257.33 T
(#def) 303 246.33 T
(ine EGG) 324.6 246.33 T
(interface Egg;) 303 235.33 T
(#include <chicken.idl>) 303 224.33 T
(interface Egg {) 303 213.33 T
(    Chicken hatch\050\051;) 303 202.33 T
(};) 303 191.33 T
(#endif) 303 180.33 T
135 687.08 135 481.58 2 L
V
0.5 H
0 Z
N
477 687.08 477 481.58 2 L
V
N
134.75 687.33 477.25 687.33 2 L
V
N
134.75 481.33 477.25 481.33 2 L
V
N
135 467.08 135 349.58 2 L
V
N
477 467.08 477 349.58 2 L
V
N
134.75 467.33 477.25 467.33 2 L
V
N
134.75 349.33 477.25 349.33 2 L
V
N
135 284.08 135 175.58 2 L
V
N
297 284.58 297 175.08 2 L
V
N
459 284.08 459 175.58 2 L
V
N
134.75 284.33 459.25 284.33 2 L
V
N
134.75 267.33 459.25 267.33 2 L
V
2 H
N
134.75 175.33 459.25 175.33 2 L
V
0.5 H
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 30
%%Page: "31" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Interfaces \050Client-Side Speci\336c\051) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(31) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(5) 72 679.99 T
3 11 Q
(This use of IDL presents a dif) 153 679.99 T
(\336cult problem for the Ada mapping since two Ada packages) 284.16 679.99 T
(cannot \322with\323 each other) 153 667.99 T
(. The solution is to de\336ne the operations in each interface in terms) 262.05 667.99 T
(of a \322forward\323 type. Thus, the circularity can be resolved:) 153 655.99 T
6 9 Q
(package Chicken_IDL_FILE is) 159 632.33 T
(end Chicken_IDL_FILE;) 159 610.33 T
(with Corba.Forward;) 159 581.33 T
(package Chicken_Forward is new Corba.Forward;) 159 566.33 T
(with Corba.Forward;) 159 537.33 T
(package Egg_Forward is new Corba.Forward;) 159 522.33 T
(with Corba.Object;) 159 493.33 T
(with Chicken_Forward;) 159 482.33 T
(package Egg is) 159 467.33 T
(    type Ref is new Corba.Object.Ref with null record;) 159 456.33 T
(    function Hatch \050Self : in Ref\051) 159 445.33 T
(return Chicken_Forward.Ref\325class;) 267 434.33 T
(package Convert is new Egg_Forward.Convert\050Ref\051;) 180.6 423.33 T
(    function To_Egg\050The_Ref : in CORBA.Object.Ref\325class\051) 159 412.33 T
(        return Ref;) 159 401.33 T
(end Egg;) 159 390.33 T
(with Corba.Object;) 159 361.33 T
(with Egg;) 159 350.33 T
(package Chicken is) 159 335.33 T
(    type Ref is new Corba.Object.Ref with null record;) 159 324.33 T
(    function Lay) 159 313.33 T
(        \050Self : in Ref\051 return Egg.Ref\325CLASS;) 159 302.33 T
(    package Convert is new Chicken_Forward.Convert\050Ref\051;) 159 291.33 T
(    function To_Chicken\050The_Ref : in CORBA.Object.Ref\325class\051) 159 280.33 T
(        return Ref;) 159 269.33 T
(end Chicken;) 159 258.33 T
153 642.08 153 605.58 2 L
V
0.5 H
0 Z
N
495 642.08 495 605.58 2 L
V
N
152.75 642.33 495.25 642.33 2 L
V
N
152.75 605.33 495.25 605.33 2 L
V
N
153 591.08 153 561.58 2 L
V
N
495 591.08 495 561.58 2 L
V
N
152.75 591.33 495.25 591.33 2 L
V
N
152.75 561.33 495.25 561.33 2 L
V
N
153 547.08 153 517.58 2 L
V
N
495 547.08 495 517.58 2 L
V
N
152.75 547.33 495.25 547.33 2 L
V
N
152.75 517.33 495.25 517.33 2 L
V
N
153 503.08 153 385.58 2 L
V
N
495 503.08 495 385.58 2 L
V
N
152.75 503.33 495.25 503.33 2 L
V
N
152.75 385.33 495.25 385.33 2 L
V
N
153 371.08 153 253.58 2 L
V
N
495 371.08 495 253.58 2 L
V
N
152.75 371.33 495.25 371.33 2 L
V
N
152.75 253.33 495.25 253.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 31
%%Page: "32" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Interfaces \050Client-Side Speci\336c\051) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(32) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(6) 54 679.99 T
3 11 Q
(The following example includes mapping of multiple inheritance. The following IDL:) 135 679.99 T
0 8 Q
(7) 54 466.99 T
3 11 Q
(produces the following Ada code:) 135 466.99 T
6 9 Q
(        interface Asset {) 141 656.33 T
(            ...) 141 645.33 T
(            void op1 ...) 141 634.33 T
(            void op2 ...) 141 623.33 T
(            ...) 141 612.33 T
(        }) 141 601.33 T
(        interface Vehicle {) 141 586.33 T
(            ...) 141 575.33 T
(            void op3 ...) 141 564.33 T
(            void op4 ...) 141 553.33 T
(            ...) 141 542.33 T
(        }) 141 531.33 T
(        interface Tank : Vehicle, Asset {) 141 516.33 T
(           ...) 141 505.33 T
(        }) 141 494.33 T
(with Corba;) 141 443.33 T
(package Asset is) 141 432.33 T
(    type Ref is new Corba.Object.Ref with null record;) 141 421.33 T
(    procedure op1 \050Self : Ref\051;) 141 406.33 T
(    procedure op2 \050Self : Ref\051;) 141 395.33 T
(    function To_Asset  \050Self : CORBA.Object.Ref\325class\051) 141 380.33 T
(        return Ref'CLASS;) 141 369.33 T
(end Asset;) 141 354.33 T
(with Corba;) 141 325.33 T
(package Vehicle is) 141 314.33 T
(    type Ref is new Corba.Object.Ref with null record;) 141 299.33 T
(    procedure op3 \050Self : Ref\051;) 141 284.33 T
(    procedure op4 \050Self : Ref\051;) 141 273.33 T
(    function To_Vehicle  \050Self : CORBA.Object.Ref\325class\051) 141 258.33 T
(        return Ref'CLASS;) 141 247.33 T
(end Vehicle;) 141 232.33 T
135 666.08 135 489.58 2 L
V
0.5 H
0 Z
N
477 666.08 477 489.58 2 L
V
N
134.75 666.33 477.25 666.33 2 L
V
N
134.75 489.33 477.25 489.33 2 L
V
N
135 453.08 135 349.58 2 L
V
N
477 453.08 477 349.58 2 L
V
N
134.75 453.33 477.25 453.33 2 L
V
N
134.75 349.33 477.25 349.33 2 L
V
N
135 335.08 135 227.58 2 L
V
N
477 335.08 477 227.58 2 L
V
N
134.75 335.33 477.25 335.33 2 L
V
N
134.75 227.33 477.25 227.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 32
%%Page: "33" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(33) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
72 515.92 558 521.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 519.13 467.34 519.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 519.13 143.58 519.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.6) 125.93 525.66 T
(Mapping for T) 153 525.66 T
(ypes) 237.98 525.66 T
0 8 Q
(1) 72 498.59 T
3 11 Q
(IDL is a typed language, but weakly typed. The following subsections specify the mapping) 153 498.59 T
(of IDL types to corresponding Ada types.) 153 486.59 T
2 12 Q
(4.6.1) 117.58 459.92 T
(Ada T) 153 459.92 T
(ype Size Requirements) 185.45 459.92 T
0 8 Q
(1) 72 442.59 T
3 11 Q
-0.01 (The sizes of the Ada types used to represent IDL types are implementation dependent. That) 153 442.59 P
(is, this mapping makes no requirements as to the T\325SIZE for anything except arithmetic) 153 430.59 T
(types \050Section) 153 418.59 T
(4.6.2 on page) 218.38 418.59 T
(33\051 and string \050Section) 280.4 418.59 T
(9 on page) 383.67 418.59 T
(38\051.) 429.19 418.59 T
2 12 Q
(4.6.2) 117.58 391.92 T
(Mapping for Arithmetic T) 153 391.92 T
(ypes) 294.12 391.92 T
0 8 Q
(1) 72 374.59 T
3 11 Q
(Several basic arithmetic types are de\336ned in IDL. These types shall be mapped to Ada) 153 374.59 T
(\050sub\051types. They may) 153 362.59 T
(, through the use of size representation clauses and other means, be) 247.91 362.59 T
(mapped to types with the same physical representation as that de\336ned for the \322C\323 language) 153 350.59 T
-0.34 (mapping. The following Ada types shall be de\336ned in the package \322) 153 338.59 P
6 F
-0.81 (CORBA) 448.7 338.59 P
3 F
-0.34 (\323 with correspon-) 481.7 338.59 P
(dence to IDL types:) 153 326.59 T
6 9 Q
(with Corba;) 159 677.33 T
(with Vehicle, Asset;) 159 666.33 T
(package Tank is) 159 655.33 T
(    type Ref is new Vehicle.Ref with null record;) 159 640.33 T
(    function To_Asset \050Self : Ref\051 return Asset.Ref'CLASS;) 159 625.33 T
(    function To_Tank  \050Self : CORBA.Object.Ref\325class\051) 159 614.33 T
(        return Ref'CLASS;) 159 603.33 T
(    procedure op3 \050Self : Ref\051;) 159 588.33 T
(    procedure op4 \050Self : Ref\051;) 159 577.33 T
(end Tank;) 159 562.33 T
2 8 Q
(Ada T) 159 304.59 T
(ype) 180.63 304.59 T
(IDL T) 236 304.59 T
(ype) 255.41 304.59 T
(Required Range and Representation) 306.58 304.59 T
3 10 Q
(Short) 159 289.25 T
(short) 236 289.25 T
(integer, range -\0502**15\051 .. \0502**15 - 1\051) 306.58 289.25 T
(Long) 159 273.25 T
(long) 236 273.25 T
(integer, range -\0502**31\051 .. \0502**31 - 1\051) 306.58 273.25 T
(Unsigned_Short) 159 257.25 T
-0.03 (unsigned short) 236 257.25 P
(integer, range 0 .. \0502**16 - 1\051) 306.58 257.25 T
(Unsigned_Long) 159 241.25 T
(unsigned long) 236 241.25 T
(integer, range 0 .. \0502**32 - 1\051) 306.58 241.25 T
(Float) 159 225.25 T
(float) 236 225.25 T
(floating point, ANSI/IEEE 754-1985) 306.58 225.25 T
(single precision) 306.58 213.25 T
(Double) 159 197.25 T
(double) 236 197.25 T
(floating point, ANSI/IEEE 754-1985) 306.58 197.25 T
(double precision) 306.58 185.25 T
(Char) 159 169.25 T
(char) 236 169.25 T
(8 bit ISO Latin-1 \0508859.1\051 character set) 306.58 169.25 T
(Octet) 159 153.25 T
(octet) 236 153.25 T
(integer, must include 0 .. 255) 306.58 153.25 T
153 687.08 153 557.58 2 L
V
0.5 H
0 Z
N
495 687.08 495 557.58 2 L
V
N
152.75 687.33 495.25 687.33 2 L
V
N
152.75 557.33 495.25 557.33 2 L
V
N
153 316.67 153 148.17 2 L
V
N
230 317.17 230 147.67 2 L
V
0.25 H
N
300.58 317.17 300.58 147.67 2 L
V
N
500 316.67 500 148.17 2 L
V
0.5 H
N
152.75 316.92 500.25 316.92 2 L
V
N
152.75 299.92 500.25 299.92 2 L
V
2 H
N
152.75 283.92 500.25 283.92 2 L
V
0.25 H
N
152.75 267.92 500.25 267.92 2 L
V
N
152.75 251.92 500.25 251.92 2 L
V
N
152.75 235.92 500.25 235.92 2 L
V
N
152.75 207.92 500.25 207.92 2 L
V
N
152.75 179.92 500.25 179.92 2 L
V
N
152.75 163.92 500.25 163.92 2 L
V
N
152.75 147.92 500.25 147.92 2 L
V
0.5 H
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 33
%%Page: "34" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(34) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(2) 54 679.99 T
3 11 Q
(If supported and the supported representations conform to the requirements above, the fol-) 135 679.99 T
(lowing declarations should be used:) 135 667.99 T
2 9 Q
(\310 NOTE) 126 493.66 T
3 10 Q
(Use of the corresponding Interfaces.C types may not meet the requirements.) 189 493.66 T
4 F
-0.26 (Rationale: Pr) 135 469.66 P
-0.26 (ovides straightforwar) 189.09 469.66 P
-0.26 (d and almost universally supported de\336nitions for types. However) 274.86 469.66 P
-0.26 (,) 535.26 469.66 P
(since support for wor) 135 457.66 T
(d sizes and ANSI/IEEE 754-1985 is not universal, these de\336nitions cannot be) 220.47 457.66 T
(mandated. This drives us to de\336ne the types in a well-known package.) 135 445.66 T
2 12 Q
(4.6.3) 99.58 418.33 T
(Mapping for Boolean T) 135 418.33 T
(ype) 264.12 418.33 T
0 8 Q
(1) 54 400.99 T
3 11 Q
-0.05 (The IDL boolean type shall be mapped to the CORBA Boolean type. The package CORBA) 135 400.99 P
-0.06 (will contain the de\336nition of CORBA.Boolean as a subtype of Standard.Boolean as follows:) 135 388.99 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(2) 54 337.99 T
3 11 Q
(For example, the following IDL de\336nition:) 135 337.99 T
0 8 Q
(3) 54 286.99 T
3 11 Q
(will map to:) 135 286.99 T
4 10 Q
(Rationale: Although a subtype of Boolean may not be allowed to have a size attribute de\336nition) 135 236.66 T
(clause,implementations that wish to r) 135 224.66 T
(etain binary compatibility with a \322C\323 language mapping may) 284.36 224.66 T
(use\325) 135 212.66 T
(the \324pos and \324val attributes.) 150.55 212.66 T
2 12 Q
(4.6.4) 99.58 185.33 T
(Mapping for Enumeration T) 135 185.33 T
(ypes) 290.12 185.33 T
0 8 Q
(1) 54 167.99 T
3 11 Q
(An IDL enum type shall map directly to an Ada enumerated type with name mapped from) 135 167.99 T
-0.04 (the IDL identi\336er and values identical to and in the order of the IDL member list. For exam-) 135 155.99 P
(ple, the IDL enumeration declaration:) 135 143.99 T
2 8 Q
(Ada T) 141 645.99 T
(ype) 162.63 645.99 T
(De\336nition) 255 645.99 T
3 10 Q
(CORBA.Short) 141 630.66 T
(type Short is new Interfaces.Integer_16;) 255 630.66 T
(CORBA.Long) 141 614.66 T
(type Long is new Interfaces.Integer_32;) 255 614.66 T
(CORBA.Unsigned_Short) 141 598.66 T
(type Unsigned_Short is new Interfaces.Unsigned_16;) 255 598.66 T
(CORBA.Unsigned_Long) 141 582.66 T
(type Unsigned_Long is new Interfaces.Unsigned_32;) 255 582.66 T
(CORBA.Float) 141 566.66 T
(type Float is new Interfaces.IEEE_Float_32;) 255 566.66 T
(CORBA.Double) 141 550.66 T
(type Double is new Interfaces.IEEE_Float_64;) 255 550.66 T
(CORBA.Char) 141 534.66 T
(subtype Char is Standard.Character;) 255 534.66 T
(CORBA.Octet) 141 518.66 T
(type Octet is new Interfaces.Unsigned_8;) 255 518.66 T
6 9 Q
(subtype Boolean is Standard.Boolean;) 141 365.33 T
(typedef boolean Result_Flag;) 141 314.33 T
-0.3 (type Result_Flag is new CORBA.Boolean;) 141 263.33 P
(enum Color {Red, Green, Blue};) 141 120.33 T
135 658.08 135 513.58 2 L
V
0.5 H
0 Z
N
249 658.58 249 513.08 2 L
V
0.25 H
N
501 658.08 501 513.58 2 L
V
0.5 H
N
134.75 658.33 501.25 658.33 2 L
V
N
134.75 641.33 501.25 641.33 2 L
V
2 H
N
134.75 625.33 501.25 625.33 2 L
V
0.25 H
N
134.75 609.33 501.25 609.33 2 L
V
N
134.75 593.33 501.25 593.33 2 L
V
N
134.75 577.33 501.25 577.33 2 L
V
N
134.75 561.33 501.25 561.33 2 L
V
N
134.75 545.33 501.25 545.33 2 L
V
N
134.75 529.33 501.25 529.33 2 L
V
N
134.75 513.33 501.25 513.33 2 L
V
0.5 H
N
135 375.08 135 360.58 2 L
V
N
351 375.08 351 360.58 2 L
V
N
134.75 375.33 351.25 375.33 2 L
V
N
134.75 360.33 351.25 360.33 2 L
V
N
135 324.08 135 309.58 2 L
V
N
351 324.08 351 309.58 2 L
V
N
134.75 324.33 351.25 324.33 2 L
V
N
134.75 309.33 351.25 309.33 2 L
V
N
135 273.08 135 258.58 2 L
V
N
351 273.08 351 258.58 2 L
V
N
134.75 273.33 351.25 273.33 2 L
V
N
134.75 258.33 351.25 258.33 2 L
V
N
135 130.08 135 115.58 2 L
V
N
342 130.08 342 115.58 2 L
V
N
134.75 130.33 342.25 130.33 2 L
V
N
134.75 115.33 342.25 115.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 34
%%Page: "35" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(35) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(2) 72 679.99 T
3 11 Q
(has the following mapping:) 153 679.99 T
4 10 Q
(Rationale: obvious.) 153 629.66 T
2 12 Q
(4.6.5) 117.58 602.33 T
(Mapping for Structure T) 153 602.33 T
(ypes) 288.12 602.33 T
0 8 Q
(1) 72 584.99 T
3 11 Q
(An IDL struct type shall map directly to an Ada record type with type name mapped from) 153 584.99 T
(the struct identi\336er and each component formed from each declarator in the member list as) 153 572.99 T
(follows:) 153 560.99 T
0 8 Q
(2) 72 542.99 T
(\245) 153 542.99 T
3 11 Q
(If the declarator is a simple_declarator) 171 542.99 T
(, the component name shall be mapped from the) 340.09 542.99 T
(identi\336er in the declarator and the type shall be mapped from the type_spec.) 171 530.99 T
0 8 Q
(3) 72 515.99 T
(\245) 153 515.99 T
3 11 Q
(If the declarator is a complex_declarator) 171 515.99 T
(, a preceding type de\336nition shall de\336ne an) 348.64 515.99 T
(array type. The array type name shall be mapped from the identi\336er contained in the) 171 503.99 T
(array_declarator prepended to \322_Array\323. The type de\336nition shall be an array) 171 491.99 T
(, over the) 510.26 491.99 T
-0.14 (range\050s\051 from 0 to one less then the \336xed_array_size\050s\051 speci\336ed in the array declarator) 171 479.99 P
-0.14 (,) 552.65 479.99 P
(of the type mapped from the IDL type contained in the type speci\336cation. If multiple) 171 467.99 T
(bounds are declared, a multiple dimensional array shall be created that preserves the) 171 455.99 T
(indexing order speci\336ed in the IDL declaration. In the component de\336nition, the name) 171 443.99 T
(shall be mapped from the identi\336er contained in the array_declarator and the type shall) 171 431.99 T
(be the array type.) 171 419.99 T
0 8 Q
(4) 72 401.99 T
3 11 Q
(For example, the IDL struct declaration below:) 153 401.99 T
0 8 Q
(5) 72 317.99 T
3 11 Q
(maps to the following:) 153 317.99 T
4 10 Q
(Rationale: Pr) 153 212.66 T
(ovides a straightforwar) 207.35 212.66 T
(d and natural mapping.) 300.88 212.66 T
2 12 Q
(4.6.6) 117.58 185.33 T
(Mapping for Union T) 153 185.33 T
(ypes) 268.78 185.33 T
0 8 Q
(1) 72 167.99 T
3 11 Q
(An IDL union type shall map to an Ada discriminated record type. The type name shall be) 153 167.99 T
(mapped from the IDL identi\336er) 153 155.99 T
(. The discriminant shall be formed with name \322) 291.09 155.99 T
6 F
(Switch) 499.15 155.99 T
3 F
(\323) 538.75 155.99 T
-0.37 (and shall be of type mapped from the IDL switch_type_spec. A variant shall be formed from) 153 143.99 P
(each case contained in the switch_body as follows:) 153 131.99 T
0 8 Q
(2) 72 113.99 T
3 11 Q
(Discrete_choice_list: For case_labels speci\336ed by \322) 153 113.99 T
6 F
(case) 379.98 113.99 T
3 F
(\323 followed by a const_exp, the) 406.39 113.99 T
(const_exp de\336nes a discrete_choice. For the \322) 153 101.99 T
6 F
(default) 354.93 101.99 T
3 F
(\323 case_label, the discrete_choice is) 401.13 101.99 T
6 9 Q
(type Color is \050Red, Green, Blue\051;) 159 656.33 T
(struct Example {) 159 378.33 T
(    long member1, member2;) 159 367.33 T
(    boolean member3[4][8];) 159 356.33 T
(};) 159 345.33 T
(type Member3_Array is array\0500..3, 0..7\051 of Corba.Boolean;) 159 294.33 T
(type Example is record) 159 283.33 T
(    Member1: CORBA.Long;) 159 272.33 T
(    Member2: CORBA.Long;) 159 261.33 T
(    Member3: Member3_Array;) 159 250.33 T
(    end record;) 159 239.33 T
153 666.08 153 651.58 2 L
V
0.5 H
0 Z
N
360 666.08 360 651.58 2 L
V
N
152.75 666.33 360.25 666.33 2 L
V
N
152.75 651.33 360.25 651.33 2 L
V
N
153 388.08 153 340.58 2 L
V
N
342 388.08 342 340.58 2 L
V
N
152.75 388.33 342.25 388.33 2 L
V
N
152.75 340.33 342.25 340.33 2 L
V
N
153 304.08 153 234.58 2 L
V
N
504 304.08 504 234.58 2 L
V
N
152.75 304.33 504.25 304.33 2 L
V
N
152.75 234.33 504.25 234.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 35
%%Page: "36" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(36) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
3 11 Q
(\322) 135 679.99 T
6 F
(others) 139.88 679.99 T
3 F
(\323. If more than one case_label is associated with a case, they shall be \322or\323ed) 179.48 679.99 T
(together) 135 667.99 T
(.) 170.44 667.99 T
0 8 Q
(3) 54 649.99 T
3 11 Q
(V) 135 649.99 T
(ariant component_list: The component_list of each variant shall contain one component) 141.72 649.99 T
-0.17 (formed from the element_spec using the mapping in Section) 135 637.99 P
-0.17 (4.6.5 on page) 402.17 637.99 P
-0.17 (35 \050paragraphs 2) 463.85 637.99 P
(and 3\051 for components.) 135 625.99 T
0 8 Q
(4) 54 607.99 T
3 11 Q
(For example, the IDL union declaration below:) 135 607.99 T
0 8 Q
(5) 54 512.99 T
3 11 Q
(maps to the following:) 135 512.99 T
4 10 Q
(Rationale: Pr) 135 363.66 T
(ovides a straightforwar) 189.35 363.66 T
(d and natural mapping.) 282.88 363.66 T
2 12 Q
(4.6.7) 99.58 336.33 T
(Mapping for Sequence T) 135 336.33 T
(ypes) 273.47 336.33 T
0 8 Q
(1) 54 318.99 T
3 11 Q
(T) 135 318.99 T
(wo template types are prede\336ned:) 140.95 318.99 T
6 F
(sequence) 292.17 318.99 T
3 F
( and) 344.97 318.99 T
6 F
(string) 366.35 318.99 T
3 F
(. IDL de\336nes a sequence as a) 405.95 318.99 T
-0.27 (\322one-dimensional array with two characteristics: a maximum size \050which is \336xed at compile) 135 306.99 P
(time\051 and a length \050which is determined at run time\051.\323 The syntax is:) 135 294.99 T
0 8 Q
(2) 54 277.66 T
6 10 Q
(<sequence_type> :=) 135 277.66 T
-0.38 (\322sequence\323 \322<\323 <simple_type_spec> \322,\323 <positive_int_const> \322>\323  |) 147 266.66 P
(\322sequence\323 \322<\323 <simple_type_spec> \322>\323) 147 255.66 T
0 8 Q
(3) 54 237.99 T
3 11 Q
(Note that a simple_type_spec can include any of the basic IDL types, any scoped name, or) 135 237.99 T
(any template type. Thus, sequences can also be anonymously de\336ned within a nested) 135 225.99 T
(sequence declaration. Note that a sequence type speci\336cation can also be contained in a) 135 213.99 T
(typedef, in a declaration of a struct member) 135 201.99 T
(, or in a de\336nition of a union case.) 326.4 201.99 T
0 8 Q
(4) 54 183.99 T
3 11 Q
(A sequence is mapped to an Ada type that behaves similarly to an unconstrained array) 135 183.99 T
(.) 513.71 183.99 T
0 8 Q
(5) 54 165.99 T
3 11 Q
(T) 135 165.99 T
(wo Ada generic package speci\336cations,) 140.95 165.99 T
6 F
(Corba.Sequences.Bounded) 317.51 165.99 T
3 F
(and) 475.91 165.99 T
6 F
(Corba.Sequences.Unbounded) 135 153.99 T
3 F
(\050Section) 302.75 153.99 T
(G.13 on page) 342.16 153.99 T
(73\051,) 403.87 153.99 T
(de\336ne the interface to the) 424.04 153.99 T
(sequence type operations. Conforming implementation of the packages de\336ning the) 135 141.99 T
(sequence types shall provide value semantics for assignment \050as opposed to reference) 135 129.99 T
(semantics\051.) 135 117.99 T
6 9 Q
(union Example switch \050long\051 {) 141 584.33 T
(    case 1: case 3: long Counter;) 141 573.33 T
(    case 2: boolean Flags [4] [8];) 141 562.33 T
(    default: long Unknown;) 141 551.33 T
(};) 141 540.33 T
(type Flags_Array is array\050 0..3, 0.. 7\051 of Boolean;) 141 489.33 T
(type Example\050Switch : CORBA.Long\051 is record) 141 478.33 T
(    case Switch is) 141 467.33 T
(        when 1 | 3 =>) 141 456.33 T
(            counter: CORBA.Long;) 141 445.33 T
(        when 2 =>) 141 434.33 T
(            Flags: Flags_Array;) 141 423.33 T
(        when others =>) 141 412.33 T
(            Unknown : CORBA.Long;) 141 401.33 T
(    end record;) 141 390.33 T
135 594.08 135 535.58 2 L
V
0.5 H
0 Z
N
396 594.08 396 535.58 2 L
V
N
134.75 594.33 396.25 594.33 2 L
V
N
134.75 535.33 396.25 535.33 2 L
V
N
135 499.08 135 385.58 2 L
V
N
486 499.08 486 385.58 2 L
V
N
134.75 499.33 486.25 499.33 2 L
V
N
134.75 385.33 486.25 385.33 2 L
V
N
0 1 1 0 1 0 0 K
34 150.33 36 161.33 R
0 1 1 0 1 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 36
%%Page: "37" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(37) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
(\310 NOTE) 144 680.66 T
3 10 Q
(Thus, the implementation of assignment of one sequence variable to another sequence) 207 680.66 T
-0.15 (variable must \336rst destroy the memory of the tar) 207 668.66 P
-0.15 (get sequence variable and then perform) 398.94 668.66 P
(a deep-copy of the second sequence variable to the tar) 207 656.66 T
(get sequence variable) 423.14 656.66 T
2 9 Q
(\310 NOTE) 144 632.66 T
3 10 Q
-0.03 (For an unbounded sequence, setting the current length to a lar) 207 632.66 P
-0.03 (ger value than the current) 453.45 632.66 P
(length may reallocate the sequence data. Reallocation is conceptually equivalent to cre-) 207 620.66 T
-0.19 (ating a new sequence of the desired new length, copying the old sequence elements into) 207 608.66 P
(the new sequence, and then freeing the old sequence. For an unbounded sequence, set-) 207 596.66 T
(ting the current length to a lar) 207 584.66 T
(ger value than the current length may reallocate the) 325.69 584.66 T
(sequence data. Reallocation is conceptually equivalent to creating a new sequence of) 207 572.66 T
(the desired new length, copying the old sequence elements into the new sequence, and) 207 560.66 T
(then freeing the old sequence.) 207 548.66 T
0 8 Q
(6) 72 529.99 T
3 11 Q
(Each occurrence of a sequence type declaration shall be mapped to an instantiation of) 153 529.99 T
6 F
-1.25 (Corba.Sequences.Bounded) 153 517.99 P
3 F
-0.52 (or) 310.15 517.99 P
6 F
-1.25 (Corba.Sequences.Unbounded) 321.55 517.99 P
3 F
-0.52 (, as appropriate.) 486.55 517.99 P
-0.05 (The \336rst or only actual ar) 153 505.99 P
-0.05 (gument will be the type mapped from the simple_type_spec. For a) 264.05 505.99 P
(bounded sequence, the second formal shall be a constant mapped from the) 153 493.99 T
(positive_int_constant. The name of the mapped type prepended to \322) 153 481.99 T
6 F
(_Unbounded) 451.18 481.99 T
3 F
(\323, as) 517.18 481.99 T
-0.44 (appropriate, shall be used for the name of the instantiated package for unbounded sequences.) 153 469.99 P
(The name of the mapped type prepended to\322) 153 457.99 T
6 F
(_Bounded_) 348.81 457.99 T
3 F
(\323, and followed by a string) 408.21 457.99 T
(reprsentation of the length shall be used for the name of the instantiated package.) 153 445.99 T
0 8 Q
(7) 72 427.99 T
3 11 Q
(The following named IDL sequence type DrawingKit:) 153 427.99 T
0 8 Q
(8) 72 284.99 T
3 11 Q
(shall map to a generic package instantiation as follows:) 153 284.99 T
2 8 Q
(IDL File: drawing.idl) 159 401.99 T
6 9 Q
(module Fresco {) 159 387.33 T
(interface DrawingKit {) 159 372.33 T
(    typedef sequence<octet> Data8;) 159 357.33 T
(    typedef sequence<long, 1024>  Data32;) 159 342.33 T
(};) 159 327.33 T
(};) 159 312.33 T
6 8 Q
(package Fresco is) 159 261.99 T
(end Fresco;) 159 247.99 T
(with Corba.Unbounded;) 159 219.99 T
(with Corba.Object;) 159 209.99 T
(package Fresco.DrawingKit is) 159 195.99 T
(    type Ref is new Corba.Object.Ref with null record;) 159 181.99 T
(    package Octet_Unbounded is) 159 167.99 T
(new Corba.Sequences.Unbounded\050Corba.Octet\051;) 197.4 157.99 T
(type Data8 is new Octet_Unbounded.Sequence;) 178.2 147.99 T
(    package Long_Unbounded_1024 is) 159 133.99 T
(        new Corba.Sequences.Unbounded\050Corba.Long\051;) 159 123.99 T
(type Data32 is new Long_Unbounded_1024.Sequence;) 178.2 113.99 T
(end Fresco.DrawingKit;) 159 99.99 T
153 414.08 153 307.58 2 L
V
0.5 H
0 Z
N
495.6 414.08 495.6 307.58 2 L
V
N
152.75 414.33 495.85 414.33 2 L
V
N
152.75 397.33 495.85 397.33 2 L
V
2 H
N
152.75 307.33 495.85 307.33 2 L
V
0.5 H
N
153 271.08 153 243.58 2 L
V
N
558 271.08 558 243.58 2 L
V
N
152.75 271.33 558.25 271.33 2 L
V
N
152.75 243.33 558.25 243.33 2 L
V
N
153 229.08 153 95.58 2 L
V
N
558 229.08 558 95.58 2 L
V
N
152.75 229.33 558.25 229.33 2 L
V
N
152.75 95.33 558.25 95.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 37
%%Page: "38" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(38) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(9) 54 679.99 T
3 11 Q
-0.04 (Note that, for the purposes of other rules, the \322type mapped from\323 a sequence declaration is) 135 679.99 P
(the \322.Sequence\323 type of the instantiated package. Thus, the following declaration:) 135 667.99 T
0 8 Q
(10) 54 616.99 T
3 11 Q
(will map to:) 135 616.99 T
2 12 Q
(4.6.8) 99.58 508.33 T
(Mapping for String T) 135 508.33 T
(ypes) 251.45 508.33 T
0 8 Q
(1) 54 490.99 T
3 11 Q
(The IDL bounded and unbounded strings types are mapped to Ada\325) 135 490.99 T
(s prede\336ned string pack-) 431.34 490.99 T
(ages rooted at) 135 478.99 T
6 F
(Ada.Strings) 198.84 478.99 T
3 F
(.) 271.44 478.99 T
0 8 Q
(2) 54 460.99 T
3 11 Q
-0.26 (An unbounded IDL string shall be mapped directly to the type) 135 460.99 P
6 F
-0.63 ( Corba.String) 406.12 460.99 P
3 F
-0.26 (. This type) 491.29 460.99 P
(is de\336ned as:) 135 448.99 T
0 8 Q
(3) 54 350.99 T
3 11 Q
(A bounded IDL string shall be mapped to the private type) 135 350.99 T
6 F
(Bounded_String) 391.94 350.99 T
3 F
(in an) 490.94 350.99 T
-0.46 (instantiation of the generic package) 135 338.99 P
6 F
-1.1 (Corba.Bounded_Strings) 291.87 338.99 P
3 F
-0.46 (. This package is de\336ned) 430.47 338.99 P
(as follows:) 135 326.99 T
0 8 Q
(4) 54 252.99 T
3 11 Q
(The) 135 252.99 T
6 F
(Corba.Strings.Bounded) 154.85 252.99 T
3 F
( package has a generic formal parameter \322) 293.45 252.99 T
6 F
(Max) 478.85 252.99 T
3 F
(\323) 498.65 252.99 T
(declared as type) 135 240.99 T
6 F
(Positive) 208.61 240.99 T
3 F
(and establishes the maximum length of the bounded string at) 264.16 240.99 T
-0.05 (instantiation. A generic instantiation of the package shall be created using the bound for the) 135 228.99 P
(IDL string as the associated parameter) 135 216.99 T
(. The name of the instantiation shall be the bounded) 303.32 216.99 T
(length of the string appended to \322) 135 204.99 T
6 F
(String_) 282.26 204.99 T
3 F
(\323.) 328.46 204.99 T
0 8 Q
(5) 54 186.99 T
3 11 Q
(For example, the IDL declaration:) 135 186.99 T
0 8 Q
(6) 54 135.99 T
3 11 Q
(maps to:) 135 135.99 T
6 9 Q
(typedef sequence<sequence<octet>> Array8;) 141 644.33 T
6 8 Q
(with Corba.Unbounded;) 141 593.99 T
(...) 141 569.99 T
(package Octet_Unbounded is new Corba.Sequences.Unbounded\050Corba.Octet\051;) 141 555.99 T
(package Octet_Unbounded_Octet_Unbounded is) 141 545.99 T
(new Corba.Sequences.Unbounded\050Octet_Unbounded.Sequence\051;) 160.2 535.99 T
(package Corba is) 141 425.99 T
(    ...) 141 415.99 T
(type String is new Ada.Strings.Unbounded.Unbounded_String;) 160.2 401.99 T
(    ...) 141 387.99 T
(end Corba;) 141 377.99 T
(with Ada.Strings.Bounded;) 141 303.99 T
(generic package Corba.Bounded_Strings) 141 289.99 T
(renames Ada.Strings.Bounded;) 165 279.99 T
6 9 Q
(typedef string Name;) 141 163.33 T
(type Name is new Corba.String;) 141 112.33 T
135 654.08 135 639.58 2 L
V
0.5 H
0 Z
N
540 654.08 540 639.58 2 L
V
N
134.75 654.33 540.25 654.33 2 L
V
N
134.75 639.33 540.25 639.33 2 L
V
N
135 603.08 135 531.58 2 L
V
N
540 603.08 540 531.58 2 L
V
N
134.75 603.33 540.25 603.33 2 L
V
N
134.75 531.33 540.25 531.33 2 L
V
N
135 435.08 135 373.58 2 L
V
N
450.6 435.08 450.6 373.58 2 L
V
N
134.75 435.33 450.85 435.33 2 L
V
N
134.75 373.33 450.85 373.33 2 L
V
N
135 313.08 135 275.58 2 L
V
N
450.6 313.08 450.6 275.58 2 L
V
N
134.75 313.33 450.85 313.33 2 L
V
N
134.75 275.33 450.85 275.33 2 L
V
N
135 173.08 135 158.58 2 L
V
N
342 173.08 342 158.58 2 L
V
N
134.75 173.33 342.25 173.33 2 L
V
N
134.75 158.33 342.25 158.33 2 L
V
N
135 122.08 135 107.58 2 L
V
N
450.6 122.08 450.6 107.58 2 L
V
N
134.75 122.33 450.85 122.33 2 L
V
N
134.75 107.33 450.85 107.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 38
%%Page: "39" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for T) 207 739.85 T
(ypes) 265.83 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(39) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(7) 72 679.99 T
3 11 Q
(while the following declaration:) 153 679.99 T
0 8 Q
(8) 72 628.99 T
3 11 Q
(maps to:) 153 628.99 T
0 8 Q
(9) 72 562.99 T
3 11 Q
(in the corresponding interface package.) 153 562.99 T
4 10 Q
(Rationale: pr) 153 539.66 T
(ovides straight-forwar) 206.24 539.66 T
(d mapping in a manner that addr) 295.6 539.66 T
(esses memory management) 428.01 539.66 T
(issues.) 153 527.66 T
2 12 Q
(4.6.9) 117.58 500.33 T
(Mapping for Arrays) 153 500.33 T
0 8 Q
(1) 72 482.99 T
3 11 Q
(IDL de\336nes multidimensional, \336xed-size arrays by specifying a complex_declarator as any) 153 482.99 T
(of the declarators in a typedef, as any of the declarators in a member of a struct, or as the) 153 470.99 T
-0.13 (declarator in any elements of a union. A complex_declarator is formed by appending one or) 153 458.99 P
-0.45 (more array size bounds to identi\336ers. An IDL complex_declarator maps to an Ada array type) 153 446.99 P
-0.24 (de\336nition. A type de\336nition shall de\336ne an array type. The array type name shall be mapped) 153 434.99 P
-0.18 (from the identi\336er contained in the array_declarator prepended to \322_Array\323. The type de\336ni-) 153 422.99 P
(tion shall be an array) 153 410.99 T
(, over the range\050s\051 from 0 to one less then the \336xed_array_size\050s\051 spec-) 244.54 410.99 T
(i\336ed in the array declarator) 153 398.99 T
(, of the type mapped from the IDL type contained in the type) 271.69 398.99 T
(speci\336cation. If multiple bounds are declared, a multiple dimensional array shall be created) 153 386.99 T
(that preserves the indexing order speci\336ed in the IDL declaration. In the component de\336ni-) 153 374.99 T
-0.01 (tion, the name shall be mapped from the identi\336er contained in the array_declarator and the) 153 362.99 P
(type shall be the array type. See Section) 153 350.99 T
(4.6.5 on page) 331.72 350.99 T
(35, Section) 393.73 350.99 T
(4.6.6 on page) 445.98 350.99 T
(35, and) 508 350.99 T
(Section) 153 338.99 T
(4.6.1) 188.75 338.99 T
(1 on page) 210.34 338.99 T
(40, for more information.) 255.86 338.99 T
2 12 Q
(4.6.10) 117.58 312.33 T
(Mapping for Constants) 153 312.33 T
0 8 Q
(1) 72 294.99 T
3 11 Q
(An IDL constant shall map directly to an Ada constant. The Ada constant name shall be) 153 294.99 T
(derived from the identi\336er in the IDL declaration. The type of the Ada constant shall be) 153 282.99 T
(mapped from the IDL const_type as speci\336ed elsewhere in this section. The value of the) 153 270.99 T
(Ada constant shall be mapped from the IDL constant expression as speci\336ed in Section) 153 258.99 T
(3.3) 539.17 258.99 T
-0.27 (on page) 153 246.99 P
-0.27 (21. This mapping may yield a semantically equivalent literal of the correct type or a) 189.99 246.99 P
(syntactically equivalent Ada expression that evaluates to the correct type and value.) 153 234.99 T
0 8 Q
(2) 72 216.99 T
3 11 Q
(For example, the following IDL constants:) 153 216.99 T
0 8 Q
(3) 72 154.99 T
3 11 Q
(shall map to:) 153 154.99 T
6 9 Q
(typedef string<512> Title;) 159 656.33 T
(package String_512 is new Corba.Strings.Bounded\050512\051;) 159 605.33 T
(type Title is new String_512.Bounded_String;) 159 590.33 T
(const double Pi = 3.1415926535;) 159 193.33 T
(const short Line_Buffer_Length = 80;) 159 182.33 T
(Pi : constant CORBA.Double := 3.1415926535;) 159 131.33 T
(Line_Buffer_Length : constant CORBA.Short := 80;) 159 120.33 T
153 666.08 153 651.58 2 L
V
0.5 H
0 Z
N
360 666.08 360 651.58 2 L
V
N
152.75 666.33 360.25 666.33 2 L
V
N
152.75 651.33 360.25 651.33 2 L
V
N
153 615.08 153 585.58 2 L
V
N
468.6 615.08 468.6 585.58 2 L
V
N
152.75 615.33 468.85 615.33 2 L
V
N
152.75 585.33 468.85 585.33 2 L
V
N
153 203.08 153 177.58 2 L
V
N
414 203.08 414 177.58 2 L
V
N
152.75 203.33 414.25 203.33 2 L
V
N
152.75 177.33 414.25 177.33 2 L
V
N
153 141.08 153 115.58 2 L
V
N
504 141.08 504 115.58 2 L
V
N
152.75 141.33 504.25 141.33 2 L
V
N
152.75 115.33 504.25 115.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 39
%%Page: "40" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for T) 189 739.85 T
(ypes) 247.83 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(40) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(4) 54 679.99 T
3 11 Q
(The following IDL constants:) 135 679.99 T
0 8 Q
(5) 54 606.99 T
3 11 Q
(may be mapped as:) 135 606.99 T
0 8 Q
(6) 54 533.99 T
3 11 Q
(or) 135 533.99 T
2 12 Q
(4.6.1) 99.58 449.33 T
(1) 125.6 449.33 T
(Mapping for T) 135 449.33 T
(ypedefs) 213.44 449.33 T
0 8 Q
(1) 54 431.99 T
3 11 Q
(IDL typedefs introduce new names for types. An IDL typedef is formed from the keyword) 135 431.99 T
-0.48 (\322) 135 419.99 P
6 F
-1.14 (typedef) 139.88 419.99 P
3 F
-0.48 (\323, a type speci\336cation, and one or more declarators. A declarator may be a simple) 186.08 419.99 P
(declarator consisting of an identi\336er) 135 407.99 T
(, or an array declarator) 293.42 407.99 T
(, consisting of an identi\336er and) 392.85 407.99 T
(one or more \336xed array sizes. An IDL typedef maps to an Ada derived type.) 135 395.99 T
0 8 Q
(2) 54 377.99 T
3 11 Q
(Each array_declarator in a typedef shall be mapped to an array type. The array type name) 135 377.99 T
-0.13 (shall be the identi\336er contained in the array_declarator) 135 365.99 P
-0.13 (. The type de\336nition shall be an array) 373.91 365.99 P
-0.27 (over the range\050s\051 from 0 to one less than the \336xed_array_size\050s\051 speci\336ed in the array declar-) 135 353.99 P
(ator of the type mapped from the IDL type contained in the type speci\336cation. If multiple) 135 341.99 T
(bounds are declared, a multiple dimensional array shall be created that preserves the index-) 135 329.99 T
(ing order speci\336ed in the IDL declaration.) 135 317.99 T
0 8 Q
(3) 54 299.99 T
3 11 Q
(Each simple declarator shall be mapped to a derived type declaration. The type name shall) 135 299.99 T
(be the identi\336er provided in the simple declarator) 135 287.99 T
(. The type de\336nition shall be the mapping) 351.61 287.99 T
(of the typespec as speci\336ed elsewhere in this section.) 135 275.99 T
0 8 Q
(4) 54 257.99 T
3 11 Q
(For example, the following IDL typedefs:) 135 257.99 T
0 8 Q
(5) 54 184.99 T
3 11 Q
(will be mapped to:) 135 184.99 T
6 9 Q
(const long Page_Buffer_Length =) 141 656.33 T
(    \050Line_Buffer_Length * 60\051 + 2;) 141 645.33 T
(const long Legal_Page_Buffer_Length = \05080 * 80\051 + 2;) 141 634.33 T
(Page_Buffer_Length : constant CORBA.Long := 4802;) 141 583.33 T
(Legal_Page_Buffer_Length : constant CORBA.Long :=) 141 572.33 T
(    6402;) 141 561.33 T
(Page_Buffer_Length : constant CORBA.Long :=) 141 510.33 T
(    \050Line_Buffer_Length * 60\051 + 2;) 141 499.33 T
(Legal_Page_Buffer_Length : constant CORBA.Long :=) 141 488.33 T
(    \05080 * 80\051 + 2;) 141 477.33 T
(typedef string Name, Street_Address[2];) 141 234.33 T
(typedef Name Employee_Name;) 141 223.33 T
(typedef enum Color {Red, Green, Blue} RGB;) 141 212.33 T
(type Name is new Corba.String;) 141 161.33 T
(type Street_Address is array\0501 .. 2\051 of Corba.String;) 141 150.33 T
(type Employee_Name is new Name;) 141 139.33 T
(type Color is \050Red, Green, Blue\051;) 141 128.33 T
(type RGB is new Color;) 141 117.33 T
135 666.08 135 629.58 2 L
V
0.5 H
0 Z
N
486 666.08 486 629.58 2 L
V
N
134.75 666.33 486.25 666.33 2 L
V
N
134.75 629.33 486.25 629.33 2 L
V
N
135 593.08 135 556.58 2 L
V
N
486 593.08 486 556.58 2 L
V
N
134.75 593.33 486.25 593.33 2 L
V
N
134.75 556.33 486.25 556.33 2 L
V
N
135 520.08 135 472.58 2 L
V
N
486 520.08 486 472.58 2 L
V
N
134.75 520.33 486.25 520.33 2 L
V
N
134.75 472.33 486.25 472.33 2 L
V
N
135 244.08 135 207.58 2 L
V
N
414 244.08 414 207.58 2 L
V
N
134.75 244.33 414.25 244.33 2 L
V
N
134.75 207.33 414.25 207.33 2 L
V
N
135 171.08 135 112.58 2 L
V
N
540 171.08 540 112.58 2 L
V
N
134.75 171.33 540.25 171.33 2 L
V
N
134.75 112.33 540.25 112.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 40
%%Page: "41" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Any T) 207 739.85 T
(ype) 285.34 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(41) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
2 12 Q
(4.6.12) 117.58 679.33 T
(Mapping for T) 153 679.33 T
(ypeCodes) 231.44 679.33 T
0 8 Q
(1) 72 661.99 T
3 11 Q
0 (T) 153 661.99 P
0 (ypeCodes are values that represent invocation ar) 158.95 661.99 P
0 (gument types, attribute, and Object types.) 371.96 661.99 P
(They can be obtained from the Interface Repository or from IDL compilers. They have a) 153 649.99 T
(number of uses: in the dynamic invocation interface to indicate types of the actual ar) 153 637.99 T
(gu-) 524.9 637.99 T
(ments, by an Interface Repository to represent type speci\336cations that are part of the IDL) 153 625.99 T
(declarations, and as a crucial part of the semantics of the any type. Abstractly) 153 613.99 T
(, T) 492.9 613.99 T
(ypeCodes) 504.35 613.99 T
(consist of a \322kind\323 \336eld and a \322parameter list\323.) 153 601.99 T
0 8 Q
(2) 72 583.99 T
3 11 Q
-0.44 (The Ada mapping of T) 153 583.99 P
-0.44 (ypeCode is provided by the pseudo-object) 251.3 583.99 P
6 F
-1.05 (CORBA.TypeCode.Ref) 436.89 583.99 P
3 F
(type declared in the) 153 571.99 T
6 F
(CORBA.TypeCode) 242.2 571.99 T
3 F
( package nested within the) 334.6 571.99 T
6 F
(CORBA) 454.05 571.99 T
3 F
( package \050see) 487.05 571.99 T
(Section) 153 559.99 T
(5.7 on page) 188.75 559.99 T
(53\051. Its implementation is left unspeci\336ed. The primitive operations of) 242.52 559.99 T
(T) 153 547.99 T
(ypeCode are mapped from the pseudo-IDL contained in the CORBA spec. These opera-) 158.95 547.99 T
(tions allow the matching of two T) 153 535.99 T
(ypeCodes, and extraction of the \322kind\323 and \322parameter) 301.33 535.99 T
-0.18 (list\323 from it. The contents of the parameter list shall be as speci\336ed in the CORBA speci\336ca-) 153 523.99 P
(tion.) 153 511.99 T
2 9 Q
(\310 NOTE) 144 488.66 T
3 10 Q
(These operations do not include the ability to construct a T) 207 488.66 T
(ypeCode.) 441.83 488.66 T
2 9 Q
(\310 NOTE) 144 464.66 T
3 10 Q
(T) 207 464.66 T
(wo T) 212.41 464.66 T
(ypeCodes are equal if the IDL type speci\336cations from which they are compiled) 232.54 464.66 T
(denote equal types. One consequence of this is that all types derived from an IDL type) 207 452.66 T
(have equal T) 207 440.66 T
(ypeCodes.) 257.95 440.66 T
0 8 Q
(3) 72 421.99 T
3 11 Q
-0.32 (All occurrences of type T) 153 421.99 P
-0.32 (ypeCode in IDL shall be mapped to the) 263.36 421.99 P
6 F
-0.77 (CORBA.TypeCode.Ref) 436.77 421.99 P
3 F
(type.) 153 409.99 T
0 8 Q
(4) 72 391.99 T
3 11 Q
(All conforming implementations shall be capable \050if asked\051 of generating constants of type) 153 391.99 T
6 F
(CORBA.TypeCode.Ref) 153 379.99 T
3 F
( for all pre-de\336ned and IDL-de\336ned types. The name of the con-) 271.8 379.99 T
(stant shall be \322TC_\323 prepended to the mapped type name.) 153 367.99 T
72 321.92 558 327.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 325.13 467.34 325.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 325.13 143.58 325.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.7) 125.93 331.66 T
(Mapping for Any T) 153 331.66 T
(ype) 266.15 331.66 T
0 8 Q
(1) 72 304.59 T
3 11 Q
(An Ada mapping for the IDL type) 153 304.59 T
6 F
(any) 306.05 304.59 T
3 F
( must ful\336ll two dif) 325.85 304.59 T
(ferent requirements:) 411.23 304.59 T
0 8 Q
(2) 72 286.59 T
(\245) 153 286.59 T
3 11 Q
(Handling values whose types are known.) 171 286.59 T
0 8 Q
(3) 72 271.59 T
(\245) 153 271.59 T
3 11 Q
(Handling values whose types are not known at implementation compile time.) 171 271.59 T
0 8 Q
(4) 72 253.59 T
3 11 Q
(The \336rst item covers most normal usage of the) 153 253.59 T
6 F
(any) 360.45 253.59 T
3 F
( type--the conversion of typed values) 380.25 253.59 T
-0.07 (into and out of an) 153 241.59 P
6 F
-0.18 (any) 232.99 241.59 P
3 F
-0.07 (. The second item covers situations such as those involving the recep-) 252.07 241.59 P
(tion of a request or response containing an) 153 229.59 T
6 F
(any) 342.41 229.59 T
3 F
( that holds data of a type unknown to the) 362.21 229.59 T
(receiver when it was created with an Ada compiler) 153 217.59 T
(.) 375.99 217.59 T
0 8 Q
(5) 72 199.59 T
3 11 Q
-0.14 (The following speci\336es a set of Ada facilities that allows both of these case to be handled in) 153 199.59 P
(a type safe manner) 153 187.59 T
(.) 235.17 187.59 T
2 12 Q
(4.7.1) 117.58 160.92 T
(Handling Known T) 153 160.92 T
(ypes) 257.45 160.92 T
0 8 Q
(1) 72 143.59 T
3 11 Q
(For each distinct type) 153 143.59 T
4 F
(T) 250.77 143.59 T
3 F
( in an IDL speci\336cation, pre-de\336ned or IDL-de\336ned, conforming) 256.88 143.59 T
-0.05 (implementations shall be capable of generating functions to insert and extract values of that) 153 131.59 P
(type to and from type) 153 119.59 T
6 F
(Any) 250.46 119.59 T
3 F
(. The form of these functions shall be:) 269.55 119.59 T
6 10 Q
(function To_) 171 102.25 T
7 F
(T) 243 102.25 T
6 F
(\050Item : in Any\051 return) 249 102.25 T
7 F
(T) 387 102.25 T
6 F
(;) 393 102.25 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 41
%%Page: "42" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Exception T) 189 739.85 T
(ypes) 293.35 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(42) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 F
(function To_Any\050Item : in) 153 680.66 T
7 F
(T) 309 680.66 T
6 F
(\051 return Any;) 315 680.66 T
0 8 Q
(2) 54 662.99 T
3 11 Q
(An attempt to execute) 135 662.99 T
6 F
(To_) 234.59 662.99 T
7 F
(T) 254.39 662.99 T
3 F
( on an) 260.99 662.99 T
6 F
(Any) 290.63 662.99 T
3 F
( value that does not contain a value of type) 310.43 662.99 T
7 F
(T) 501.67 662.99 T
3 F
( shall) 508.27 662.99 T
(result in the raising of) 135 650.99 T
6 F
(Constraint_Error) 234.3 650.99 T
3 F
(.) 339.29 650.99 T
0 8 Q
(3) 54 632.99 T
3 11 Q
(In addition, the following function shall be de\336ned in package) 135 632.99 T
6 F
(CORBA) 411.5 632.99 T
3 F
(:) 444.5 632.99 T
6 10 Q
(function Type_Of\050The_Any : in Any\051 return TypeCode.Ref;) 153 615.66 T
0 8 Q
(4) 54 597.99 T
3 11 Q
(This function allows the discovery of the type of an) 135 597.99 T
6 F
(Any) 364.75 597.99 T
3 F
(.) 383.83 597.99 T
2 12 Q
(4.7.2) 99.58 571.33 T
(Handling Unknown T) 135 571.33 T
(ypes) 253.45 571.33 T
0 8 Q
(1) 54 553.99 T
3 11 Q
-0.21 (Certain applications may receive and wish to handle objects of type) 135 553.99 P
6 F
-0.5 (Any) 433.04 553.99 P
3 F
-0.21 ( that contain values) 452.84 553.99 P
(of a type not known at compile time, and, thus, for which a matching T) 135 541.99 T
(ypeCode constant is) 447.39 541.99 T
(not available. The T) 135 529.99 T
(ypeCode facility allows the decomposition of any T) 222.82 529.99 T
(ypeCode to a point) 450.28 529.99 T
-0.15 (where all components of a type are of pre-de\336ned \050and thus known\051 type. In order to extract) 135 517.99 P
-0.47 (the value associated with each component of this breed of Any) 135 505.99 P
-0.47 (, conforming implementations) 405.75 505.99 P
(shall provide an iterator) 135 493.99 T
6 F
(CORBA.Iterate_Over_Any_Elements) 242.54 493.99 T
3 F
( de\336ned as follows:) 447.14 493.99 T
6 10 Q
(generic) 153 465.66 T
(    with procedure Process) 153 454.66 T
(    \050The_Any) 189 443.66 T
( : in      Any;) 261 443.66 T
(     Continue) 189 432.66 T
( :    out Boolean\051;) 267 432.66 T
(procedure Corba.Iterate_Over_Any_Elements) 153 421.66 T
(\050In_Any) 189 410.66 T
(: in     Any\051;) 231 410.66 T
0 8 Q
(2) 54 392.99 T
3 11 Q
(A conforming implementation of) 135 392.99 T
6 10 Q
(Iterate_Over_Any_Elements) 283.49 392.99 T
3 11 Q
( shall iteratively call) 433.49 392.99 T
6 F
(Process) 135 380.99 T
3 F
( for each component of) 181.2 380.99 T
6 F
(In_Any) 285.98 380.99 T
3 F
(. The) 324.86 380.99 T
6 F
(The_Any) 350.21 380.99 T
3 F
( ar) 396.42 380.99 T
(gument to) 407.51 380.99 T
6 F
(Process) 454.57 380.99 T
3 F
( shall) 500.77 380.99 T
0 (contain both the T) 135 368.99 P
0 (ypeCode and the value\050s\051 of the component of the) 214.58 368.99 P
6 F
0 (In_Any) 437.27 368.99 P
3 F
0 (. Each compo-) 476.16 368.99 P
(nent may itself be compound and may be of previously unknown type; thus, the type of the) 135 356.99 T
-0.22 (component) 135 344.99 P
6 10 Q
-0.48 (The_Any) 186.41 344.99 P
3 11 Q
-0.22 ( is another) 228.41 344.99 P
6 F
-0.53 (Any) 276.32 344.99 P
3 F
-0.22 (. But, through the recursive use of the iterator) 295.41 344.99 P
-0.22 (, the input) 493.61 344.99 P
6 F
(In_Any) 135 332.99 T
3 F
( can be decomposed to the point that all components are of known \050eventually of) 174.6 332.99 T
(pre-de\336ned\051 type. At that point, a type safe conversion of the form) 135 320.99 T
6 F
(To_) 430.11 320.99 T
7 F
(T) 449.91 320.99 T
3 F
( discussed above) 456.51 320.99 T
(may be applied to obtain the value of the decomposed component.) 135 308.99 T
0 8 Q
(3) 54 290.99 T
3 11 Q
(No facilities are de\336ned or required for composing) 135 290.99 T
6 F
(Any) 361.06 290.99 T
3 F
( values of previously unknown) 380.86 290.99 T
(types.) 135 278.99 T
54 232.92 540 238.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 236.13 449.34 236.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 236.13 125.58 236.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.8) 107.93 242.66 T
(Mapping for Exception T) 135 242.66 T
(ypes) 285.72 242.66 T
0 8 Q
(1) 54 215.59 T
3 11 Q
-0.37 (An IDL exception is declared by specifying an identi\336er and a set of members. This member) 135 215.59 P
(data contains descriptive information, accessible in the event the exception is raised. Stan-) 135 203.59 T
(dard exceptions are prede\336ned as part of the language and can be raised by an ORB given) 135 191.59 T
(the occurrence of the corresponding exceptional condition. Each standard exception has) 135 179.59 T
-0.14 (member data that includes a minor code \050a more detailed subcategory\051 and a completion sta-) 135 167.59 P
(tus. Exceptions can also be declared that are application-speci\336c. The raising of an excep-) 135 155.59 T
(tion is bound to an interface operation as part of the operation declaration. This does not) 135 143.59 T
(imply that the corresponding implementation for the operation must raise the exception; it) 135 131.59 T
(merely announces that the declared operation) 135 119.59 T
4 F
(may) 337.22 119.59 T
3 F
( raise any of the listed exception\050s\051. A) 355.55 119.59 T
(programmer has access to the value of the exception identi\336er upon a raise.) 135 107.59 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 42
%%Page: "43" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Exception T) 207 739.85 T
(ypes) 311.35 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(43) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(2) 72 679.99 T
3 11 Q
(An application-speci\336c exception is declared with a unique identi\336er \050relative to the scope) 153 679.99 T
(of the declaration\051 and a member list that contains zero or more IDL type declarations.) 153 667.99 T
2 12 Q
(4.8.1) 117.58 641.33 T
(Exception Identi\336er) 153 641.33 T
0 8 Q
(1) 72 623.99 T
3 11 Q
-0.22 (The IDL exception declaration shall map directly to an Ada exception declaration where the) 153 623.99 P
(exception identi\336er shall be used to name the Ada exception.) 153 611.99 T
0 8 Q
(2) 72 593.99 T
3 11 Q
(For example, the following IDL exception declaration:) 153 593.99 T
0 8 Q
(3) 72 542.99 T
3 11 Q
(will map to the following Ada exception declaration:) 153 542.99 T
0 8 Q
(4) 72 491.99 T
3 11 Q
(A programmer must be able to access the value of the exception identi\336er when an excep-) 153 491.99 T
(tion is raised. A language-de\336ned package,) 153 479.99 T
6 F
(Ada.Exceptions) 345.46 479.99 T
3 F
(, is provided by Ada . The) 437.86 479.99 T
-0.4 (package contains a declaration of type) 153 467.99 P
6 F
-0.95 (Exception_Occurrence) 321.69 467.99 P
3 F
-0.4 (. Each occurrence of an) 453.69 467.99 P
(Ada exception is represented by a distinct value of type) 153 455.99 T
6 F
(Exception_Occurrence) 399.84 455.99 T
3 F
(. The) 531.84 455.99 T
(package is de\336ned as follows:) 153 443.99 T
0 8 Q
(5) 72 282.99 T
3 11 Q
(An Ada exception handler may contain a) 153 282.99 T
6 F
(choice_parameter_specification) 335.98 282.99 T
3 F
(; it) 533.98 282.99 T
(represents a constant object of type) 153 270.99 T
6 F
(Exception_Occurrence) 310.63 270.99 T
3 F
(. Upon the raise of an) 442.63 270.99 T
(exception, this constant represents the actual exception being handled. This constant value) 153 258.99 T
(can be used to access the fully quali\336ed name using the function,) 153 246.99 T
6 F
(Exception_Name) 441.71 246.99 T
3 F
(, in) 534.11 246.99 T
(the package) 153 234.99 T
6 F
(Ada.Exceptions) 207.98 234.99 T
3 F
(. Therefore, mapping an IDL exception declaration to an) 300.38 234.99 T
(Ada  exception declaration provides access to the value of the exception identi\336er by) 153 222.99 T
(default.) 153 210.99 T
2 12 Q
(4.8.2) 117.58 184.33 T
(Exception Members) 153 184.33 T
0 8 Q
(1) 72 166.99 T
3 11 Q
(Members are additional information available in the event of a raise of the corresponding) 153 166.99 T
(exception. Members can contain any combination of permissible IDL types.) 153 154.99 T
6 9 Q
(exception null_exception{};) 159 570.33 T
(Null_Exception: exception;) 159 519.33 T
(package Ada.Exceptions is) 159 420.33 T
(    ...) 159 409.33 T
(    type Exception_Occurrence is limited private;) 159 398.33 T
(    type Exception_Occurrence_Access is access all Exception_Occurrence;) 159 387.33 T
(    Null_Occurrence: constant Exception_Occurrence;) 159 376.33 T
(    ...) 159 365.33 T
(    function Exception_Name \050X: in Exception_Occurrence\051 return String;) 159 354.33 T
(    ...) 159 343.33 T
(    private) 159 332.33 T
(    ... -- not specif) 159 321.33 T
(ied by the language) 272.4 321.33 T
(end Ada.Exceptions;) 159 310.33 T
153 580.08 153 565.58 2 L
V
0.5 H
0 Z
N
369 580.08 369 565.58 2 L
V
N
152.75 580.33 369.25 580.33 2 L
V
N
152.75 565.33 369.25 565.33 2 L
V
N
153 529.08 153 514.58 2 L
V
N
369 529.08 369 514.58 2 L
V
N
152.75 529.33 369.25 529.33 2 L
V
N
152.75 514.33 369.25 514.33 2 L
V
N
153 430.08 153 305.58 2 L
V
N
558 430.08 558 305.58 2 L
V
N
152.75 430.33 558.25 430.33 2 L
V
N
152.75 305.33 558.25 305.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 43
%%Page: "44" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Exception T) 189 739.85 T
(ypes) 293.35 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(44) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(2) 54 679.99 T
3 11 Q
(The following declarations are assumed to exist in package) 135 679.99 T
6 F
(CORBA) 398.03 679.99 T
3 F
(:) 431.03 679.99 T
2 12 Q
(4.8.2.1) 90 602.33 T
(Standard Exceptions) 135 602.33 T
0 8 Q
(1) 54 583.99 T
3 11 Q
(A set of standard run-time exceptions is de\336ned in the IDL language speci\336cation. Each of) 135 583.99 T
(these exceptions has the same member form. The following IDL declarations appear for) 135 571.99 T
(standard exceptions:) 135 559.99 T
0 8 Q
(2) 54 475.99 T
3 11 Q
(The following declarations shall exist in package) 135 475.99 T
6 F
(CORBA) 353.44 475.99 T
3 F
(:) 386.44 475.99 T
0 8 Q
(3) 54 325.99 T
3 11 Q
(For each standard exception speci\336ed in section 4.1.4 of the CORBA speci\336cation, a corre-) 135 325.99 T
(sponding Ada exception shall be declared in package) 135 313.99 T
6 F
(CORBA) 371.45 313.99 T
3 F
(.) 404.45 313.99 T
0 8 Q
(4) 54 295.99 T
3 11 Q
(For example, the IDL standard exception declaration below:) 135 295.99 T
0 8 Q
(5) 54 244.99 T
3 11 Q
(maps to the following:) 135 244.99 T
0 8 Q
(6) 54 193.99 T
3 11 Q
(The \322) 135 193.99 T
6 F
(ex_body) 159.74 193.99 T
3 F
(\323 type will be used to hold the current values associated with the raised) 205.94 193.99 T
(exception and a Get_Members function available for accessing the values.) 135 181.99 T
2 12 Q
(4.8.2.2) 90 157.33 T
(Application-Speci\336c Exceptions) 135 157.33 T
0 8 Q
(1) 54 138.99 T
3 11 Q
-0.19 (For an application-speci\336c exception declaration, a type extension derived from the abstract) 135 138.99 P
(type,) 135 126.99 T
6 F
(IDL_Exception_Members) 159.44 126.99 T
3 F
(, shall be declared where the extended type name will) 298.04 126.99 T
(be the concatenation of the exception identi\336er with \322) 135 114.99 T
6 F
(_Members) 371.46 114.99 T
3 F
(\323. Each member shall be) 424.26 114.99 T
(mapped to a component of the extension. The name used for each component shall be) 135 102.99 T
6 9 Q
(type IDL_Exception_Members is abstract tagged null record;) 141 656.33 T
(function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051 return) 141 641.33 T
(    IDL_Exception_Members is abstract;) 141 630.33 T
-3.8 (#def) 141 536.33 P
-3.8 (ine ex_body {unsigned long minor; completion_status completed;}) 162.6 536.33 P
(enum completion_status {COMPLETED_YES, COMPLETED_NO,) 141 525.33 T
(COMPLETED_MAYBE};) 141 514.33 T
-7.05 (enum exception_type {NO_EXCEPTION, USER_EXCEPTION, SYSTEM_EXCEPTON};) 141 503.33 P
(type completion_Status is) 141 452.33 T
(   \050COMPLETED_YES, COMPLETED_NO, COMPLETED_MAYBE\051;) 141 441.33 T
(type Exception_Type is) 141 430.33 T
(   \050NO_EXCEPTION, USER_EXCEPTION, SYSTEM_EXCEPTION\051;) 141 419.33 T
(type Ex_Body is new CORBA.IDL_Exception_Members with) 141 408.33 T
(  record) 141 397.33 T
(Minor     :  CORBA.Long;) 162.6 386.33 T
(Completed :) 162.6 375.33 T
(Completion_Status;) 232.8 375.33 T
(  end record;) 141 364.33 T
(exception UNKNOWN ex_body:) 141 272.33 T
(UNKNOWN: exception;) 141 221.33 T
135 666.08 135 625.58 2 L
V
0.5 H
0 Z
N
513 666.08 513 625.58 2 L
V
N
134.75 666.33 513.25 666.33 2 L
V
N
134.75 625.33 513.25 625.33 2 L
V
N
135 546.08 135 498.58 2 L
V
N
486 546.08 486 498.58 2 L
V
N
134.75 546.33 486.25 546.33 2 L
V
N
134.75 498.33 486.25 498.33 2 L
V
N
135 462.08 135 348.58 2 L
V
N
486 462.08 486 348.58 2 L
V
N
134.75 462.33 486.25 462.33 2 L
V
N
134.75 348.33 486.25 348.33 2 L
V
N
135 282.08 135 267.58 2 L
V
N
387 282.08 387 267.58 2 L
V
N
134.75 282.33 387.25 282.33 2 L
V
N
134.75 267.33 387.25 267.33 2 L
V
N
135 231.08 135 216.58 2 L
V
N
387 231.08 387 216.58 2 L
V
N
134.75 231.33 387.25 231.33 2 L
V
N
134.75 216.33 387.25 216.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 44
%%Page: "45" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Exception T) 207 739.85 T
(ypes) 311.35 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(45) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
3 11 Q
0 (mapped from the member name. The type of each exception member shall be mapped from) 153 679.99 P
(the IDL member type as speci\336ed elsewhere in this document.) 153 667.99 T
0 8 Q
(2) 72 649.99 T
3 11 Q
(The mapping shall also provide a \050non-abstract\051 function, Get_Members, that returns the) 153 649.99 T
(exception members from an object of type Ada.Exceptions.Exception_Occurrence.) 153 637.99 T
2 9 Q
(\310 NOTE) 144 614.66 T
3 10 Q
(Implementation Note: The use of the strings associated with Exception_Message and) 207 614.66 T
(Exception_Information in the language-de\336ned package Ada.Exceptions may be used) 207 602.66 T
-0.41 (by the implementer to \322carry\323 the exception members. This may ef) 207 590.66 P
-0.41 (fectively render these) 470.67 590.66 P
(prede\336ned subprograms useless. If so, this fact shall be documented.) 207 578.66 T
0 8 Q
(3) 72 559.99 T
3 11 Q
(For example, the following IDL exception declaration:) 153 559.99 T
0 8 Q
(4) 72 475.99 T
3 11 Q
(will map to the following:) 153 475.99 T
0 8 Q
(5) 72 332.99 T
3 11 Q
(And for an exception declaration without members:) 153 332.99 T
0 8 Q
(6) 72 281.99 T
3 11 Q
(the map will be as follows:) 153 281.99 T
6 9 Q
(exception access_error {) 159 536.33 T
(    long f) 159 525.33 T
(ile_access_code;) 213 525.33 T
(    string access_error_description;) 159 514.33 T
(    }) 159 503.33 T
(Access_error : exception;) 159 452.33 T
(type Access_Error_Members is new) 159 437.33 T
(    CORBA.IDL_Exception_Members with) 159 426.33 T
(    record) 159 415.33 T
(File_Access_Code) 191.4 404.33 T
(: CORBA.Long;) 326.4 404.33 T
(Access_Error_Description : CORBA.String;) 191.4 393.33 T
(    end record;) 159 382.33 T
(function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051) 159 371.33 T
(    return Access_Error_Members;) 159 360.33 T
(exception a_simple_exception{};) 159 309.33 T
(A_Simple_Exception : exception;) 159 258.33 T
(type A_Simple_Exception_Members is new) 159 243.33 T
(    CORBA.IDL_Exception_Members with null record;) 159 232.33 T
(function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051) 159 221.33 T
(    return A_Simple_Exception_Members;) 159 210.33 T
153 546.08 153 498.58 2 L
V
0.5 H
0 Z
N
504 546.08 504 498.58 2 L
V
N
152.75 546.33 504.25 546.33 2 L
V
N
152.75 498.33 504.25 498.33 2 L
V
N
153 462.08 153 355.58 2 L
V
N
504 462.08 504 355.58 2 L
V
N
152.75 462.33 504.25 462.33 2 L
V
N
152.75 355.33 504.25 355.33 2 L
V
N
153 319.08 153 304.58 2 L
V
N
396 319.08 396 304.58 2 L
V
N
152.75 319.33 396.25 319.33 2 L
V
N
152.75 304.33 396.25 304.33 2 L
V
N
153 268.08 153 205.58 2 L
V
N
504 268.08 504 205.58 2 L
V
N
152.75 268.33 504.25 268.33 2 L
V
N
152.75 205.33 504.25 205.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 45
%%Page: "46" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Exception T) 189 739.85 T
(ypes) 293.35 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(46) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
2 12 Q
(4.8.3) 99.58 679.33 T
(Example Use) 135 679.33 T
0 8 Q
(1) 54 661.99 T
3 11 Q
(The following interface de\336nition :) 135 661.99 T
0 8 Q
(2) 54 518.99 T
3 11 Q
(maps to the following in Ada :) 135 518.99 T
6 9 Q
(interface stack {) 141 638.33 T
(    typedef long element;) 141 627.33 T
(    exception overf) 141 616.33 T
(low{long upper_bound;};) 243.6 616.33 T
(    exception underf) 141 605.33 T
(low{};) 249 605.33 T
(    void push \050in element the_element\051) 141 590.33 T
(        raises \050overf) 141 579.33 T
(low\051;) 254.4 579.33 T
(    void pop  \050out element the_element\051) 141 568.33 T
(        raises \050underf) 141 557.33 T
(low\051;) 259.8 557.33 T
(};) 141 546.33 T
(package Stack is) 141 495.33 T
(...) 141 480.33 T
(    type Element is new CORBA.Long;) 141 465.33 T
(Overf) 162.6 450.33 T
(low     :    exception;) 189.6 450.33 T
-2.4 (type Overf) 162.6 439.33 P
-2.4 (low_Members is new CORBA.IDL_Exception_Members with) 214.2 439.33 P
(        record) 141 428.33 T
(Upper_Bound : CORBA.Long;) 211.2 417.33 T
(        end record;) 141 406.33 T
-1.1 (    function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051) 141 395.33 P
(       return Overf) 141 384.33 T
(low_Members;) 243.6 384.33 T
(Underf) 162.6 369.33 T
(low    :    exception;) 195 369.33 T
(type Underf) 162.6 358.33 T
(low_Members is new) 222 358.33 T
(        CORBA.IDL_Exception_Members with null record;) 141 347.33 T
(function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051) 141 336.33 T
(    return Underf) 141 325.33 T
(low_Members;...) 232.8 325.33 T
(end stack;) 141 310.33 T
135 648.08 135 541.58 2 L
V
0.5 H
0 Z
N
486 648.08 486 541.58 2 L
V
N
134.75 648.33 486.25 648.33 2 L
V
N
134.75 541.33 486.25 541.33 2 L
V
N
135 505.08 135 305.58 2 L
V
N
486 505.08 486 305.58 2 L
V
N
134.75 505.33 486.25 505.33 2 L
V
N
134.75 305.33 486.25 305.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 46
%%Page: "47" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Mapping for Operations and Attributes \050Client-Side Speci\336c\051) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(47) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 8 Q
(3) 72 679.99 T
3 11 Q
(The following usage of the stack illustrates access to members upon an exception raise:) 153 679.99 T
2 13 Q
(4.9) 125.93 351.66 T
(Mapping for Operations and Attributes \050Client-Side) 153 351.66 T
72 326.92 558 332.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 330.13 467.34 330.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 330.13 143.58 330.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(Speci\336c\051) 153 336.66 T
0 8 Q
(1) 72 309.59 T
3 11 Q
(Operations shall map to an Ada subprogram with name mapped from the operation identi-) 153 309.59 T
-0.24 (\336er) 153 297.59 P
-0.24 (. The \336rst ar) 167.06 297.59 P
-0.24 (gument to operation subprograms will refer to the object that the operation is) 219.9 297.59 P
-0.17 (being performed on. It shall be an \322) 153 285.59 P
6 F
-0.4 (in) 308.25 285.59 P
3 F
-0.17 (\323 mode ar) 321.45 285.59 P
-0.17 (gument with the name \322) 364.29 285.59 P
6 F
-0.4 (Self) 469.33 285.59 P
3 F
-0.17 (\323 and shall be) 495.73 285.59 P
(of the mapped object reference type.) 153 273.59 T
0 8 Q
(2) 72 255.59 T
3 11 Q
(IDL interface operations with non-void result type that have only in-mode parameters shall) 153 255.59 T
(be mapped to Ada functions returning an Ada type mapped from the operation result type.) 153 243.59 T
-0.14 (Otherwise, \050non-void IDL interface operations that have out-mode parameters, or void oper-) 153 231.59 P
(ations with only in-mode parameters\051, operations shall be mapped to Ada procedures. The) 153 219.59 T
(non-void result is returned via the procedures \336nal ar) 153 207.59 T
(gument, \322) 386.2 207.59 T
6 F
(Result) 429.58 207.59 T
3 F
(\323.) 469.18 207.59 T
0 8 Q
(3) 72 189.59 T
3 11 Q
-0.17 (Each speci\336ed parameter in the operation declaration shall be mapped to an ar) 153 189.59 P
-0.17 (gument of the) 494.67 189.59 P
-0.04 (mapped subprogram. The ar) 153 177.59 P
-0.04 (gument names shall be mapped from the parameter identi\336er in) 276.71 177.59 P
(the IDL. The ar) 153 165.59 T
(gument mode shall be preserved and the ar) 221.22 165.59 T
(gument shall be of type mapped) 409.51 165.59 T
(from the IDL type.) 153 153.59 T
0 8 Q
(4) 72 135.59 T
3 11 Q
-0.36 (If an operation in an IDL speci\336cation has a context speci\336cation, then an addition ar) 153 135.59 P
-0.36 (gument) 522.61 135.59 P
(with name \322) 153 123.59 T
6 F
(In_Context) 206.77 123.59 T
3 F
(\323, of) 272.77 123.59 T
6 F
(in) 295.07 123.59 T
3 F
( mode and of type) 308.27 123.59 T
6 F
(CORBA.Context.Ref) 390.45 123.59 T
3 F
( \050see) 502.65 123.59 T
(Section) 153 111.59 T
(5.5 on page) 188.75 111.59 T
(52\051 shall be added after all IDL speci\336ed ar) 242.52 111.59 T
(guments and before the) 433.54 111.59 T
6 F
(Result) 153 99.59 T
3 F
( ar) 192.6 99.59 T
(gument, if any) 203.7 99.59 T
(.) 266.84 99.59 T
6 9 Q
(with Ada.Text_IO;) 159 656.33 T
(with Ada.Exceptions;) 159 645.33 T
(with Stack;) 159 634.33 T
(use Ada;) 159 623.33 T
(procedure Use_stack is) 159 608.33 T
(    ...) 159 593.33 T
(The_Overf) 180.6 578.33 T
(low_Members : Stack.Overf) 229.2 578.33 T
(low_Members;) 364.2 578.33 T
(The_Underf) 180.6 567.33 T
(low_Members: Stack.Underf) 234.6 567.33 T
(low_Members;) 369.6 567.33 T
(begin) 159 552.33 T
(    ...) 159 537.33 T
(exception) 159 522.33 T
(     when Stack_Error: Stack.Overf) 159 507.33 T
(low =>) 342.6 507.33 T
(The_Overf) 207.6 496.33 T
(low_Members :=) 256.2 496.33 T
(             Stack.Get_Members\050Stack_Error\051;) 159 485.33 T
(Text_IO.Put_Line \050\322Exception raised is \322 &) 207.6 474.33 T
(Exceptions.Exception_Name \050Stack_Error\051\051;) 229.2 463.33 T
(Text_IO.Put_Line) 207.6 452.33 T
(\050\322exceeded upper bound = \322 &) 229.2 441.33 T
(CORBA.Long\325image) 256.2 430.33 T
(\050The_Overf) 277.8 419.33 T
(low_Members.Upper_Bound\051\051;) 331.8 419.33 T
(    ...) 159 404.33 T
(end Use_stack;) 159 389.33 T
153 666.08 153 384.58 2 L
V
0.5 H
0 Z
N
504 666.08 504 384.58 2 L
V
N
152.75 666.33 504.25 666.33 2 L
V
N
152.75 384.33 504.25 384.33 2 L
V
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 47
%%Page: "48" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Argument Passing Considerations) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(48) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 8 Q
(5) 54 679.99 T
3 11 Q
(Read-only attributes map to an Ada function with name formed by appending "_Of\323 to the) 135 679.99 T
-0.03 (mapped attribute name. Read-write attributes map to an Ada function with name formed by) 135 667.99 P
-0.25 (appending \322) 135 655.99 P
6 F
-0.59 (_Of) 188.21 655.99 P
3 F
-0.25 (\323 to the mapped attribute name and an Ada procedure with name formed by) 208.01 655.99 P
(prepending \322) 135 643.99 T
6 F
(Set_) 192.12 643.99 T
3 F
(\323 to the mapped attribute name. The) 218.52 643.99 T
7 F
(set) 379.83 643.99 T
3 F
( procedure takes a controlling) 399.63 643.99 T
-0.37 (parameter of object reference type and name \322) 135 631.99 P
6 F
-0.89 (Self) 336.11 631.99 P
3 F
-0.37 (\323, and a parameter with the same type as) 362.51 631.99 P
(the attribute and name \322) 135 619.99 T
6 F
(To) 240.7 619.99 T
3 F
(\323. The) 253.9 619.99 T
4 F
(of) 284.14 619.99 T
3 F
(function takes a controlling parameter only \050of object) 292.5 619.99 T
(reference type and name \322) 135 607.99 T
6 F
(Self) 250.45 607.99 T
3 F
(\323\051 and returns the type mapped from the attribute type.) 276.85 607.99 T
0 8 Q
(6) 54 589.99 T
3 11 Q
-0.25 (IDL) 135 589.99 P
6 F
-0.6 (oneway) 155.83 589.99 P
3 F
-0.25 ( operations are mapped the same as other operations; that is, there is no way to) 195.43 589.99 P
(know by looking at the Ada whether an operation is) 135 577.99 T
6 F
(oneway) 365.97 577.99 T
3 F
( or not.) 405.57 577.99 T
2 9 Q
(\310 NOTE) 126 554.66 T
3 10 Q
(Implementations are encouraged to add a comment to the generated speci\336cation that) 189 554.66 T
(states that the operation is) 189 542.66 T
6 F
(oneway) 295.38 542.66 T
3 F
(.) 330.73 542.66 T
0 8 Q
(7) 54 523.99 T
3 11 Q
(The speci\336cation of exceptions for an IDL operation is not part of the generated operation.) 135 523.99 T
2 9 Q
(\310 NOTE) 126 500.66 T
3 10 Q
(Unlike the C mapping, Ada operations do not require an additional) 189 500.66 T
7 F
(Environment) 458.97 500.66 T
3 F
(parameter for passing exception information--real Ada exceptions are used for this pur-) 189 488.66 T
(pose.) 189 476.66 T
54 429.92 540 435.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 433.13 449.34 433.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 433.13 125.58 433.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.10) 100.7 439.66 T
(Argument Passing Considerations) 135 439.66 T
0 8 Q
(1) 54 412.59 T
3 11 Q
(The existing Ada language parameter passing conventions are followed for all types. The) 135 412.59 T
(mapping for) 135 400.59 T
6 F
(in) 191.83 400.59 T
3 F
(,) 205.03 400.59 T
6 F
(out) 210.53 400.59 T
3 F
( and) 230.33 400.59 T
6 F
(inout) 251.71 400.59 T
3 F
( parameters to the Ada \322) 284.71 400.59 T
6 F
(in) 391.93 400.59 T
3 F
(\323, \322) 405.13 400.59 T
6 10 Q
(out) 420.39 400.59 T
3 11 Q
(\323, and \322) 438.39 400.59 T
6 F
(in out) 472.3 400.59 T
3 F
(\323) 511.9 400.59 T
(parameter modes removes the need for any special parameter passing rules.) 135 388.59 T
54 342.51 540 347.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 345.72 449.34 345.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 345.72 125.58 345.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(4.1) 101.42 352.25 T
(1) 118.77 352.25 T
(T) 135 352.25 T
(asking Considerations) 141.98 352.25 T
0 8 Q
(1) 54 325.18 T
3 11 Q
(An implementation should document whether access to CORBA services is) 135 325.18 T
4 F
(tasking-safe) 470.47 325.18 T
3 F
(.) 523.63 325.18 T
-0.23 (An operation is) 135 313.18 P
4 F
-0.23 (tasking-safe) 204.88 313.18 P
3 F
-0.23 ( if two tasks within an Ada program may perform that operation) 258.04 313.18 P
(and the ef) 135 301.18 T
(fect is always as if they were performed in sequence.) 178.18 301.18 T
0 8 Q
(2) 54 283.18 T
3 11 Q
(Unless otherwise noted, it should be assumed that a CORBA operation is) 135 283.18 T
4 F
(not) 459.79 283.18 T
3 F
( tasking-safe,) 473.84 283.18 T
(given current semantics of the CORBA speci\336cation, which is non-reentrant.) 135 271.18 T
0 8 Q
(3) 54 253.18 T
3 11 Q
(For implementations which support tasking-safe operations, the implementation should fur-) 135 253.18 T
-0.22 (ther document the blocking behavior of CORBA operations.  Blocking may be at the task or) 135 241.18 P
-0.06 (program level: when an Ada task calls a CORBA operation, it is prefered that only the task,) 135 229.18 P
(and not the whole Ada program, be blocked. Refer to the POSIX Ada binding, IEEE-Std) 135 217.18 T
(1003.5-1992, for further discussion.) 135 205.18 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 48
%%Page: "49" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(49) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (CHAPTER 5) 207 677 S
4 24 Q
(The Mapping of) 297 677 T
(Pseudo-Objects) 297 647 T
(to Ada) 297 617 T
72 413.59 558 419 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 416.8 467.34 416.8 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 416.8 143.58 416.8 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.1) 125.93 423.33 T
(General Considerations) 153 423.33 T
0 8 Q
(1) 72 396.26 T
3 11 Q
(CORBA pseudo-objects are not \336rst class objects: there are no servers associated with) 153 396.26 T
(pseudo objects, they are not registered with an ORB, and references to pseudo-objects are) 153 384.26 T
(not necessarily valid across computational contexts.) 153 372.26 T
0 8 Q
(2) 72 354.26 T
3 11 Q
(This mapping provides a standard binding for the pseudo-objects, the pre-de\336ned environ-) 153 354.26 T
(ment for CORBA. Implementation of pseudo-objects are not speci\336ed in this mapping.) 153 342.26 T
2 12 Q
(5.1.1) 117.58 315.59 T
(Mapping Rules) 153 315.59 T
0 8 Q
(1) 72 298.26 T
3 11 Q
-0.05 (In general, the pseudo-objects are mapped from the pseudo-IDL according to the rules spec-) 153 298.26 P
(i\336ed in preceding sections of this speci\336cation.) 153 286.26 T
0 8 Q
(2) 72 268.26 T
3 11 Q
(However) 153 268.26 T
(, the types representing pseudo-objects are not derived from) 192.88 268.26 T
6 F
(CORBA.Object.Ref) 153 256.26 T
3 F
(. Also, Ada supports \322object semantics\323 better than some other) 258.6 256.26 T
(OOPLs. Therefore, this mapping speci\336es that the types associated with pseudo-objects are) 153 244.26 T
(to be named) 153 232.26 T
6 F
(Object) 209.52 232.26 T
3 F
(. The) 249.12 232.26 T
6 F
(Self) 274.47 232.26 T
3 F
( parameter will be of the) 300.87 232.26 T
6 F
(Object) 411.46 232.26 T
3 F
( type and) 451.06 232.26 T
6 F
(in out) 494.13 232.26 T
3 F
(mode, except when the operation is obvious a query-only function, in which case the) 153 220.26 T
6 F
(Object) 153 208.26 T
3 F
( parameter is) 192.6 208.26 T
6 F
(in) 252.16 208.26 T
3 F
( mode..) 265.36 208.26 T
0 8 Q
(3) 72 190.26 T
3 11 Q
(Other exceptions to the general mapping rules are noted in the following text.) 153 190.26 T
2 12 Q
(5.1.2) 117.58 163.59 T
(Object Semantics) 153 163.59 T
0 8 Q
(1) 72 146.26 T
3 11 Q
(Conforming implementations shall implement copy semantics for assignment of pseudo-) 153 146.26 T
(objects, i.e. assignment of a value of a type mapped from a pseudo-object to another object) 153 134.26 T
(shall result in a copy of all components of the original.) 153 122.26 T
0 8 Q
(2) 72 104.26 T
3 11 Q
(Conforming implementations shall ensure that implementations of pseudo-objects  do not) 153 104.26 T
(\322leak\323 memory) 153 92.26 T
(.) 219.79 92.26 T
FMENDPAGE
%%EndPage: "49" 49
%%Page: "50" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(NamedV) 189 739.85 T
(alue) 224.51 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(50) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
2 12 Q
(5.1.3) 99.58 679.33 T
(Relation to the C PIDL Mapping) 135 679.33 T
0 8 Q
(1) 54 661.99 T
3 11 Q
-0.01 (Pseudo-objects and supporting declarations have corresponding C language mappings. Rep-) 135 661.99 P
(resentations of pseudo-objects have not been speci\336ed and an underlying C mapped repre-) 135 649.99 T
(sentation may be used.) 135 637.99 T
54 591.92 540 597.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 595.13 449.34 595.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 595.13 125.58 595.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.2) 107.93 601.66 T
(NamedV) 135 601.66 T
(alue) 186.3 601.66 T
0 8 Q
(1) 54 574.59 T
6 11 Q
-0.49 (NamedValue) 135 574.59 P
3 F
-0.2 ( is used only as an element of) 201 574.59 P
6 F
-0.49 (NVList.) 331.96 574.59 P
-0.49 (NamedValue) 380.71 574.59 P
3 F
-0.2 ( contains an optional) 446.71 574.59 P
(name, an any value, and labelling \337ags. Legal \337ag values are ARG_IN, ARG_OUT) 135 562.59 T
(, and) 502 562.59 T
(ARG_INOUT) 135 550.59 T
(, in bitwise combination with IN_COPY_V) 197.12 550.59 T
(ALUE. The type Flags is mapped) 386.98 550.59 T
(in accordance with the mapping rules. Appropriate Flag constants must be de\336ned by the) 135 538.59 T
-0.01 (implementation. NamedV) 135 526.59 P
-0.01 (alue is mapped to a record in the) 248.04 526.59 P
6 F
-0.02 (CORBA) 394.01 526.59 P
3 F
-0.01 ( package in conformance) 427.01 526.59 P
(with the mapping.) 135 514.59 T
6 9 Q
(    type Flags is new CORBA.Unsigned_Long;) 153 497.92 T
(    ARG_IN) 153 487.92 T
(: constant Flags;) 207 487.92 T
(    ARG_OUT) 153 477.92 T
(: constant Flags;) 212.4 477.92 T
(    ARG_INOUT) 153 467.92 T
(: constant Flags;) 223.2 467.92 T
(    IN_COPY_VALUE:) 153 457.92 T
(constant Flags;) 255.6 457.92 T
(    type NamedValue is record) 153 447.92 T
(        Name        : Identif) 153 437.92 T
(ier;) 309.6 437.92 T
(        Argument    : Any;) 153 427.92 T
(        Len         : Long;) 153 417.92 T
(        Arg_Modes   : Flags;) 153 407.92 T
(    end record;) 153 397.92 T
54 352.51 540 357.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 355.72 449.34 355.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 355.72 125.58 355.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.3) 107.93 362.25 T
(NVList) 135 362.25 T
0 8 Q
(1) 54 335.18 T
6 11 Q
-0.07 (NVList) 135 335.18 P
3 F
-0.03 ( is a  list of) 174.6 335.18 P
6 F
-0.07 (NamedValue) 225.76 335.18 P
3 F
-0.03 (s. The) 291.76 335.18 P
6 F
-0.07 (CORBA.NVList) 321.33 335.18 P
3 F
-0.03 ( package provides the mapping) 400.54 335.18 P
(for the NVList pseudo-object. The) 135 323.18 T
6 F
(Ref) 289.58 323.18 T
3 F
( type is the mapping for the reference.  New) 309.38 323.18 T
6 F
(NamedValue) 135 311.18 T
3 F
(s may be constructed only as part of an) 201 311.18 T
6 F
(NVList) 375.44 311.18 T
3 F
( through one of the) 415.04 311.18 T
6 F
-0.7 (add_item) 135 299.18 P
3 F
-0.29 ( functons. An additional version of Add_Item that uses a NamedV) 187.8 299.18 P
-0.29 (alue ar) 475.41 299.18 P
-0.29 (gument) 504.54 299.18 P
(is provided.) 135 287.18 T
6 9 Q
(package CORBA.NVList is) 153 270.51 T
(    type Object is private;) 153 250.51 T
(    procedure Add_Item) 153 230.51 T
(      \050Self       : in out Object;) 153 220.51 T
(       Item_Name  : in     Identif) 153 210.51 T
(ier;) 336.6 210.51 T
(       Item       : in     Any;) 153 200.51 T
(       Item_Flags : in     Flags;) 153 190.51 T
(       Result     :    out Status\051;) 153 180.51 T
(    procedure Add_Item) 153 170.51 T
(      \050Self   : in out Object;) 153 160.51 T
(       Item   : in     NamedValue;) 153 150.51 T
(       Result :    out Status\051;) 153 140.51 T
(    -- free and free_memory are unneeded) 153 120.51 T
(    procedure Get_Count) 153 100.51 T
FMENDPAGE
%%EndPage: "50" 50
%%Page: "51" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Request) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(51) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(            \050Self   : Object;) 171 681.33 T
(             Count  : out Corba.Long;) 171 671.33 T
(             Result : out Status\051;) 171 661.33 T
(private) 171 641.33 T
(    ... implementation def) 171 631.33 T
(ined ...) 311.4 631.33 T
(end CORBA.NVList;) 171 611.33 T
72 565.92 558 571.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 569.13 467.34 569.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 569.13 143.58 569.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.4) 125.93 575.66 T
(Request) 153 575.66 T
0 8 Q
(1) 72 548.59 T
6 11 Q
-0.55 (Request) 153 548.59 P
3 F
-0.23 ( provides the primary support for the Dynamic Invocation Interface \050DII\051.  A new) 199.2 548.59 P
-0.06 (request on a particular tar) 153 536.59 P
-0.06 (get object may be constructed using the Create_Request operation) 264.96 536.59 P
(in the Object interface. Ar) 153 524.59 T
(guments and contexts may be provided to the Create_Request) 267.96 524.59 T
(operation or may be added after construction via the Add_Ar) 153 512.59 T
(g operation in the Request) 421.32 512.59 T
(interface. Requests can be transferred to a server and responses obtained synchronously) 153 500.59 T
(through the Invoke operation. The Send operation may be used to transfer a request to a) 153 488.59 T
(server without waiting for results. Results, output ar) 153 476.59 T
(guments, and exceptions may be) 381.65 476.59 T
(obtained later with the Get_Response operation. The) 153 464.59 T
6 F
(CORBA.Request) 387.63 464.59 T
3 F
( package provides) 473.43 464.59 T
-0.18 (the Ada interface to the Request pseudo-object and is mapped in conformance with the map-) 153 452.59 P
(ping rules, except for the ar) 153 440.59 T
(guments to Add_Ar) 273.77 440.59 T
(g. The pseudo-IDL for Add_Ar) 360.95 440.59 T
(g includes) 499.14 440.59 T
-0.35 (\336ve ar) 153 428.59 P
-0.35 (guments \050a name, a T) 180.25 428.59 P
-0.35 (ypeCode, a void * for the actual value, an ar) 273.1 428.59 P
-0.35 (gument length, and a) 464.37 428.59 P
(Flag value\051 that have been replaced by a single ar) 153 416.59 T
(gument of type) 370.6 416.59 T
6 F
(NamedValue) 439.96 416.59 T
3 F
( in the Ada) 505.96 416.59 T
(mapping.) 153 404.59 T
6 9 Q
(package CORBA.Request is) 171 387.92 T
(    type Object is private;) 171 367.92 T
(    procedure  Add_Arg) 171 347.92 T
(      \050Self   : in out Object;) 171 337.92 T
(       Arg    : in     NamedValue;) 171 327.92 T
(       Result :    out Status\051;) 171 317.92 T
(    procedure Invoke) 171 297.92 T
(      \050Self         : in out Object;) 171 287.92 T
(       Invoke_Flags : in     Flags;) 171 277.92 T
(       Result       :    out Status\051;) 171 267.92 T
(    procedure Delete) 171 247.92 T
(      \050Self   : in out Object;) 171 237.92 T
(       Result :    out Status\051;) 171 227.92 T
(    procedure Send) 171 207.92 T
(      \050Self         : in out Object;) 171 197.92 T
(       Invoke_Flags : in     Flags;) 171 187.92 T
(       Result       :    out Status\051;) 171 177.92 T
(    procedure Get_Response) 171 157.92 T
(      \050Self           : in out Object;) 171 147.92 T
(       Response_Flags : in     Flags;) 171 137.92 T
(       Result         :    out Status\051;) 171 127.92 T
(private) 171 107.92 T
(    ... implementation def) 171 97.92 T
(ined ...) 311.4 97.92 T
FMENDPAGE
%%EndPage: "51" 51
%%Page: "52" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Context) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(52) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(end CORBA.Request;) 153 681.33 T
54 635.92 540 641.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 639.13 449.34 639.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 639.13 125.58 639.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.5) 107.93 645.66 T
(Context) 135 645.66 T
0 8 Q
(1) 54 618.59 T
3 11 Q
(A) 135 618.59 T
6 F
(Context) 145.69 618.59 T
3 F
( supplies optional context information associated with a method invocation.) 191.89 618.59 T
0 (Package) 135 606.59 P
6 F
-0.01 (CORBA.Context) 174.4 606.59 P
3 F
0 ( provides the Ada interface for this capability and is mapped in) 260.2 606.59 P
(accordance with the mapping rules.) 135 594.59 T
6 9 Q
(package CORBA.Context is) 153 577.92 T
(    type Object is private;) 153 557.92 T
(    procedure Set_One_Value) 153 537.92 T
(      \050Self      : in out Object;) 153 527.92 T
(       Prop_Name : in     Identif) 153 517.92 T
(ier;) 331.2 517.92 T
(       Value     : in     Corba.String;) 153 507.92 T
(       Result    :    out Status\051;) 153 497.92 T
(    procedure Set_Values) 153 477.92 T
(      \050Self    : in out Object;) 153 467.92 T
(       Values  : in     CORBA.NVList.Object;) 153 457.92 T
(       Result  :    out Status\051;) 153 447.92 T
(    procedure Get_Values) 153 427.92 T
(      \050Self        : in out Object;) 153 417.92 T
(       Start_Scope : in     Identif) 153 407.92 T
(ier;) 342 407.92 T
(       Op_Flags    : in     Flags;) 153 397.92 T
(       Prop_Name   : in     Identif) 153 387.92 T
(ier;) 342 387.92 T
(       Values      :    out CORBA.NVList.Object;) 153 377.92 T
(       Result      :    out Status\051;) 153 367.92 T
(    procedure Delete_Values) 153 347.92 T
(      \050Self      : in out Object;) 153 337.92 T
(       Prop_Name : in     Identif) 153 327.92 T
(ier;) 331.2 327.92 T
(       Result    :    out Status\051;) 153 317.92 T
(    procedure Create_Child) 153 297.92 T
(      \050Self      : in out Object;) 153 287.92 T
(       Ctx_Name  : in     Identif) 153 277.92 T
(ier;) 331.2 277.92 T
(       Child_Ctx :    out Object;) 153 267.92 T
(       Result    :    out Status\051;) 153 257.92 T
(    procedure Delete) 153 237.92 T
(      \050Self      : in out Object;) 153 227.92 T
(       Del_Flags : in     Flags;) 153 217.92 T
(       Result    :    out Status\051;) 153 207.92 T
(private) 153 187.92 T
(    ... implementation def) 153 177.92 T
(ined ...) 293.4 177.92 T
(end CORBA.Context;) 153 167.92 T
FMENDPAGE
%%EndPage: "52" 52
%%Page: "53" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Principal) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(53) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
72 668.92 558 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 672.13 467.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 672.13 143.58 672.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.6) 125.93 678.66 T
(Principal) 153 678.66 T
0 8 Q
(1) 72 651.59 T
3 11 Q
-0.13 (A) 153 651.59 P
6 F
-0.31 (Principal) 163.56 651.59 P
3 F
-0.13 ( represents information about principals requesting operations. There are no) 222.96 651.59 P
(de\336ned operations in the CORBA speci\336cation. Package) 153 639.59 T
6 F
(CORBA.Principal) 405.36 639.59 T
3 F
( provides) 504.36 639.59 T
(the Ada interface and is mapped in accordance with the mapping rules.) 153 627.59 T
6 9 Q
(package CORBA.Principal is) 171 610.92 T
(    type Object is private;) 171 590.92 T
(    -- implementations may add operations) 171 570.92 T
(private) 171 550.92 T
(    type Object is) 171 530.92 T
7 F
(... implementation def) 273.6 530.92 T
(ined ...) 392.4 530.92 T
6 F
(end CORBA.Principal;) 171 510.92 T
72 465.51 558 470.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 468.72 467.34 468.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 468.72 143.58 468.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.7) 125.93 475.25 T
(T) 153 475.25 T
(ypeCode) 159.98 475.25 T
0 8 Q
(1) 72 448.18 T
3 11 Q
-0.18 (A) 153 448.18 P
6 F
-0.43 (TypeCode) 163.51 448.18 P
3 F
-0.18 ( represents IDL type information. It is intimately related to type) 216.32 448.18 P
6 F
-0.43 (Any) 497.27 448.18 P
3 F
-0.18 (. For this) 516.36 448.18 P
(reason, package) 153 436.18 T
6 F
(TypeCode) 226 436.18 T
3 F
( that de\336nes the) 278.8 436.18 T
6 F
(Object) 350.9 436.18 T
3 F
( type for T) 390.5 436.18 T
(ypeCode is a subpackage) 436.47 436.18 T
(nested within the) 153 424.18 T
6 F
(CORBA) 230.91 424.18 T
3 F
( package. See Section) 263.91 424.18 T
(4.6.12 on page) 362.58 424.18 T
(41 for more information.) 430.1 424.18 T
6 9 Q
(package CORBA is) 171 407.51 T
(    ...) 171 387.51 T
(    type TCKind is) 171 367.51 T
(        \050tk_null,) 171 357.51 T
(         tk_void,) 171 347.51 T
(         tk_short,) 171 337.51 T
(         tk_long,) 171 327.51 T
(         tk_ushort,) 171 317.51 T
(         tk_ulong,) 171 307.51 T
(         tk_f) 171 297.51 T
(loat,) 241.2 297.51 T
(         tk_double,) 171 287.51 T
(         tk_boolean,) 171 277.51 T
(         tk_char,) 171 267.51 T
(         tk_octet,) 171 257.51 T
(         tk_any,) 171 247.51 T
(         tk_TypeCode,) 171 237.51 T
(         tk_Principal,) 171 227.51 T
(         tk_objref,) 171 217.51 T
(         tk_struct,) 171 207.51 T
(         tk_union,) 171 197.51 T
(         tk_enum,) 171 187.51 T
(         tk_string,) 171 177.51 T
(         tk_sequence,) 171 167.51 T
(         tk_array\051;) 171 157.51 T
(    package TypeCode is) 171 137.51 T
(        type Object is private;) 171 117.51 T
(        Bounds : exception;) 171 97.51 T
FMENDPAGE
%%EndPage: "53" 53
%%Page: "54" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(BOA) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(54) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(        type Bounds_Members is new CORBA.IDL_Exception_Members) 153 681.33 T
(            with null record;) 153 671.33 T
(        function Get_Members) 153 661.33 T
-1.9 (              \050X : Ada.Exceptions.Exception_Occurrence\051 return Bounds_Members;) 153 651.33 P
-1.9 (        function Equal\050Self : in Object; TC : in Object\051 return Corba.Boolean;) 153 631.33 P
-1.06 (        function "="\050Left, Right : in Object\051 return Boolean renames Equal;) 153 621.33 P
(        function Kind\050Self : in Object\051 return TCKind;) 153 601.33 T
(        function Param_Count\050Self : in Object\051 return Corba.Long;) 153 581.33 T
(        function Parameter) 153 561.33 T
(           \050Self  : in Object;) 153 551.33 T
(            Index : in Corba.Long\051  -- note origin is 0) 153 541.33 T
(                           return Any;) 153 531.33 T
(    private) 153 511.33 T
(        ... implementation def) 153 501.33 T
(ined ...) 315 501.33 T
(    end TypeCode;) 153 491.33 T
(    ...) 153 471.33 T
(end CORBA;) 153 451.33 T
54 405.92 540 411.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 409.13 449.34 409.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 409.13 125.58 409.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.8) 107.93 415.66 T
(BOA) 135 415.66 T
0 8 Q
(1) 54 388.59 T
3 11 Q
(A) 135 388.59 T
6 F
(BOA) 145.69 388.59 T
3 F
( mediates between the ORB and object implementations. The Ada mapping in pack-) 165.49 388.59 T
-0.09 (age) 135 376.59 P
6 F
-0.23 (CORBA.BOA) 152.92 376.59 P
3 F
-0.09 ( provides a) 212.32 376.59 P
6 F
-0.23 (Object) 263.06 376.59 P
3 F
-0.09 ( type for the BOA and subprograms mapped from the) 302.66 376.59 P
(CORBA IDL. In a slight deviation from the mapping, the type) 135 364.59 T
6 F
(ReferenceData) 412.12 364.59 T
3 F
( is) 497.92 364.59 T
(mapped to a) 135 352.59 T
6 F
(Stream) 191.52 352.59 T
3 F
(. This mapping better \336ts the intended use of this type than a straight) 231.12 352.59 T
(mapping of the sequence type. Implementations should be cautioned that underlying ORB) 135 340.59 T
(implementations are not required to support) 135 328.59 T
6 F
(ReferenceData) 333.29 328.59 T
3 F
(  values longer than a kilo-) 419.09 328.59 T
(byte.) 135 316.59 T
0 8 Q
(2) 54 298.59 T
3 11 Q
(Operations on BOA.Object shall be tasking-safe \050see Section) 135 298.59 T
(4.1) 406.59 298.59 T
(1 on page) 419.93 298.59 T
(48\051.) 465.45 298.59 T
6 9 Q
(package CORBA.BOA is) 153 281.92 T
(    type Object is private;) 153 261.92 T
-0.18 (    type ReferenceData is new Ada.Streams.Root_Stream_Type with private;) 153 241.92 P
(    function Create) 153 221.92 T
(      \050Self : in Object;) 153 211.92 T
(       Id   : in ReferenceData'CLASS;) 153 201.92 T
(       Intf : in CORBA.InterfaceDef.Ref'CLASS;) 153 191.92 T
(       Impl : in CORBA.ImplementationDef.Ref'CLASS\051) 153 181.92 T
(       return CORBA.Object.Ref'CLASS;) 153 171.92 T
(    function Get_Id) 153 151.92 T
(      \050Self : in Object;) 153 141.92 T
(       Obj  : in CORBA.Object.Ref'CLASS\051) 153 131.92 T
(       return ReferenceData'CLASS;) 153 121.92 T
(    procedure Dispose) 153 101.92 T
FMENDPAGE
%%EndPage: "54" 54
%%Page: "55" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(ORB) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(55) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(      \050Self : in out Object;) 171 681.33 T
(       Obj  : in CORBA.Object.Ref'CLASS\051;) 171 671.33 T
(    procedure Change_Implementation) 171 651.33 T
(      \050Self : in out Object;) 171 641.33 T
(       Obj  : in CORBA.Object.Ref'CLASS;) 171 631.33 T
(       Impl : in CORBA.ImplementationDef.Ref'CLASS\051;) 171 621.33 T
(    function Get_Principal) 171 601.33 T
(      \050Self : in Object;) 171 591.33 T
(       Obj  : in CORBA.Object.Ref'CLASS;) 171 581.33 T
(       Ev   : in CORBA.Environment.Object\051) 171 571.33 T
(        return CORBA.Principal.Object;) 171 561.33 T
(    type Exception_Type is \050No, User, System_Exception\051;) 171 541.33 T
(    procedure Set_Exception) 171 521.33 T
(      \050Self   : in out Object;) 171 511.33 T
(       Major  : in     Exception_Type;) 171 501.33 T
(       Userid : in     CORBA.String;) 171 491.33 T
(       Param  : in     IDL_Exception_Members'CLASS\051;) 171 481.33 T
(    procedure Impl_Is_Ready) 171 461.33 T
(      \050Self : in out Object;) 171 451.33 T
(       Impl : in     CORBA.ImplementationDef.Ref'CLASS\051;) 171 441.33 T
(    procedure Deactivate_Impl) 171 421.33 T
(      \050Self : in out Object;) 171 411.33 T
(       Impl : in     CORBA.ImplementationDef.Ref'CLASS\051;) 171 401.33 T
(    procedure Obj_Is_Ready) 171 381.33 T
(      \050Self : in out Object;) 171 371.33 T
(       Obj  : in     CORBA.Object.Ref'CLASS;) 171 361.33 T
(       Impl : in     CORBA.ImplementationDef.Ref'CLASS\051;) 171 351.33 T
(    procedure Deactivate_Obj) 171 331.33 T
(      \050Self : in out Object;) 171 321.33 T
(       Obj  : in     CORBA.Object.Ref'CLASS\051;) 171 311.33 T
(private) 171 291.33 T
(    ... implementation def) 171 281.33 T
(ined ...) 311.4 281.33 T
(end CORBA.BOA;) 171 271.33 T
72 225.92 558 231.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 229.13 467.34 229.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 229.13 143.58 229.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.9) 125.93 235.66 T
(ORB) 153 235.66 T
0 8 Q
(1) 72 208.59 T
3 11 Q
(An) 153 208.59 T
6 F
(ORB) 169.19 208.59 T
3 F
( is the programmer interface to the Object Request Broker) 188.99 208.59 T
(. The package) 444.08 208.59 T
6 F
(CORBA.ORB) 153 196.59 T
3 F
( provides the Ada interface to the Request Broker) 212.4 196.59 T
(. A) 429.91 196.59 T
6 F
(Ref) 446.11 196.59 T
3 F
( type is provided for) 465.91 196.59 T
(the ORB.) 153 184.59 T
6 9 Q
(package CORBA.ORB is) 171 167.92 T
(    function Object_To_String) 171 147.92 T
(      \050Obj : in CORBA.Object.Ref'CLASS\051) 171 137.92 T
(       return Corba.String;) 171 127.92 T
(    function String_to_Object) 171 107.92 T
(      \050Str : in Corba.String\051) 171 97.92 T
FMENDPAGE
%%EndPage: "55" 55
%%Page: "56" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Object) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(56) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(       return CORBA.Object.Ref;) 153 681.33 T
(    procedure Create_List) 153 661.33 T
(      \050Count     : in     Corba.Long;) 153 651.33 T
(       New_List  :    out CORBA.NVList.Object;) 153 641.33 T
(       Result    :    out Status\051;) 153 631.33 T
(    procedure Create_Operation_List) 153 611.33 T
(      \050Oper      : in     CORBA.OperationDef.Ref'CLASS;) 153 601.33 T
(       New_List  :    out CORBA.NVList.Object;) 153 591.33 T
(       Result    :    out Status\051;) 153 581.33 T
(    procedure Get_Default_Context) 153 561.33 T
(      \050Ctx    : out CORBA.Context.Object;) 153 551.33 T
(       Result : out Status\051;) 153 541.33 T
(end CORBA.ORB;) 153 521.33 T
54 475.92 540 481.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 479.13 449.34 479.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 479.13 125.58 479.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.10) 100.7 485.66 T
(Object) 135 485.66 T
0 8 Q
(1) 54 458.59 T
6 11 Q
(Object) 135 458.59 T
3 F
( is the root of the IDL interface hierarchy) 174.6 458.59 T
(. While) 355.33 458.59 T
6 F
(Object) 390.46 458.59 T
3 F
( is a normal CORBA) 430.06 458.59 T
(object \050not a pseudo-object\051, its interface is described here because it references other) 135 446.59 T
(pseudo-objects and its implementation will necessarily be dif) 135 434.59 T
(ferent. The package) 403.97 434.59 T
6 F
(CORBA.Object) 135 422.59 T
3 F
( provides the Ada interface and includes both a) 214.2 422.59 T
6 F
(Ref) 424.07 422.59 T
3 F
( type that is the root) 443.87 422.59 T
(for client-side interfaces and an) 135 410.59 T
6 F
(Object) 276.43 410.59 T
3 F
( type for server) 316.03 410.59 T
(-side interfaces. See Section) 382.7 410.59 T
(4.5 on) 509.47 410.59 T
(page) 135 398.59 T
(26 and Section) 158.52 398.59 T
(6.1 on page) 226.65 398.59 T
(59 for more information.) 280.42 398.59 T
6 9 Q
(package CORBA.Object is) 153 381.92 T
(    type Ref is tagged private;) 153 361.92 T
(    function To_Any\050From : in Ref\051 return Any;) 153 341.92 T
(    function To_Ref\050From : in Any\051 return Ref;) 153 331.92 T
(    type Object is tagged private;) 153 311.92 T
(    function Get_Implementation\050Self : in Ref\051) 153 291.92 T
(        return CORBA.ImplementationDef.Ref'CLASS;) 153 281.92 T
(    function Get_Interface\050Self : in Ref\051) 153 261.92 T
(        return CORBA.InterfaceDef.Ref'CLASS;) 153 251.92 T
(    function Is_Nil\050Self : in Ref\051 return Boolean;) 153 231.92 T
(    function Is_Null\050Self : in Ref\051 return Boolean renames Is_Nil;) 153 221.92 T
(    -- No Duplicate: use assignment) 153 201.92 T
(    procedure Release\050Self : in out Ref\051;) 153 181.92 T
(    procedure Create_Request) 153 161.92 T
(      \050Self      : in     Ref;) 153 151.92 T
(       Ctx       : in     CORBA.Context.Object;) 153 141.92 T
(       Operation : in     Identif) 153 131.92 T
(ier;) 331.2 131.92 T
(       Arg_list  : in     CORBA.NVList.Object;) 153 121.92 T
(       Result    : in out NamedValue;) 153 111.92 T
(       Request   :    out CORBA.Request.Object;) 153 101.92 T
FMENDPAGE
%%EndPage: "56" 56
%%Page: "57" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Environment) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(57) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(       Req_Flags : in     Flags;) 171 681.33 T
(       Returns   :    out Status\051;) 171 671.33 T
(private) 171 651.33 T
(    ... implementation def) 171 641.33 T
(ined ...) 311.4 641.33 T
(end CORBA.Object;) 171 631.33 T
72 585.92 558 591.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 589.13 467.34 589.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 589.13 143.58 589.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(5.1) 119.42 595.66 T
(1) 136.77 595.66 T
(Environment) 153 595.66 T
0 8 Q
(1) 72 568.59 T
3 11 Q
(The) 153 568.59 T
6 F
(Environment) 172.85 568.59 T
3 F
( pseudo-object is not needed by this mapping except as a parameter to) 245.46 568.59 T
(the) 153 556.59 T
6 F
(Get_Principa) 169.19 556.59 T
3 F
(l operation in the BOA interface. The) 248.39 556.59 T
6 F
(CORBA.Environment) 415.8 556.59 T
3 F
( pack-) 528 556.59 T
(age provides an Ada interface to which implementations may add additional operations.) 153 544.59 T
6 9 Q
(package CORBA.Environment is) 171 527.92 T
(    type Object is private;) 171 507.92 T
(private) 171 487.92 T
(    ... implementation def) 171 477.92 T
(ined ...) 311.4 477.92 T
(end CORBA.Environment;) 171 467.92 T
FMENDPAGE
%%EndPage: "57" 57
%%Page: "58" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Environment) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(58) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
FMENDPAGE
%%EndPage: "58" 58
%%Page: "59" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(59) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (CHAPTER 6) 207 677 S
4 24 Q
(Server) 297 677 T
(-Side) 359.16 677 T
(Mapping) 297 647 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
(1) 72 424.67 T
3 11 Q
(This mapping refers to the portability constraints for an implementation written in Ada  as) 153 424.67 T
-0.33 (the) 153 412.67 P
4 F
-0.33 (server side) 168.86 412.67 P
3 F
-0.33 ( mapping. The term) 216.49 412.67 P
4 F
-0.33 (server) 304.68 412.67 P
3 F
-0.33 ( here is not meant to restrict implementations to the) 332.17 412.67 P
(situation where method invocations cross address space or machine boundaries. This map-) 153 400.67 T
(ping is meant to address any implementation of an IDL interface.) 153 388.67 T
0 8 Q
(2) 72 370.67 T
3 11 Q
-0.31 (The current CORBA speci\336cation covers only a subset of the functionality needed to build a) 153 370.67 P
-0.25 (server) 153 358.67 P
-0.25 (. As a consequence, it is unlikely that a conforming, working server can be guaranteed) 179.27 358.67 P
-0.25 (to be portable. However) 153 346.67 P
-0.25 (, we expect the bulk of the server code to be portable from one ORB) 258.11 346.67 P
(implementation to another) 153 334.67 T
(.) 268.5 334.67 T
72 288.59 558 294 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 291.8 467.34 291.8 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 291.8 143.58 291.8 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(6.1) 125.93 298.33 T
(Implementing Interfaces) 153 298.33 T
0 8 Q
(1) 72 271.26 T
3 11 Q
(The implementation of an IDL interface shall be mapped to a child package, named) 153 271.26 T
6 F
(Impl) 523.56 271.26 T
3 F
(,) 549.96 271.26 T
(of that interface\325) 153 259.26 T
(s client side interface package. The speci\336cation of this package shall con-) 225.7 259.26 T
(tain subprograms associated with the IDL interface\325) 153 247.26 T
(s operations and the declaration of a) 380.9 247.26 T
(record type,) 153 235.26 T
6 F
(Object) 208.29 235.26 T
3 F
(. The operation subprograms are invoked by the ORB. The object) 247.89 235.26 T
(record is used to hold member data employed by the implementation of an interface.) 153 223.26 T
0 8 Q
(2) 72 205.26 T
3 11 Q
(If the interface has no parents, the type) 153 205.26 T
6 F
(Object) 326.81 205.26 T
3 F
( shall be declared as an \050implementor) 366.41 205.26 T
(-) 530.54 205.26 T
(de\336ned\051 extension of) 153 193.26 T
6 F
(Corba.Object.Object.) 248.62 193.26 T
3 F
(If the interface has a single parent, the) 380.62 193.26 T
(type) 153 181.26 T
6 F
(Object) 174.69 181.26 T
3 F
( shall be an extension of the) 214.29 181.26 T
6 F
(Object) 339.86 181.26 T
3 F
( type mapped from the parent interface.) 379.46 181.26 T
72 135.19 558 140.59 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 138.39 467.34 138.39 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 138.39 143.58 138.39 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(6.2) 125.93 144.93 T
(Implementing Operations and Attributes) 153 144.93 T
0 8 Q
(1) 72 117.85 T
3 11 Q
(The parameters passed to an implementation subprogram parallel those passed to the client) 153 117.85 T
(side stub but the type of the) 153 105.85 T
6 F
(Self) 277.36 105.85 T
3 F
( parameter is) 303.76 105.85 T
6 F
(access Object) 363.32 105.85 T
3 F
(  described above rather) 449.12 105.85 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 59
%%Page: "60" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Examples) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(60) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
3 11 Q
(than the reference type declared in the stub package. The types of interface parameters are) 135 679.99 T
(declared with the Ada) 135 667.99 T
6 F
(\325Class) 237.33 667.99 T
3 F
( attribute.) 276.93 667.99 T
54 621.92 540 627.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 625.13 449.34 625.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 625.13 125.58 625.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(6.3) 107.93 631.66 T
(Examples) 135 631.66 T
0 8 Q
(1) 54 604.59 T
3 11 Q
(The following IDL interface:) 135 604.59 T
0 8 Q
(2) 54 474.59 T
3 11 Q
(causes the IDL translator to generate, in addition to the client packages discussed in previ-) 135 474.59 T
(ous sections, the following implementation speci\336cation:) 135 462.59 T
0 8 Q
(3) 54 165.59 T
3 11 Q
(The placement of the object record in the private part is not mandated by the mapping.) 135 165.59 T
2 8 Q
(File cultivation.idl:) 203.4 582.59 T
6 9 Q
(#include \322barn.idl\323) 203.4 567.92 T
(interface Plow {) 203.4 552.92 T
(    long row\050\051;) 203.4 541.92 T
(    void attach\050in short blade\051;) 203.4 530.92 T
(    void harness\050in Horse power\051;) 203.4 519.92 T
(};) 203.4 508.92 T
(#pragma Subsystem\050\322Farm\323\051;) 203.4 493.92 T
2 8 Q
(File farm-plow-impl.ads:) 203.4 440.59 T
6 9 Q
(with Corba;) 203.4 425.92 T
(with Corba.Object;) 203.4 414.92 T
(with Farm.Horse;) 203.4 403.92 T
(package Farm.Plow.Impl is) 203.4 388.92 T
(    type Object is new Corba.Object.Object with private;) 203.4 373.92 T
(    function Row) 203.4 358.92 T
(            \050Self : access Object\051) 203.4 347.92 T
(        return Corba.Long;) 203.4 336.92 T
(    procedure Attach) 203.4 321.92 T
(            \050Self  : access Object;) 203.4 310.92 T
(             Blade : in Corba.Short\051;) 203.4 299.92 T
(    procedure Harness) 203.4 284.92 T
(            \050Self  : access Object;) 203.4 273.92 T
(             Power : in Farm.Horse.Ref\325Class\051;) 203.4 262.92 T
(private) 203.4 247.92 T
(    type Object is new Corba.Object.Object with) 203.4 232.92 T
(        record) 203.4 221.92 T
(            -- \050implementation data\051) 203.4 210.92 T
(        end record;) 203.4 199.92 T
(end Cultivation.Plow.Impl;) 203.4 184.92 T
197.4 594.67 197.4 489.17 2 L
V
0.5 H
0 Z
N
413.4 594.67 413.4 489.17 2 L
V
N
197.15 594.92 413.65 594.92 2 L
V
N
197.15 577.92 413.65 577.92 2 L
V
0.25 H
N
197.15 488.92 413.65 488.92 2 L
V
0.5 H
N
197.4 452.67 197.4 180.17 2 L
V
N
540 452.67 540 180.17 2 L
V
N
197.15 452.92 540.25 452.92 2 L
V
N
197.15 435.92 540.25 435.92 2 L
V
0.25 H
N
197.15 179.92 540.25 179.92 2 L
V
0.5 H
N
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 60
%%Page: "61" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(61) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (CHAPTER 7) 207 677 S
4 24 Q
(Pr) 297 677 T
(ede\336ned Ada) 320.11 677 T
(Envir) 297 648 T
(onment:) 349.44 648 T
(Subsystem) 297 619 T
(CORBA) 297 590 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(1) 72 424.67 T
3 11 Q
-0.35 (This appendix provides a  speci\336cation of the) 153 424.67 P
7 F
-0.85 (CORBA) 353.04 424.67 P
3 F
-0.35 ( package and its children that comprise) 386.04 424.67 P
-0.09 (the pre-de\336ned Ada environment which CORBA-compliant clients and servers must be pro-) 153 412.67 P
(vided by compliant products. Package CORBA is the parent package of this subsystem and) 153 400.67 T
(contains the de\336nitions of the IDL primitive types, the pre-de\336ned system exceptions, and) 153 388.67 T
(pre-de\336ned constants. Child packages are used for the pseudo-objects and for several) 153 376.67 T
0 (ancilary packages that have been de\336ned in the text. Other child packages are necessary for) 153 364.67 P
-0.13 (the mapping of the Interface Repository) 153 352.67 P
-0.13 (. Additional packages may be added by implementa-) 327.31 352.67 P
(tions, e.g., for ImplementationDef.) 153 340.67 T
2 9 Q
(2) 72 322.67 T
3 11 Q
(Any references to package) 153 322.67 T
6 9 Q
(Implementaton_Defined) 272.72 322.67 T
3 11 Q
( shown here indicate items that are to) 386.12 322.67 T
(be de\336ned by the implementation and should not be misinterpreted as the required de\336ni-) 153 310.67 T
(tions for these items. All types derived from) 153 298.67 T
6 F
(Implementation_Defined.Opaque_Type) 153 286.67 T
3 F
( are completely implementation de\336ned) 377.4 286.67 T
(and should be made private. Implementations are allowed to add de\336nitions required by) 153 274.67 T
(extensions of the CORBA speci\336cation implemented by ORB products. Other allowable) 153 262.67 T
(additions include, but are not limited to, representation clauses and additional with clauses.) 153 250.67 T
2 9 Q
(3) 72 232.67 T
3 11 Q
-0.29 (The IDL from which these packages were derived may be found in \322CORBA 1.2 Prede\336ned) 153 232.67 P
(Environment\323 on page) 153 220.67 T
(87. The IDL is also included in the following code in comments pre-) 255.34 220.67 T
(ceded by  \322) 153 208.67 T
6 F
(--I) 202.79 208.67 T
3 F
(\323.) 222.59 208.67 T
72 162.59 558 168 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 165.8 467.34 165.8 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 165.8 143.58 165.8 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.1) 123.04 172.33 T
(Package CORBA) 153 172.33 T
6 9 Q
(with Ada.Exceptions;) 126 146.59 T
(with Ada.Strings.Unbounded;) 126 136.59 T
(with Implementation_Def) 126 126.59 T
(ined; -- dummy package to let compile succeed) 250.2 126.59 T
(with Interfaces;) 126 116.59 T
(--I module CORBA {) 126 96.59 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 61
%%Page: "62" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(62) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(package CORBA is) 108 681.33 T
(-- CORBA 4.11 CORBA Module: In order to prevent names def) 108 671.33 T
(ined with the) 415.8 671.33 T
(-- CORBA specif) 108 661.33 T
(ication from clashing with names in programming languages) 189 661.33 T
(-- and other software systems, all names def) 108 651.33 T
(ined by CORBA are treated as) 345.6 651.33 T
(-- if they were def) 108 641.33 T
(ined with a module named CORBA.) 210.6 641.33 T
(    -- CORBA 4.7.1 Each IDL data type is mapped to a native data) 108 621.33 T
(    -- type via the appropriate language mapping.) 108 611.33 T
(    -- The following def) 108 601.33 T
(initions may differ. See the mapping) 237.6 601.33 T
(    -- specif) 108 591.33 T
(ication for more information.) 178.2 591.33 T
(    subtype Boolean        is Standard.Boolean;) 108 581.33 T
(    type    Short          is new Interfaces.Integer_16;) 108 571.33 T
(    type    Long           is new Interfaces.Integer_32;) 108 561.33 T
(    type    Unsigned_Short is new Interfaces.Unsigned_16;) 108 551.33 T
(    type    Unsigned_Long  is new Interfaces.Unsigned_32;) 108 541.33 T
(    type    Float          is new Interfaces.IEEE_Float_32;) 108 531.33 T
(    type    Double         is new Interfaces.IEEE_Float_64;) 108 521.33 T
(    subtype Char           is Standard.Character;) 108 511.33 T
(    type    Octet          is new Interfaces.Unsigned_8;) 108 501.33 T
(    type    String         is new Ada.Strings.Unbounded.Unbounded_String;) 108 491.33 T
(    -- Exceptions) 108 461.33 T
(    type IDL_Exception_Members is abstract tagged null record;) 108 441.33 T
(    function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051) 108 421.33 T
(    return IDL_Exception_Members is abstract;) 171 411.33 T
(    -- CORBA 4.14 Standard Exceptions:) 108 391.33 T
(    --\050ed. note: move to child .Exceptions?\051) 108 381.33 T
(    --I #def) 108 371.33 T
(ine ex_body{ unsigned long minor, completion_status completed;}) 172.8 371.33 T
(    --I enum completion_status{COMPLETED_YES, COMPLETED_NO, COMPLETED_MAYBE};) 108 361.33 T
(    type Completion_Status is) 108 351.33 T
(             \050COMPLETED_YES, COMPLETED_NO, COMPLETED_MAYBE\051;) 108 341.33 T
(    --I enum exception_type{ NO_EXCEPTION, USER_EXCEPTION, SYSTEM_EXCEPTION};) 108 321.33 T
(    type Exception_Type is) 108 311.33 T
(\050NO_EXCEPTION, USER_EXCEPTION, SYSTEM_EXCEPTION\051;) 171 301.33 T
(    type Ex_Body is new CORBA.IDL_Exception_Members with record) 108 281.33 T
(        Minor: CORBA.Unsigned_Long;) 108 271.33 T
(        Completed : Completion_Status;) 108 261.33 T
(    end record;) 108 251.33 T
(    function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051) 108 231.33 T
(                         return Ex_Body;) 108 221.33 T
(    --I exception UNKNOWN         ex_body; // the unknown exception) 108 201.33 T
(    UNKNOWN: exception;) 108 191.33 T
(    --I exception BAD_PARAM       ex_body; // an invalid parameter was passed) 108 181.33 T
(    BAD_PARAM: exception;) 108 171.33 T
(    --I exception NO_MEMORY       ex_body; // dynamic memory allocation failure) 108 161.33 T
(    NO_MEMORY: exception;) 108 151.33 T
(    --I exception IMP_LIMIT       ex_body; // violated implementation limit) 108 141.33 T
(    IMP_LIMIT: exception;) 108 131.33 T
(    --I exception COMM_FAILURE    ex_body; // communication failure) 108 121.33 T
(    COMM_FAILURE: exception;) 108 111.33 T
(    --I exception INV_OBJREF      ex_body; // invalid object reference) 108 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 62
%%Page: "63" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(63) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(    INV_OBJREF: exception;) 126 681.33 T
(    --I exception NO_PERMISSION   ex_body; // no permission for attempted op.) 126 671.33 T
(    NO_PERMISSION: exception;) 126 661.33 T
(    --I exception INTERNAL        ex_body; // ORB internal error) 126 651.33 T
(    INTERNAL: exception;) 126 641.33 T
(    --I exception MARSHAL         ex_body; // error marshalling param/result) 126 631.33 T
(    MARSHAL: exception;) 126 621.33 T
(    --I exception INITIALIZE      ex_body; // ORB initialization failure) 126 611.33 T
(    INITIALIZE: exception;) 126 601.33 T
(    --I exception NO_IMPLEMENT    ex_body;) 126 591.33 T
(                                  --// operation implementation unavailable) 126 581.33 T
(    NO_IMPLEMENT: exception;) 126 571.33 T
(    --I exception BAD_TYPECODE    ex_body; // bad typecode) 126 561.33 T
(    BAD_TYPECODE: exception;) 126 551.33 T
(    --I exception BAD_OPERATION   ex_body; // invalid operation) 126 541.33 T
(    BAD_OPERATION: exception;) 126 531.33 T
(    --I exception NO_RESOURCES    ex_body; // insuff) 126 521.33 T
(icient resources for req.) 406.8 521.33 T
(    NO_RESOURCES: exception;) 126 511.33 T
(    --I exception NO_RESPONSE     ex_body;) 126 501.33 T
(                                  --// response to request not yet available) 126 491.33 T
(    NO_RESPONSE: exception;) 126 481.33 T
(    --I exception PERSIST_STORE   ex_body; // persistent storage failure) 126 471.33 T
(    PERSIST_STORE: exception;) 126 461.33 T
(    --I exception BAD_INV_ORDER   ex_body; // routine invocations out of order) 126 451.33 T
(    BAD_INV_ORDER: exception;) 126 441.33 T
(    --I exception TRANSIENT       ex_body;) 126 431.33 T
(                                  --// transient failure - reissue request) 126 421.33 T
(    TRANSIENT: exception;) 126 411.33 T
(    --I exception FREE_MEM        ex_body; // cannot free memory) 126 401.33 T
(    FREE_MEM: exception;) 126 391.33 T
(    --I exception INV_IDENT       ex_body; // invalid identif) 126 381.33 T
(ier syntax) 455.4 381.33 T
(    INV_IDENT: exception;) 126 371.33 T
(    --I exception INV_FLAG        ex_body; // invalid f) 126 361.33 T
(lag was specif) 423 361.33 T
(ied) 498.6 361.33 T
(    INV_FLAG: exception;) 126 351.33 T
(    --I exception INTF_REPOS      ex_body;) 126 341.33 T
(                                  --// error accessing interface repository) 126 331.33 T
(    INTF_REPOS: exception;) 126 321.33 T
(    --I exception BAD_CONTEXT     ex_body; // error processing context object) 126 311.33 T
(    BAD_CONTEXT: exception;) 126 301.33 T
(    --I exception OBJ_ADAPTER     ex_body; // failure detected by object adapte) 126 291.33 T
(    OBJ_ADAPTER: exception;) 126 281.33 T
(    --I exception DATA_CONVERSION ex_body; // data conversion error) 126 271.33 T
(    DATA_CONVERSION: exception;) 126 261.33 T
(    -- CORBA 7.6 TypeCodes) 126 241.33 T
(    --I enum TCKind {) 126 221.33 T
(    --I         tk_null, tk_void,) 126 211.33 T
(    --I         tk_short, tk_long, tk_ushort, tk_ulong,) 126 201.33 T
(    --I         tk_f) 126 191.33 T
(loat, tk_double, tk_boolean, tk_char,) 234 191.33 T
(    --I         tk_octet, tk_any, tk_TypeCode, tk_Principal, tk_objref,) 126 181.33 T
(    --I         tk_struct, tk_union, tk_enum, tk_string,) 126 171.33 T
(    --I         tk_sequence, tk_array) 126 161.33 T
(    --I         };) 126 151.33 T
(    type TCKind is) 126 141.33 T
(        \050tk_null,) 126 131.33 T
(         tk_void,) 126 121.33 T
(         tk_short,) 126 111.33 T
(         tk_long,) 126 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 63
%%Page: "64" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(64) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(         tk_ushort,) 108 681.33 T
(         tk_ulong,) 108 671.33 T
(         tk_f) 108 661.33 T
(loat,) 178.2 661.33 T
(         tk_double,) 108 651.33 T
(         tk_boolean,) 108 641.33 T
(         tk_char,) 108 631.33 T
(         tk_octet,) 108 621.33 T
(         tk_any,) 108 611.33 T
(         tk_TypeCode,) 108 601.33 T
(         tk_Principal,) 108 591.33 T
(         tk_objref,) 108 581.33 T
(         tk_struct,) 108 571.33 T
(         tk_union,) 108 561.33 T
(         tk_enum,) 108 551.33 T
(         tk_string,) 108 541.33 T
(         tk_sequence,) 108 531.33 T
(         tk_array\051;) 108 521.33 T
(    -- CORBA 4.7.1.6 Any Type: The any type permits the specif) 108 501.33 T
(ication of) 442.8 501.33 T
(    -- values that can express any IDL type.) 108 491.33 T
(    type Any is private;) 108 481.33 T
(    --I interface TypeCode {) 108 461.33 T
(    package TypeCode is) 108 451.33 T
(        type Object is private;) 108 431.33 T
(        --I exception Bounds {};) 108 411.33 T
(        Bounds : exception;) 108 401.33 T
(        type Bounds_Members is new CORBA.IDL_Exception_Members) 108 391.33 T
(            with null record;) 108 381.33 T
(        function Get_Members) 108 371.33 T
(              \050X : Ada.Exceptions.Exception_Occurrence\051 return Bounds_Members;) 108 361.33 T
(        --I  boolean equal \050in TypeCode tc\051;) 108 341.33 T
-0.9 (function Equal\050Self : in Object; TC : in Object\051 return Corba.Boolean;) 171 331.33 P
(function "="\050Left, Right : in Object\051 return Boolean renames Equal;) 171 321.33 T
(        --I  TCKind kind \050\051;) 108 301.33 T
(        function Kind\050Self : in Object\051 return TCKind;) 108 291.33 T
(        --I  long param_count \050\051;) 108 271.33 T
(        --I  // The number of parameters for this TypeCode.) 108 261.33 T
(        function Param_Count\050Self : in Object\051 return Corba.Long;) 108 251.33 T
(        --I any parameter \050in long index\051 raises \050Bounds\051;) 108 231.33 T
(        --I // The index'th parameter.  Parameters are indexed) 108 221.33 T
(        --I // from 0 to \050param_count-1\051.) 108 211.33 T
(function Parameter) 171 201.33 T
(  \050Self) 171 191.33 T
( : in Object;) 208.8 191.33 T
(   Index : in Corba.Long\051  -- note origin is 0) 171 181.33 T
(                           return Any;) 108 171.33 T
(        --I     };) 108 161.33 T
(    private) 108 141.33 T
(... implementation def) 171 131.33 T
(ined ...) 289.8 131.33 T
(    end TypeCode;) 108 121.33 T
(    function Type_Of\050The_Any : in Any\051 return Typecode.Object;) 108 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 64
%%Page: "65" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(65) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(    function To_Any \050From : in Octet\051          return Any;) 126 671.33 T
(    function To_Any \050From : in Short\051          return Any;) 126 661.33 T
(    function To_Any \050From : in Long\051           return Any;) 126 651.33 T
(    function To_Any \050From : in Unsigned_Short\051 return Any;) 126 641.33 T
(    function To_Any \050From : in Unsigned_Long\051  return Any;) 126 631.33 T
(    function To_Any \050From : in Boolean\051        return Any;) 126 621.33 T
(    function To_Any \050From : in Char\051           return Any;) 126 611.33 T
(    function To_Any \050From : in String\051       return Any;) 126 601.33 T
(    function To_Octet     \050From) 126 581.33 T
(: in Any\051 return Octet;) 293.4 581.33 T
(    function To_Short     \050From) 126 571.33 T
(: in Any\051 return Short;) 293.4 571.33 T
(    function To_Long      \050From) 126 561.33 T
(: in Any\051 return Long;) 293.4 561.33 T
(    function To_Short     \050From) 126 551.33 T
(: in Any\051 return Unsigned_Short;) 293.4 551.33 T
(    function To_Long      \050From) 126 541.33 T
(: in Any\051 return Unsigned_Long;) 293.4 541.33 T
(    function To_Boolean   \050From) 126 531.33 T
(: in Any\051 return Boolean;) 293.4 531.33 T
(    function To_Char      \050From) 126 521.33 T
(: in Any\051 return Char;) 293.4 521.33 T
(    function To_String    \050From) 126 511.33 T
(: in Any\051 return String;) 293.4 511.33 T
(    --I typedef string Identif) 126 491.33 T
(ier;) 288 491.33 T
(    type Identif) 126 481.33 T
(ier is new CORBA.String;) 212.4 481.33 T
(    -- CORBA 6: Dynamic Invocation Interface) 126 461.33 T
(    -- CORBA 6.1.1 Common Data Structures) 126 451.33 T
(    --I typdef unsigned long Flags;) 126 431.33 T
(    type Flags is new CORBA.Unsigned_Long;) 126 421.33 T
(    ARG_IN) 126 411.33 T
(: constant Flags;) 189 411.33 T
(    ARG_OUT) 126 401.33 T
(: constant Flags;) 189 401.33 T
(    ARG_INOUT) 126 391.33 T
(: constant Flags;) 196.2 391.33 T
(    --I struct NamedValue {) 126 371.33 T
(    --I     Identif) 126 361.33 T
(ier  name;           // argument name) 228.6 361.33 T
(    --I     any         argument;       // argument) 126 351.33 T
(    --I     long        len;            // length/count of argument value) 126 341.33 T
(    --I     Flags       arg_modes;      // argument mode f) 126 331.33 T
(lags) 439.2 331.33 T
(    --I     };) 126 321.33 T
(    type NamedValue is record) 126 311.33 T
(        Name        : Identif) 126 301.33 T
(ier;) 282.6 301.33 T
(        Argument    : Any;) 126 291.33 T
(        Len         : Long;) 126 281.33 T
(        Arg_Modes   : Flags;) 126 271.33 T
(    end record;) 126 261.33 T
(    OUT_LIST_MEMORY) 126 241.33 T
(: constant Flags; -- CORBA 6.2.1) 228.6 241.33 T
(    IN_COPY_VALUE) 126 231.33 T
(: constant Flags; -- CORBA 6.2.2) 217.8 231.33 T
(    INV_NO_RESPONSE) 126 221.33 T
(: constant Flags; -- CORBA 6.3.1) 228.6 221.33 T
(    INV_TERM_ON_ERR) 126 211.33 T
(: constant Flags; -- CORBA 6.3.2) 228.6 211.33 T
(    RESP_NO_WAIT) 126 201.33 T
(: constant Flags; -- CORBA 6.3.3) 212.4 201.33 T
(    DEPENDENT_LIST) 126 191.33 T
(: constant Flags; -- CORBA 6.4.2) 223.2 191.33 T
(    CTX_RESTRICT_SCOPE) 126 181.33 T
(: constant Flags; -- CORBA 6.6.4) 244.8 181.33 T
(    -- CORBA 7.5.1 Container and Contained Objects) 126 161.33 T
(    -- moved to child package CORBA.Repository_Root) 126 151.33 T
(    --I typedef unsigned long Status;) 126 131.33 T
(    type Status is new Corba.Unsigned_Long;) 126 121.33 T
(private) 126 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 65
%%Page: "66" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.BOA) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(66) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(    ... implementation def) 108 671.33 T
(ined ...) 248.4 671.33 T
(end CORBA;) 108 661.33 T
54 605.92 540 611.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 609.13 449.34 609.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 609.13 125.58 609.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.2) 105.04 615.66 T
(Package CORBA.BOA) 135 615.66 T
6 9 Q
(--I     // 9.2 Basic Object Adapter Interface) 108 589.92 T
(--I     interface BOA {) 108 579.92 T
(with CORBA.Object;) 108 569.92 T
(with CORBA.Principal;) 108 559.92 T
(with CORBA.Environment;) 108 549.92 T
(with CORBA.ImplementationDef;) 108 539.92 T
(with CORBA.InterfaceDef;) 108 529.92 T
(with Ada.Streams;) 108 519.92 T
(package CORBA.BOA is) 108 499.92 T
(    type Object is private;) 108 479.92 T
(    --I typedef sequence <octet, 1024> ReferenceData;) 108 459.92 T
(    type ReferenceData is new Ada.Streams.Root_Stream_Type with private;) 108 449.92 T
(    --I Object create\050) 108 429.92 T
(    --I     in ReferenceData            id,) 108 419.92 T
(    --I     in InterfaceDef             intf,) 108 409.92 T
(    --I     in ImplementationDef        impl) 108 399.92 T
(    --I \051;) 108 389.92 T
(    function Create) 108 379.92 T
(      \050Self : in Object;) 108 369.92 T
(       Id   : in ReferenceData'CLASS;) 108 359.92 T
(       Intf : in CORBA.InterfaceDef.Ref'CLASS;) 108 349.92 T
(       Impl : in CORBA.ImplementationDef.Ref'CLASS\051) 108 339.92 T
(       return CORBA.Object.Ref'CLASS;) 108 329.92 T
(    --I ReferenceData get_id \050in Object obj\051;) 108 309.92 T
(    function Get_Id) 108 299.92 T
(      \050Self : in Object;) 108 289.92 T
(       Obj  : in CORBA.Object.Ref'CLASS\051) 108 279.92 T
(       return ReferenceData'CLASS;) 108 269.92 T
(    --I void dispose \050in Object obj\051;) 108 249.92 T
(    procedure Dispose) 108 239.92 T
(      \050Self : in out Object;) 108 229.92 T
(       Obj  : in CORBA.Object.Ref'CLASS\051;) 108 219.92 T
(    --I void change_implementation \050) 108 199.92 T
(    --I     in Object                   obj,) 108 189.92 T
(    --I     in ImplementationDef        impl) 108 179.92 T
(    --I     \051;) 108 169.92 T
(    procedure Change_Implementation) 108 159.92 T
(      \050Self : in out Object;) 108 149.92 T
(       Obj  : in CORBA.Object.Ref'CLASS;) 108 139.92 T
(       Impl : in CORBA.ImplementationDef.Ref'CLASS\051;) 108 129.92 T
(    --I Principal get_principal \050) 108 109.92 T
(    --I     in Object                   obj,) 108 99.92 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 66
%%Page: "67" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Bounded_Strings;) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(67) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(    --I     in Environment              ev) 126 681.33 T
(    --I     \051;) 126 671.33 T
(       function Get_Principal) 126 661.33 T
( \050Self : in Object;) 189 651.33 T
(  Obj  : in CORBA.Object.Ref'CLASS;) 189 641.33 T
(  Ev   : in CORBA.Environment.Object\051) 189 631.33 T
(        return CORBA.Principal.Object;) 126 621.33 T
(    --I enum exception_type {NO, USER, SYSTEM_EXCEPTION};) 126 601.33 T
(    type Exception_Type is \050No, User, System_Exception\051;) 126 591.33 T
(    --I  void set_exception \050) 126 571.33 T
(    --I      in exception_type   major,   // NO, USER, or SYSTEM_EXCEPTION) 126 561.33 T
(    --I      in string           userid,  // exception type id) 126 551.33 T
(    --I      in void             *param   // pointer to associated data) 126 541.33 T
(    --I         \051;) 126 531.33 T
(    procedure Set_Exception) 126 521.33 T
(      \050Self   : in out Object;) 126 511.33 T
(       Major  : in     Exception_Type;) 126 501.33 T
(       Userid : in     CORBA.String;) 126 491.33 T
(       Param  : in     IDL_Exception_Members'CLASS\051;) 126 481.33 T
(    --I void impl_is_ready \050in ImplementationDef impl\051;) 126 461.33 T
(    procedure Impl_Is_Ready) 126 451.33 T
(      \050Self : in out Object;) 126 441.33 T
(       Impl : in     CORBA.ImplementationDef.Ref'CLASS\051;) 126 431.33 T
(    --I void deactivate_impl \050in ImplementationDef impl\051;) 126 411.33 T
(    procedure Deactivate_Impl) 126 401.33 T
(      \050Self : in out Object;) 126 391.33 T
(       Impl : in     CORBA.ImplementationDef.Ref'CLASS\051;) 126 381.33 T
(    --I void obj_is_ready \050in Object obj, in ImplementationDef impl\051;) 126 361.33 T
(    procedure Obj_Is_Ready) 126 351.33 T
(      \050Self : in out Object;) 126 341.33 T
(       Obj  : in     CORBA.Object.Ref'CLASS;) 126 331.33 T
(       Impl : in     CORBA.ImplementationDef.Ref'CLASS\051;) 126 321.33 T
(    --I void deactivate_obj \050in Object obj\051;) 126 301.33 T
(    procedure Deactivate_Obj) 126 291.33 T
(      \050Self : in out Object;) 126 281.33 T
(       Obj  : in     CORBA.Object.Ref'CLASS\051;) 126 271.33 T
(--I     };) 126 251.33 T
(private) 126 241.33 T
(    ... implementation def) 126 231.33 T
(ined ...) 266.4 231.33 T
(end CORBA.BOA;) 126 221.33 T
72 175.92 558 181.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 179.13 467.34 179.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 179.13 143.58 179.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.3) 123.04 185.66 T
(Package CORBA.Bounded_Strings;) 153 185.66 T
6 9 Q
(with Ada.Strings.Bounded;) 126 159.92 T
(package CORBA.Bounded_Strings renames Ada.Strings.Bounded;) 126 149.92 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 67
%%Page: "68" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Context) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(68) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
54 668.92 540 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 672.13 449.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 672.13 125.58 672.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.4) 105.04 678.66 T
(Package CORBA.Context) 135 678.66 T
6 9 Q
(--I  interface Context {) 108 652.92 T
(with CORBA.NVList;) 108 642.92 T
(package CORBA.Context is) 108 632.92 T
(    type Object is private;) 108 612.92 T
(--I) 108 592.92 T
(Status set_one_value \050) 171 592.92 T
(--I) 108 582.92 T
(    in Identif) 171 582.92 T
(ier) 246.6 582.92 T
(prop_name,   // property name to add) 262.8 582.92 T
(--I) 108 572.92 T
(    in string) 171 572.92 T
(value) 241.2 572.92 T
(     // property value to add) 268.2 572.92 T
(--I) 108 562.92 T
(\051;) 171 562.92 T
(    procedure Set_One_Value) 108 552.92 T
(      \050Self) 108 542.92 T
( : in out Object;) 171 542.92 T
(       Prop_Name : in     Identif) 108 532.92 T
(ier;) 286.2 532.92 T
(       Value) 108 522.92 T
( : in     Corba.String;) 172.8 522.92 T
(       Result) 108 512.92 T
( :    out Status\051;) 178.2 512.92 T
(--I) 108 492.92 T
(Status set_values \050) 171 492.92 T
(--I) 108 482.92 T
(    in NVList) 171 482.92 T
(values) 241.2 482.92 T
(      // property values to be changed) 273.6 482.92 T
(--I) 108 472.92 T
(\051;) 171 472.92 T
(    procedure Set_Values) 108 462.92 T
(      \050Self    : in out Object;) 108 452.92 T
(       Values  : in     CORBA.NVList.Object;) 108 442.92 T
(       Result :    out Status\051;) 108 432.92 T
(--I) 108 412.92 T
(Status get_values \050) 171 412.92 T
(--I) 108 402.92 T
(    in Identif) 171 402.92 T
(ier) 246.6 402.92 T
(start_scope, // search scope) 262.8 402.92 T
(--I) 108 392.92 T
(    in Flags) 171 392.92 T
(op_f) 235.8 392.92 T
(lags,    // operation f) 257.4 392.92 T
(lags) 381.6 392.92 T
(--I) 108 382.92 T
(    in Identif) 171 382.92 T
(ier) 246.6 382.92 T
(prop_name,   // name of property\050s\051 to retrieve) 262.8 382.92 T
(--I) 108 372.92 T
(    out NVList) 171 372.92 T
(values) 246.6 372.92 T
(     // requested property\050s\051) 279 372.92 T
(--I) 108 362.92 T
(\051;) 171 362.92 T
(    procedure Get_Values) 108 352.92 T
(      \050Self) 108 342.92 T
(   : in out Object;) 171 342.92 T
(       Start_Scope : in     Identif) 108 332.92 T
(ier;) 297 332.92 T
(       Op_Flags) 108 322.92 T
(   : in     Flags;) 189 322.92 T
(       Prop_Name   : in     Identif) 108 312.92 T
(ier;) 297 312.92 T
(       Values) 108 302.92 T
(   :    out CORBA.NVList.Object;) 178.2 302.92 T
(       Result) 108 292.92 T
(   :    out Status\051;) 178.2 292.92 T
(--I) 108 272.92 T
(Status delete_values \050) 171 272.92 T
(--I) 108 262.92 T
(    in Identif) 171 262.92 T
(ier) 246.6 262.92 T
(prop_name    // name of property\050s\051 to delete) 262.8 262.92 T
(--I) 108 252.92 T
(\051;) 171 252.92 T
(    procedure Delete_Values) 108 242.92 T
(      \050Self) 108 232.92 T
( : in out Object;) 171 232.92 T
(       Prop_Name : in     Identif) 108 222.92 T
(ier;) 286.2 222.92 T
(       Result) 108 212.92 T
( :    out Status\051;) 178.2 212.92 T
(--I) 108 192.92 T
(Status create_child \050) 171 192.92 T
(--I) 108 182.92 T
(    in Identif) 171 182.92 T
(ier) 246.6 182.92 T
(ctx_name,    // name of context object) 262.8 182.92 T
(--I) 108 172.92 T
(    out Context) 171 172.92 T
(child_ctx    // newly created context object) 252 172.92 T
(--I) 108 162.92 T
(\051;) 171 162.92 T
(    procedure Create_Child) 108 152.92 T
(      \050Self) 108 142.92 T
( : in out Object;) 171 142.92 T
(       Ctx_Name) 108 132.92 T
( : in     Identif) 189 132.92 T
(ier;) 280.8 132.92 T
(       Child_Ctx :    out Object;) 108 122.92 T
(       Result) 108 112.92 T
( :    out Status\051;) 178.2 112.92 T
(--I) 108 92.92 T
(Status delete \050) 171 92.92 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 68
%%Page: "69" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Environment) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(69) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(--I) 126 681.33 T
(    in Flags) 189 681.33 T
(del_f) 253.8 681.33 T
(lags    // f) 280.8 681.33 T
(lags controlling deletion) 345.6 681.33 T
(--I) 126 671.33 T
(\051;) 189 671.33 T
(--I     };) 126 661.33 T
(    procedure Delete) 126 651.33 T
(      \050Self) 126 641.33 T
( : in out Object;) 189 641.33 T
(       Del_Flags : in     Flags;) 126 631.33 T
(       Result) 126 621.33 T
( :    out Status\051;) 196.2 621.33 T
(private) 126 601.33 T
(    ... implementation def) 126 591.33 T
(ined ...) 266.4 591.33 T
(end CORBA.Context;) 126 581.33 T
72 535.92 558 541.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 539.13 467.34 539.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 539.13 143.58 539.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.5) 123.04 545.66 T
(Package CORBA.Environment) 153 545.66 T
6 9 Q
(--I interface Environment {};) 126 519.92 T
(package CORBA.Environment is) 126 509.92 T
(    type Object is private;) 126 489.92 T
(private) 126 469.92 T
(    ... implementation def) 126 459.92 T
(ined ...) 266.4 459.92 T
(end CORBA.Environment;) 126 449.92 T
72 404.51 558 409.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 407.72 467.34 407.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 407.72 143.58 407.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.6) 123.04 414.25 T
(Package CORBA.Forward) 153 414.25 T
6 9 Q
(with Corba.Object;) 126 388.51 T
(generic) 126 378.51 T
(package Corba.Forward is) 126 368.51 T
(    type Ref is private;) 126 358.51 T
(    generic) 126 348.51 T
(        type Ref_Type is new Corba.Object.Ref with private;) 126 338.51 T
(    package Convert is) 126 328.51 T
(        function To_Ref\050The_Forward : in Ref\051 return Ref_Type;) 126 318.51 T
(        function To_Forward\050The_Ref : in Ref_Type\051 return Ref;) 126 308.51 T
(    end Convert;) 126 298.51 T
(private) 126 288.51 T
(    type Ref is new Corba.Object.Ref with null record;) 126 278.51 T
(    function To_Ref\050From : in Any\051 return Ref;) 126 268.51 T
(end Corba.Forward;) 126 258.51 T
72 213.1 558 218.51 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 216.31 467.34 216.31 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 216.31 143.58 216.31 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.7) 123.04 222.84 T
(Package CORBA.Iterate_Over_Any_Elements) 153 222.84 T
6 9 Q
(generic) 126 197.1 T
(    with procedure Process) 126 187.1 T
(    \050The_Any) 207 177.1 T
( : in     Any;) 271.8 177.1 T
(     Continue) 207 167.1 T
( :    out boolean\051;) 277.2 167.1 T
(procedure Corba.Iterate_Over_Any_Elements) 126 157.1 T
(\050In_Any) 207 147.1 T
(: in     Any\051;) 244.8 147.1 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 69
%%Page: "70" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.NVList) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(70) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
54 668.92 540 674.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 672.13 449.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 672.13 125.58 672.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.8) 105.04 678.66 T
(Package CORBA.NVList) 135 678.66 T
6 9 Q
(--I interface NVList {) 108 652.92 T
(package CORBA.NVList is) 108 642.92 T
(    type Object is private;) 108 622.92 T
(--I Status add_item \050) 108 602.92 T
(--I     in Identif) 108 592.92 T
(ier) 205.2 592.92 T
(item_name,) 221.4 592.92 T
(// name of item) 275.4 592.92 T
(--I     in TypeCode) 108 582.92 T
(item_type,) 210.6 582.92 T
(// item datatype) 264.6 582.92 T
(--I) 108 572.92 T
(in void) 171 572.92 T
(*value,) 208.8 572.92 T
(// item value) 246.6 572.92 T
(--I) 108 562.92 T
(in long) 171 562.92 T
(value_len,) 208.8 562.92 T
(// length of item value) 262.8 562.92 T
(--I) 108 552.92 T
(in Flags) 171 552.92 T
(item_f) 214.2 552.92 T
(lags) 246.6 552.92 T
(// item f) 268.2 552.92 T
(lags) 316.8 552.92 T
(--I) 108 542.92 T
(\051;) 171 542.92 T
(    procedure Add_Item) 108 532.92 T
(      \050Self) 108 522.92 T
(  : in out Object;) 171 522.92 T
(       Item_Name  : in     Identif) 108 512.92 T
(ier;) 291.6 512.92 T
(       Item) 108 502.92 T
(  : in     Any;) 171 502.92 T
(       Item_Flags : in     Flags;) 108 492.92 T
(       Result) 108 482.92 T
(  :    out Status\051;) 178.2 482.92 T
(    procedure Add_Item) 108 472.92 T
(      \050Self   : in out Object;) 108 462.92 T
(       Item   : in     NamedValue;) 108 452.92 T
(       Result :    out Status\051;) 108 442.92 T
(--I Status free \050\051;  -- unneeded) 108 422.92 T
(--I Status free_memory \050\051; -- unneeded) 108 412.92 T
(--I Status get_count \050) 108 392.92 T
(--I     out long) 108 382.92 T
(count) 194.4 382.92 T
(    // number of entries in the list) 221.4 382.92 T
(--I) 108 372.92 T
(\051;) 171 372.92 T
(    procedure Get_Count) 108 362.92 T
(            \050Self : Object;) 108 352.92 T
(             Count : out Corba.Long;) 108 342.92 T
(             Result : out Status\051;) 108 332.92 T
(--I };) 108 312.92 T
(private) 108 302.92 T
(    ... implementation def) 108 292.92 T
(ined ...;) 248.4 292.92 T
(end CORBA.NVList;) 108 272.92 T
54 227.51 540 232.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 230.72 449.34 230.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 230.72 125.58 230.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.9) 105.04 237.25 T
(Package CORBA.Object) 135 237.25 T
6 9 Q
(with CORBA.ImplementationDef;) 108 211.51 T
(with CORBA.InterfaceDef;) 108 201.51 T
(with CORBA.Context;) 108 191.51 T
(with CORBA.NVList;) 108 181.51 T
(with CORBA.Request;) 108 171.51 T
(--I interface Object {) 108 161.51 T
(package CORBA.Object is) 108 151.51 T
(    type Ref is tagged private;) 108 131.51 T
(    function To_Any\050From : in Ref\051 return Any;) 108 111.51 T
(    function To_Ref\050From : in Any\051 return Ref;) 108 101.51 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 70
%%Page: "71" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.ORB) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(71) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(    type Object is tagged private;) 126 671.33 T
(    --I ImplementationDef get_implementation\050\051;) 126 651.33 T
(    function Get_Implementation\050Self : in Ref\051) 126 641.33 T
(        return CORBA.ImplementationDef.Ref'CLASS;) 126 631.33 T
(    --I InterfaceDef get_interface\050\051;) 126 611.33 T
(    function Get_Interface\050Self : in Ref\051) 126 601.33 T
(        return CORBA.InterfaceDef.Ref'CLASS;) 126 591.33 T
(    --I boolean is_nil\050\051;) 126 571.33 T
(    function Is_Nil\050Self : in Ref\051 return Boolean;) 126 561.33 T
(    function Is_Null\050Self : in Ref\051 return Boolean renames Is_Nil;) 126 551.33 T
(    --I Object duplicate\050\051;) 126 531.33 T
(    -- use assignment) 126 521.33 T
(    --I void release\050\051;) 126 501.33 T
(    procedure Release\050Self : in out Ref\051;) 126 491.33 T
(    --I Status create_request\050) 126 471.33 T
(    --I     in Context          ctx,) 126 461.33 T
(    --I     in Identif) 126 451.33 T
(ier       operation,) 244.8 451.33 T
(    --I     in NVList           arg_list,) 126 441.33 T
(    --I     inout NamedValue    result,) 126 431.33 T
(    --I     out Request         request,) 126 421.33 T
(    --I     in Flags            req_f) 126 411.33 T
(lags) 325.8 411.33 T
(    --I \051;) 126 401.33 T
(    procedure Create_Request) 126 391.33 T
(      \050Self      : in     Ref;) 126 381.33 T
(       Ctx       : in     CORBA.Context.Object;) 126 371.33 T
(       Operation : in     Identif) 126 361.33 T
(ier;) 304.2 361.33 T
(       Arg_list  : in     CORBA.NVList.Object;) 126 351.33 T
(       Result    : in out NamedValue;) 126 341.33 T
(       Request   :    out CORBA.Request.Object;) 126 331.33 T
(       Req_Flags : in     Flags;) 126 321.33 T
(       Returns   :    out Status\051;) 126 311.33 T
(private) 126 291.33 T
(    ... implementation def) 126 281.33 T
(ined ...) 266.4 281.33 T
(end CORBA.Object;) 126 271.33 T
72 225.92 558 231.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 229.13 467.34 229.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 229.13 143.58 229.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.10) 115.82 235.66 T
(Package CORBA.ORB) 153 235.66 T
6 9 Q
(-- 8.1 Converting Object References to Strings) 126 209.92 T
(-- interface ORB {) 126 199.92 T
(with CORBA.NVList;) 126 189.92 T
(with CORBA.OperationDef;) 126 179.92 T
(with CORBA.Object;) 126 169.92 T
(with CORBA.Context;) 126 159.92 T
(with CORBA.Sequences;) 126 149.92 T
(with CORBA.BOA;) 126 139.92 T
(package CORBA.ORB is) 126 129.92 T
(--     string object_to_string \050in Object obj\051;) 126 109.92 T
(    function Object_To_String) 126 99.92 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 71
%%Page: "72" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Principal) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(72) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(      \050Obj : in CORBA.Object.Ref'CLASS\051) 108 681.33 T
(       return Corba.String;) 108 671.33 T
(--     Object string_to_object \050in string str\051;) 108 651.33 T
(    function String_to_Object) 108 641.33 T
(      \050Str : in Corba.String\051) 108 631.33 T
(       return CORBA.Object.Ref;) 108 621.33 T
(--     Status create_list \050) 108 601.33 T
(--) 108 591.33 T
(in long) 171 591.33 T
(count,) 225 591.33 T
(--) 108 581.33 T
(out NVList) 171 581.33 T
(new_list) 225 581.33 T
(--) 108 571.33 T
(\051;) 171 571.33 T
(    procedure Create_List) 108 561.33 T
(      \050Count) 108 551.33 T
(: in     Corba.Long;) 172.8 551.33 T
(       New_List) 108 541.33 T
(:    out CORBA.NVList.Object;) 189 541.33 T
(       Result) 108 531.33 T
(:    out Status\051;) 178.2 531.33 T
(--     Status create_operation_list \050) 108 511.33 T
(--) 108 501.33 T
(in OperationDef) 171 501.33 T
(oper,) 252 501.33 T
(--) 108 491.33 T
(out NVList) 171 491.33 T
(new_list) 225 491.33 T
(--) 108 481.33 T
(\051;) 171 481.33 T
(    procedure Create_Operation_List) 108 471.33 T
(      \050Oper) 108 461.33 T
(: in     CORBA.OperationDef.Ref'CLASS;) 171 461.33 T
(       New_List) 108 451.33 T
(:    out CORBA.NVList.Object;) 189 451.33 T
(       Result) 108 441.33 T
(:    out Status\051;) 178.2 441.33 T
(--     Status get_default_context \050out Context ctx\051;) 108 421.33 T
(    procedure Get_Default_Context) 108 411.33 T
(      \050Ctx    : out CORBA.Context.Object;) 108 401.33 T
(       Result : out Status\051;) 108 391.33 T
(end CORBA.ORB;) 108 371.33 T
54 325.92 540 331.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 329.13 449.34 329.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 329.13 125.58 329.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.1) 98.53 335.66 T
(1) 118.77 335.66 T
(Package CORBA.Principal) 135 335.66 T
6 9 Q
(--I Interface Principal{};) 108 309.92 T
(package CORBA.Principal is) 108 299.92 T
(    type Object is private;) 108 279.92 T
(    -- implementations may add operations) 108 259.92 T
(private) 108 239.92 T
(    ... implementation def) 108 229.92 T
(ined ...) 248.4 229.92 T
(end CORBA.Principal;) 108 219.92 T
54 174.51 540 179.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
134.49 177.72 449.34 177.72 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
53.82 177.72 125.58 177.72 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.12) 97.82 184.25 T
(Package CORBA.Request) 135 184.25 T
6 9 Q
(-- 6.2 Request Routines) 108 158.51 T
(--I interface Request {) 108 148.51 T
(package CORBA.Request is) 108 138.51 T
(    type Object is private;) 108 118.51 T
(--I Status add_arg \050) 108 98.51 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 72
%%Page: "73" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(73) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(--I     in Identif) 126 681.33 T
(ier   name,            // argument name) 223.2 681.33 T
(--I     in TypeCode     arg_type,        // argument datatype) 126 671.33 T
(--I     in void         *value,          // argument value to be added) 126 661.33 T
(--I     in long         len,             // length/count of argument value) 126 651.33 T
(--I     in Flags        arg_f) 126 641.33 T
(lags        // argument f) 282.6 641.33 T
(lags) 417.6 641.33 T
(--I     \051;) 126 631.33 T
(    procedure  Add_Arg) 126 621.33 T
(      \050Self   : in out Object;) 126 611.33 T
(       Arg    : in     NamedValue;) 126 601.33 T
(       Result :    out Status\051;) 126 591.33 T
(--I Status invoke \050) 126 571.33 T
(--I     in Flags  invoke_f) 126 561.33 T
(lags   // invocation f) 266.4 561.33 T
(lags) 385.2 561.33 T
(--I     \051;) 126 551.33 T
(    procedure Invoke) 126 541.33 T
(      \050Self) 126 531.33 T
(    : in out Object;) 189 531.33 T
(       Invoke_Flags : in     Flags;) 126 521.33 T
(       Result) 126 511.33 T
(    :    out Status\051;) 196.2 511.33 T
(--I Status delete \050\051;) 126 491.33 T
(    procedure Delete) 126 481.33 T
(      \050Self   : in out Object;) 126 471.33 T
(       Result :    out Status\051;) 126 461.33 T
(--I Status send \050) 126 441.33 T
(--I     in Flags                 invoke_f) 126 431.33 T
(lags    // invocation f) 347.4 431.33 T
(lags) 471.6 431.33 T
(--I     \051;) 126 421.33 T
(    procedure Send) 126 411.33 T
(      \050Self) 126 401.33 T
(    : in out Object;) 189 401.33 T
(       Invoke_Flags : in     Flags;) 126 391.33 T
(       Result) 126 381.33 T
(    :    out Status\051;) 196.2 381.33 T
(--I Status get_response \050) 126 361.33 T
(--I     in Flags                 response_f) 126 351.33 T
(lags  // response f) 358.2 351.33 T
(lags) 460.8 351.33 T
(--I     \051;) 126 341.33 T
(    procedure Get_Response) 126 331.33 T
(      \050Self) 126 321.33 T
(      : in out Object;) 189 321.33 T
(       Response_Flags : in     Flags;) 126 311.33 T
(       Result) 126 301.33 T
(      :    out Status\051;) 196.2 301.33 T
(--I };) 126 281.33 T
(private) 126 271.33 T
(    ... implementation def) 126 261.33 T
(ined ...) 266.4 261.33 T
(end CORBA.Request;) 126 251.33 T
72 205.92 558 211.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 209.13 467.34 209.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 209.13 143.58 209.13 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(G.13) 115.82 215.66 T
(Package CORBA.Sequences) 153 215.66 T
6 9 Q
(package Corba.Sequences is) 126 189.92 T
(-----------------------------------------------------------------------) 126 169.92 T
(--) 126 159.92 T
(-- Corba.Sequences is the parent of the bounded and unbounded sequence) 126 149.92 T
(-- packages.  Some exceptions and types common to both are declared here) 126 139.92 T
(-- \050following the structure of Ada.Strings\051.) 126 129.92 T
(--) 126 119.92 T
(-- Length_Error is raised when sequence lengths are exceeded.) 126 109.92 T
(-- Pattern_Error is raised when a null pattern string is passed.) 126 99.92 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 73
%%Page: "74" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(74) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(-- Index_Error is raised when indexes are out of range.) 108 681.33 T
(--) 108 671.33 T
(-----------------------------------------------------------------------) 108 661.33 T
(   Length_Error, Pattern_Error, Index_Error : exception;) 108 641.33 T
(   type Alignment is \050Left, Right, Center\051;) 108 621.33 T
(   type Truncation is \050Left, Right, Error\051;) 108 611.33 T
(   type Membership is \050Inside, Outside\051;) 108 601.33 T
(   type Direction is \050Forward, Backward\051;) 108 591.33 T
(   type Trim_End is \050Left, Right, Both\051;) 108 571.33 T
(-----------------------------------------------------------------) 108 541.33 T
(--) 108 531.33 T
(-- This package provides the def) 108 521.33 T
(initions required by the IDL-to-Ada) 280.8 521.33 T
(-- mapping specif) 108 511.33 T
(ication for bounded sequences.) 199.8 511.33 T
(-- This package is instantiated for each IDL bounded sequence type.) 108 501.33 T
(-- This package def) 108 491.33 T
(ines the sequence type and the operations upon it.) 210.6 491.33 T
(-- This package is modelled after Ada.Strings.) 108 481.33 T
(--) 108 471.33 T
(-- Most query operations are not usable until the sequence object has) 108 461.33 T
(-- been initialized through an assignment.) 108 451.33 T
(--) 108 441.33 T
(-- Value semantics apply to assignment, that is, assignment of a sequence) 108 431.33 T
(-- value to a sequence object yields a copy of the value.) 108 421.33 T
(--) 108 411.33 T
(-- The exception INDEX_ERROR is raised when indexes are not in the range) 108 401.33 T
(-- of the object being manipulated.) 108 391.33 T
(--) 108 381.33 T
(-- The exception CONSTRAINT_ERROR is raised when objects that have not) 108 371.33 T
(-- been initalized or assigned to are manipulated.) 108 361.33 T
(--) 108 351.33 T
(-------------------------------------------------------------------) 108 341.33 T
(    generic) 108 321.33 T
(        type Element is private;) 108 301.33 T
(        Max : Positive;    -- Maximum length of the bounded sequence) 108 291.33 T
(    package Bounded is) 108 271.33 T
(        Max_Length : constant Positive := Max;) 108 251.33 T
(        type Element_Array is array \050Positive range <>\051 of Element;) 108 231.33 T
(        Null_Element_Array : Element_Array\0501..0\051;) 108 211.33 T
(        type Sequence is private;) 108 191.33 T
(        Null_Sequence : constant Sequence;) 108 171.33 T
(        subtype Length_Range is Natural range 0 .. Max_Length;) 108 151.33 T
(        function Length \050Source : in Sequence\051) 108 131.33 T
(                return Length_Range;) 108 121.33 T
(        type Element_Array_Access is access all Element_Array;) 108 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 74
%%Page: "75" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(75) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(        procedure Free\050X : in out Element_Array_Access\051;) 126 681.33 T
(        --------------------------------------------------------) 126 661.33 T
(        -- Conversion, Concatenation, and Selection Functions --) 126 651.33 T
(        --------------------------------------------------------) 126 641.33 T
(        function To_Sequence) 126 621.33 T
(                    \050Source : in Element_Array;) 126 611.33 T
(                     Drop   : in Truncation := Error\051) 126 601.33 T
(                return Sequence;) 126 591.33 T
(        function To_Sequence) 126 571.33 T
(            \050Length : in Length_Range\051) 126 561.33 T
(             return      Sequence;) 126 551.33 T
(        function To_Element_Array \050Source : in Sequence\051) 126 531.33 T
(                return Element_Array;) 126 521.33 T
(        function Append) 126 501.33 T
(            \050Left, Right : in Sequence;) 126 491.33 T
(             Drop        : in Truncation  := Error\051) 126 481.33 T
(             return        Sequence;) 126 471.33 T
(        function Append) 126 451.33 T
(            \050Left  : in Sequence;) 126 441.33 T
(             Right : in Element_Array;) 126 431.33 T
(             Drop  : in Truncation := Error\051) 126 421.33 T
(             return  Sequence;) 126 411.33 T
(        function Append) 126 391.33 T
(            \050Left  : in Element_Array;) 126 381.33 T
(             Right : in Sequence;) 126 371.33 T
(             Drop  : in Truncation := Error\051) 126 361.33 T
(             return  Sequence;) 126 351.33 T
(        function Append) 126 331.33 T
(            \050Left  : in Sequence;) 126 321.33 T
(             Right : in Element;) 126 311.33 T
(             Drop  : in Truncation := Error\051) 126 301.33 T
(             return  Sequence;) 126 291.33 T
(        function Append) 126 271.33 T
(            \050Left  : in Element;) 126 261.33 T
(             Right : in Sequence;) 126 251.33 T
(             Drop  : in Truncation := Error\051) 126 241.33 T
(             return  Sequence;) 126 231.33 T
(        procedure Append) 126 211.33 T
(                    \050Source   : in out Sequence;) 126 201.33 T
(                     New_Item : in Sequence;) 126 191.33 T
(                     Drop     : in Truncation := Error\051;) 126 181.33 T
(        procedure Append) 126 161.33 T
(                    \050Source   : in out Sequence;) 126 151.33 T
(                     New_Item : in Element_Array;) 126 141.33 T
(                     Drop     : in Truncation := Error\051;) 126 131.33 T
(        procedure Append) 126 111.33 T
(                    \050Source   : in out Sequence;) 126 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 75
%%Page: "76" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(76) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(                     New_Item : in Element;) 108 681.33 T
(                     Drop     : in Truncation := Error\051;) 108 671.33 T
(        function "&" \050Left, Right : in Sequence\051) 108 651.33 T
(                return Sequence;) 108 641.33 T
(        function "&") 108 621.33 T
(                    \050Left  : in Sequence;) 108 611.33 T
(                     Right : in Element_Array\051) 108 601.33 T
(                return  Sequence;) 108 591.33 T
(        function "&") 108 571.33 T
(                    \050Left  : in Element_Array;) 108 561.33 T
(                     Right : in Sequence\051) 108 551.33 T
(                return  Sequence;) 108 541.33 T
(        function "&") 108 521.33 T
(                    \050Left  : in Sequence;) 108 511.33 T
(                     Right : in Element\051) 108 501.33 T
(                return  Sequence;) 108 491.33 T
(        function "&") 108 471.33 T
(                    \050Left  : in Element;) 108 461.33 T
(                     Right : in Sequence\051) 108 451.33 T
(                return  Sequence;) 108 441.33 T
(        function Element_Of) 108 421.33 T
(                    \050Source : in Sequence;) 108 411.33 T
(                     Index  : in Positive\051) 108 401.33 T
(                return   Element;) 108 391.33 T
(        procedure Replace_Element) 108 371.33 T
(                    \050Source : in out Sequence;) 108 361.33 T
(                     Index  : in Positive;) 108 351.33 T
(                     By     : in Element\051;) 108 341.33 T
(        function Slice) 108 321.33 T
(                    \050Source : in Sequence;) 108 311.33 T
(                     Low    : in Positive;) 108 301.33 T
(                     High   : in Natural\051) 108 291.33 T
(                return   Element_Array;) 108 281.33 T
(        function "=" \050Left, Right : in Sequence\051) 108 261.33 T
(                return Boolean;) 108 251.33 T
(        function "=") 108 231.33 T
(                    \050Left  : in Sequence;) 108 221.33 T
(                     Right : in Element_Array\051) 108 211.33 T
(                return  Boolean;) 108 201.33 T
(        function "=") 108 181.33 T
(                    \050Left  : in Element_Array;) 108 171.33 T
(                     Right : in Sequence\051) 108 161.33 T
(                return  Boolean;) 108 151.33 T
(        ----------------------) 108 131.33 T
(        -- Search functions --) 108 121.33 T
(        ----------------------) 108 111.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 76
%%Page: "77" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(77) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(        function Index) 126 681.33 T
(                    \050Source   : in Sequence;) 126 671.33 T
(                     Pattern  : in Element_Array;) 126 661.33 T
(                     Going    : in Direction := Forward\051) 126 651.33 T
(                return     Natural;) 126 641.33 T
(        function Count) 126 621.33 T
(                    \050Source  : in Sequence;) 126 611.33 T
(                     Pattern : in Element_Array\051) 126 601.33 T
(                return    Natural;) 126 591.33 T
(        -----------------------------------------) 126 571.33 T
(        -- Sequence transformation subprograms --) 126 561.33 T
(        -----------------------------------------) 126 551.33 T
(        function Replace_Slice) 126 531.33 T
(                    \050Source : in Sequence;) 126 521.33 T
(                     Low    : in Positive;) 126 511.33 T
(                     High   : in Natural;) 126 501.33 T
(                     By     : in Element_Array;) 126 491.33 T
(                     Drop   : in Truncation := Error\051) 126 481.33 T
(                return   Sequence;) 126 471.33 T
(        procedure Replace_Slice) 126 451.33 T
(                    \050Source   : in out Sequence;) 126 441.33 T
(                     Low      : in Positive;) 126 431.33 T
(                     High     : in Natural;) 126 421.33 T
(                     By       : in Element_Array;) 126 411.33 T
(                     Drop     : in Truncation := Error\051;) 126 401.33 T
(        function Insert) 126 381.33 T
(                    \050Source   : in Sequence;) 126 371.33 T
(                     Before   : in Positive;) 126 361.33 T
(                     New_Item : in Element_Array;) 126 351.33 T
(                     Drop     : in Truncation := Error\051) 126 341.33 T
(                return     Sequence;) 126 331.33 T
(        procedure Insert) 126 311.33 T
(                    \050Source   : in out Sequence;) 126 301.33 T
(                     Before   : in Positive;) 126 291.33 T
(                     New_Item : in Element_Array;) 126 281.33 T
(                     Drop     : in Truncation := Error\051;) 126 271.33 T
(        function Overwrite) 126 251.33 T
(                    \050Source   : in Sequence;) 126 241.33 T
(                     Position : in Positive;) 126 231.33 T
(                     New_Item : in Element_Array;) 126 221.33 T
(                     Drop     : in Truncation := Error\051) 126 211.33 T
(                return     Sequence;) 126 201.33 T
(        procedure Overwrite) 126 181.33 T
(                    \050Source    : in out Sequence;) 126 171.33 T
(                     Position  : in Positive;) 126 161.33 T
(                     New_Item  : in Element_Array;) 126 151.33 T
(                     Drop      : in Truncation := Error\051;) 126 141.33 T
(        function Delete) 126 121.33 T
(                    \050Source  : in Sequence;) 126 111.33 T
(                     From    : in Positive;) 126 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 77
%%Page: "78" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(78) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(                     Through : in Natural\051) 108 681.33 T
(                return    Sequence;) 108 671.33 T
(        procedure Delete) 108 651.33 T
(                    \050Source  : in out Sequence;) 108 641.33 T
(                     From    : in Positive;) 108 631.33 T
(                     Through : in Natural\051;) 108 621.33 T
(        -----------------------------------) 108 601.33 T
(        -- Sequence selector subprograms --) 108 591.33 T
(        -----------------------------------) 108 581.33 T
(        function Head) 108 561.33 T
(                    \050Source : in Sequence;) 108 551.33 T
(                     Count  : in Natural;) 108 541.33 T
(                     Pad    : in Element;) 108 531.33 T
(                     Drop   : in Truncation := Error\051) 108 521.33 T
(                return   Sequence;) 108 511.33 T
(        procedure Head) 108 491.33 T
(                    \050Source : in out Sequence;) 108 481.33 T
(                     Count  : in Natural;) 108 471.33 T
(                     Pad    : in Element;) 108 461.33 T
(                     Drop   : in Truncation := Error\051;) 108 451.33 T
(        function Tail) 108 431.33 T
(                    \050Source : in Sequence;) 108 421.33 T
(                     Count  : in Natural;) 108 411.33 T
(                     Pad    : in Element;) 108 401.33 T
(                     Drop   : in Truncation := Error\051) 108 391.33 T
(                return   Sequence;) 108 381.33 T
(        procedure Tail) 108 361.33 T
(                    \050Source : in out Sequence;) 108 351.33 T
(                     Count  : in Natural;) 108 341.33 T
(                     Pad    : in Element;) 108 331.33 T
(                     Drop   : in Truncation := Error\051;) 108 321.33 T
(        --------------------------------------) 108 301.33 T
(        -- Sequence constructor subprograms --) 108 291.33 T
(        --------------------------------------) 108 281.33 T
(        function "*") 108 261.33 T
(                    \050Left  : in Natural;) 108 251.33 T
(                     Right : in Element\051) 108 241.33 T
(                return  Sequence;) 108 231.33 T
(        function "*") 108 211.33 T
(                    \050Left  : in Natural;) 108 201.33 T
(                     Right : in Element_Array\051) 108 191.33 T
(                return  Sequence;) 108 181.33 T
(        function "*") 108 161.33 T
(                    \050Left  : in Natural;) 108 151.33 T
(                     Right : in Sequence\051) 108 141.33 T
(                return  Sequence;) 108 131.33 T
(        function Replicate) 108 111.33 T
(                    \050Count : in Natural;) 108 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 78
%%Page: "79" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(79) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(                     Item  : in Element;) 126 681.33 T
(                     Drop  : in Truncation := Error\051) 126 671.33 T
(        return  Sequence;) 126 661.33 T
(        function Replicate) 126 641.33 T
(                    \050Count : in Natural;) 126 631.33 T
(                     Item  : in Element_Array;) 126 621.33 T
(                     Drop  : in Truncation := Error\051) 126 611.33 T
(        return  Sequence;) 126 601.33 T
(        function Replicate) 126 581.33 T
(                    \050Count : in Natural;) 126 571.33 T
(                     Item  : in Sequence;) 126 561.33 T
(                     Drop  : in Truncation := Error\051) 126 551.33 T
(        return  Sequence;) 126 541.33 T
(    private) 126 521.33 T
(        ... implementation def) 126 501.33 T
(ined ...) 288 501.33 T
(    end Bounded;) 126 481.33 T
(-------------------------------------------------------------------) 126 451.33 T
(-- This package provides the def) 126 441.33 T
(initions required by the IDL-to-Ada) 298.8 441.33 T
(-- mapping specif) 126 431.33 T
(ication for unbounded sequences.) 217.8 431.33 T
(-- This package is instantiated for each IDL unbounded sequence type.) 126 421.33 T
(-- This package def) 126 411.33 T
(ines the sequence type and the operations upon it.) 228.6 411.33 T
(-- This package is modelled after Ada.Strings.) 126 401.33 T
(--) 126 391.33 T
(-- Most query operations are not usable until the sequence object has) 126 381.33 T
(-- been initialized through an assignment.) 126 371.33 T
(--) 126 361.33 T
(-- Value semantics apply to assignment, that is, assignment of a sequence) 126 351.33 T
(-- value to a sequence object yields a copy of the value.) 126 341.33 T
(--) 126 331.33 T
(-- The exception INDEX_ERROR is raised when indexes are not in the range) 126 321.33 T
(-- of the object being manipulated.) 126 311.33 T
(--) 126 301.33 T
(-- The exception CONSTRAINT_ERROR is raised when objects that have not) 126 291.33 T
(-- been initalized or assigned to are manipulated.) 126 281.33 T
(--) 126 271.33 T
(    -----------------------------------------------------------------) 126 261.33 T
(    generic) 126 241.33 T
(       type Element is private;) 126 221.33 T
(    package Unbounded is) 126 201.33 T
(       type Element_Array is array \050integer range <>\051 of Element;) 126 181.33 T
(       Null_Element_Array : Element_Array\0501..0\051;) 126 161.33 T
(       type Sequence is private;) 126 141.33 T
(       Null_Sequence : constant Sequence;) 126 121.33 T
(       function Length \050Source : in Sequence\051) 126 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 79
%%Page: "80" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(80) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(               return Natural;) 108 681.33 T
(        type Element_Array_Access is access all Element_Array;) 108 661.33 T
(        procedure Free\050X : in out Element_Array_Access\051;) 108 651.33 T
(       --------------------------------------------------------) 108 631.33 T
(       -- Conversion, Concatenation, and Selection Functions --) 108 621.33 T
(       --------------------------------------------------------) 108 611.33 T
(       function To_Sequence) 108 591.33 T
(                   \050Source : in Element_Array\051) 108 581.33 T
(               return Sequence;) 108 571.33 T
(       function To_Sequence) 108 551.33 T
(           \050Length : in Natural\051) 108 541.33 T
(            return      Sequence;) 108 531.33 T
(       function To_Element_Array \050Source : in Sequence\051) 108 511.33 T
(               return Element_Array;) 108 501.33 T
(       procedure Append) 108 481.33 T
(                   \050Source   : in out Sequence;) 108 471.33 T
(                    New_Item : in Sequence\051;) 108 461.33 T
(       procedure Append) 108 441.33 T
(                   \050Source   : in out Sequence;) 108 431.33 T
(                    New_Item : in Element_Array\051;) 108 421.33 T
(       procedure Append) 108 401.33 T
(                   \050Source   : in out Sequence;) 108 391.33 T
(                    New_Item : in Element\051;) 108 381.33 T
(       function "&" \050Left, Right : in Sequence\051) 108 361.33 T
(               return Sequence;) 108 351.33 T
(       function "&") 108 331.33 T
(                   \050Left  : in Sequence;) 108 321.33 T
(                    Right : in Element_Array\051) 108 311.33 T
(               return  Sequence;) 108 301.33 T
(       function "&") 108 281.33 T
(                   \050Left  : in Element_Array;) 108 271.33 T
(                    Right : in Sequence\051) 108 261.33 T
(               return  Sequence;) 108 251.33 T
(       function "&") 108 231.33 T
(                   \050Left  : in Sequence;) 108 221.33 T
(                    Right : in Element\051) 108 211.33 T
(               return  Sequence;) 108 201.33 T
(       function "&") 108 181.33 T
(                   \050Left  : in Element;) 108 171.33 T
(                    Right : in Sequence\051) 108 161.33 T
(               return  Sequence;) 108 151.33 T
(       function Element_Of) 108 131.33 T
(                   \050Source : in Sequence;) 108 121.33 T
(                    Index  : in Positive\051) 108 111.33 T
(               return   Element;) 108 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 80
%%Page: "81" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(81) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(       procedure Replace_Element) 126 671.33 T
(                   \050Source : in out Sequence;) 126 661.33 T
(                    Index  : in Positive;) 126 651.33 T
(                    By     : in Element\051;) 126 641.33 T
(       function Slice) 126 621.33 T
(                   \050Source : in Sequence;) 126 611.33 T
(                    Low    : in Positive;) 126 601.33 T
(                    High   : in Natural\051) 126 591.33 T
(               return   Element_Array;) 126 581.33 T
(       function "=" \050Left, Right : in Sequence\051) 126 561.33 T
(               return Boolean;) 126 551.33 T
(       function "=") 126 531.33 T
(                   \050Left  : in Element_Array;) 126 521.33 T
(                    Right : in Sequence\051) 126 511.33 T
(               return  Boolean;) 126 501.33 T
(       function "=") 126 481.33 T
(                   \050Left  : in Sequence;) 126 471.33 T
(                    Right : in Element_Array\051) 126 461.33 T
(               return  Boolean;) 126 451.33 T
(       ----------------------) 126 431.33 T
(       -- Search functions --) 126 421.33 T
(       ----------------------) 126 411.33 T
(       function Index) 126 391.33 T
(                   \050Source   : in Sequence;) 126 381.33 T
(                    Pattern  : in Element_Array;) 126 371.33 T
(                    Going    : in Direction := Forward\051) 126 361.33 T
(               return     Natural;) 126 351.33 T
(       function Count) 126 331.33 T
(                   \050Source  : in Sequence;) 126 321.33 T
(                    Pattern : in Element_Array\051) 126 311.33 T
(               return    Natural;) 126 301.33 T
(       -----------------------------------------) 126 281.33 T
(       -- Sequence transformation subprograms --) 126 271.33 T
(       -----------------------------------------) 126 261.33 T
(       function Replace_Slice) 126 241.33 T
(                   \050Source : in Sequence;) 126 231.33 T
(                    Low    : in Positive;) 126 221.33 T
(                    High   : in Natural;) 126 211.33 T
(                    By     : in Element_Array\051) 126 201.33 T
(               return   Sequence;) 126 191.33 T
(       procedure Replace_Slice) 126 171.33 T
(                   \050Source   : in out Sequence;) 126 161.33 T
(                    Low      : in Positive;) 126 151.33 T
(                    High     : in Natural;) 126 141.33 T
(                    By       : in Element_Array\051;) 126 131.33 T
(       function Insert) 126 111.33 T
(                   \050Source   : in Sequence;) 126 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 81
%%Page: "82" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(82) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(                    Before   : in Positive;) 108 681.33 T
(                    New_Item : in Element_Array\051) 108 671.33 T
(               return     Sequence;) 108 661.33 T
(       procedure Insert) 108 641.33 T
(                   \050Source   : in out Sequence;) 108 631.33 T
(                    Before   : in Positive;) 108 621.33 T
(                    New_Item : in Element_Array\051;) 108 611.33 T
(       function Overwrite) 108 591.33 T
(                   \050Source   : in Sequence;) 108 581.33 T
(                    Position : in Positive;) 108 571.33 T
(                    New_Item : in Element_Array\051) 108 561.33 T
(               return     Sequence;) 108 551.33 T
(       procedure Overwrite) 108 531.33 T
(                   \050Source    : in out Sequence;) 108 521.33 T
(                    Position  : in Positive;) 108 511.33 T
(                    New_Item  : in Element_Array\051;) 108 501.33 T
(       function Delete) 108 481.33 T
(                   \050Source  : in Sequence;) 108 471.33 T
(                    From    : in Positive;) 108 461.33 T
(                    Through : in Natural\051) 108 451.33 T
(               return    Sequence;) 108 441.33 T
(       procedure Delete) 108 421.33 T
(                   \050Source  : in out Sequence;) 108 411.33 T
(                    From    : in Positive;) 108 401.33 T
(                    Through : in Natural\051;) 108 391.33 T
(       -----------------------------------) 108 371.33 T
(       -- Sequence selector subprograms --) 108 361.33 T
(       -----------------------------------) 108 351.33 T
(       function Head) 108 341.33 T
(                   \050Source : in Sequence;) 108 331.33 T
(                    Count  : in Natural;) 108 321.33 T
(                    Pad    : in Element\051) 108 311.33 T
(               return   Sequence;) 108 301.33 T
(       procedure Head) 108 281.33 T
(                   \050Source : in out Sequence;) 108 271.33 T
(                    Count  : in Natural;) 108 261.33 T
(                    Pad    : in Element\051;) 108 251.33 T
(       function Tail) 108 231.33 T
(                   \050Source : in Sequence;) 108 221.33 T
(                    Count  : in Natural;) 108 211.33 T
(                    Pad    : in Element\051) 108 201.33 T
(               return   Sequence;) 108 191.33 T
(       procedure Tail) 108 171.33 T
(                   \050Source : in out Sequence;) 108 161.33 T
(                    Count  : in Natural;) 108 151.33 T
(                    Pad    : in Element\051;) 108 141.33 T
(       --------------------------------------) 108 121.33 T
(       -- Sequence constructor subprograms --) 108 111.33 T
(       --------------------------------------) 108 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 82
%%Page: "83" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 207 739.85 T
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(83) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(       function "*") 126 671.33 T
(                   \050Left  : in Natural;) 126 661.33 T
(                    Right : in Element\051) 126 651.33 T
(               return  Sequence;) 126 641.33 T
(       function "*") 126 621.33 T
(                   \050Left  : in Natural;) 126 611.33 T
(                    Right : in Element_Array\051) 126 601.33 T
(               return  Sequence;) 126 591.33 T
(       function "*") 126 571.33 T
(                   \050Left  : in Natural;) 126 561.33 T
(                    Right : in Sequence\051) 126 551.33 T
(               return  Sequence;) 126 541.33 T
(    private) 126 511.33 T
(        ... implementation def) 126 491.33 T
(ined ...) 288 491.33 T
(    end Unbounded;) 126 481.33 T
(end Sequences;) 126 461.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 83
%%Page: "84" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.Sequences) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(84) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 84
%%Page: "85" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(85) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (APPENDIX H) 207 677 S
4 24 Q
(Pr) 297 677 T
(eliminary) 320.11 677 T
(CORBA 2.0) 297 647 T
(Changes) 297 617 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(1) 72 424.67 T
3 11 Q
(This appendix provides some initial mappings for pseudo-object changes to appear in the) 153 424.67 T
(CORBA 2.0 speci\336cation. It is not a normative part of this speci\336cation. The IDL is drawn) 153 412.67 T
(from OMG Document  94-10-24  \322Revised Initialisation Document.\323) 153 400.67 T
72 354.59 558 360 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
152.49 357.8 467.34 357.8 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 357.8 143.58 357.8 2 L
0 Z
N
0 0 612 792 C
2 13 Q
0 X
0 0 0 1 0 0 0 K
(H.1) 123.77 364.33 T
(Package CORBA.ORB) 153 364.33 T
6 9 Q
(package CORBA.ORB is) 126 338.59 T
(--I from Initialisation Specif) 126 318.59 T
(ication 94-10-24) 288 318.59 T
(    --I) 126 308.59 T
(typedef string ORBid;) 189 308.59 T
(    type ORBid is new CORBA.String;) 126 298.59 T
(    --I) 126 288.59 T
(typedef sequence <string> arg_list;) 189 288.59 T
(    package String_Unbounded is new CORBA.Sequences.Unbounded\050CORBA.String\051;) 126 278.59 T
(    type Arg_List is new String_Unbounded.Sequence;) 126 268.59 T
(    --I) 126 248.59 T
(ORB ORB_init \050inout arg_list argv; in ORBid orb_identif) 189 248.59 T
(ier\051;) 486 248.59 T
(    procedure ORB_Init) 126 238.59 T
(      \050Argv) 126 228.59 T
(      : in out Arg_List;) 189 228.59 T
(       Orb_Identif) 126 218.59 T
(ier : in     ORBid\051;) 223.2 218.59 T
(--     existing package) 126 198.59 T
(-- from Initialisation Specif) 126 178.59 T
(ication 94-10-24) 282.6 178.59 T
(    --I) 126 158.59 T
(typedef string OAid;) 189 158.59 T
(    type OAid is new CORBA.String;) 126 148.59 T
(    --I // Template fo OA initialisation operations) 126 128.59 T
(    --I // <OA> <OA>_init \050 inout arg_list argv,) 126 118.59 T
(    --I) 126 108.59 T
(            in OAid oa_identif) 207 108.59 T
(ier\051;) 369 108.59 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 85
%%Page: "86" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
2 9 Q
(Package CORBA.ORB) 189 739.85 T
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(86) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(    --I) 108 681.33 T
(BOA BOA_init \050inout arg_list argv,) 171 681.33 T
(    --I) 108 671.33 T
(      in OAid boa_identif) 189 671.33 T
(ier\051;) 324 671.33 T
(    procedure BOA_Init) 108 661.33 T
(      \050Argv) 108 651.33 T
(      : in out Arg_List;) 171 651.33 T
(       BOA_Identif) 108 641.33 T
(ier : in     OAid;) 205.2 641.33 T
(       Result) 108 631.33 T
(      :    out CORBA.BOA.Object\051;) 178.2 631.33 T
(    --I) 108 601.33 T
(typedef string ObjectId;) 171 601.33 T
(    type ObjectID is new CORBA.String;) 108 591.33 T
(    --I) 108 571.33 T
(typedef sequence <ObjectId> ObjectIdList;) 171 571.33 T
(    package ObjectID_Unbounded is new CORBA.Sequences.Unbounded\050ObjectID\051;) 108 561.33 T
(    type ObjectIDList is new ObjectID_Unbounded.Sequence;) 108 551.33 T
(    --I) 108 531.33 T
(exception InvalidName {};) 171 531.33 T
(    InvalidName : exception;) 108 521.33 T
(    type InvalidName_Members is new CORBA.IDL_Exception_Members) 108 511.33 T
(with null record;) 171 501.33 T
(function Get_Members\050X: Ada.Exceptions.Exception_Occurrence\051) 171 491.33 T
(  return InvalidName_Members;) 171 481.33 T
(    --I) 108 461.33 T
(ObjectIdList list_initial_services\050\051;) 171 461.33 T
(    function List_Initial_Services return ObjectIDList;) 108 451.33 T
(    --I) 108 431.33 T
(Object resolve_initial_references\050in ObjectId identif) 171 431.33 T
(ier\051) 457.2 431.33 T
(    --I) 108 421.33 T
(    raises \050InvalidName\051;) 171 421.33 T
(    function Resolve_Initial_References\050Identif) 108 411.33 T
(ier : in ObjectID\051) 361.8 411.33 T
(      return CORBA.Object.Ref'Class;) 108 401.33 T
(end CORBA.ORB;) 108 381.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 86
%%Page: "87" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(87) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (APPENDIX I) 207 677 S
4 24 Q
(CORBA 1.2) 297 677 T
(Pr) 297 647 T
(ede\336ned) 320.11 647 T
(Envir) 297 617 T
(onment) 349.44 617 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(1) 72 424.67 T
3 11 Q
(This appendix provides a compendium of the IDL module) 153 424.67 T
6 F
(CORBA) 411.77 424.67 T
3 F
( de\336ned in the CORBA) 444.77 424.67 T
(speci\336cation V) 153 412.67 T
(ersion 1.2. This IDL was used in the mapping process as reference for devel-) 218.08 412.67 T
(oping the pseudo-object mappings. It is not a normative part of this speci\336cation.) 153 400.67 T
6 9 Q
(// V1.2) 126 384 T
(//module CORBA {) 126 364 T
(    interface TypeCode;) 126 344 T
(    interface Object;) 126 334 T
(    // 6.1.3) 126 314 T
(    typedef  unsigned long) 126 294 T
(Status;) 266.4 294 T
(    // 7.5.1) 126 274 T
(    typedef  string) 126 254 T
(Identif) 228.6 254 T
(ier;) 266.4 254 T
(    typedef  string) 126 244 T
(RepositoryId;) 228.6 244 T
(    typedef  Identif) 126 234 T
(ier) 234 234 T
(InterfaceName;) 250.2 234 T
(    interface Container;) 126 224 T
(    interface Contained;) 126 214 T
(    typedef  sequence<RepositoryId>) 126 204 T
(RepositoryIdSeq;) 315 204 T
(    typedef  sequence<Identif) 126 194 T
(ier>) 282.6 194 T
(Identif) 304.2 194 T
(ierSeq;) 342 194 T
(    typedef  sequence<string>) 126 184 T
(StringSeq;) 282.6 184 T
(    typedef  sequence<Container>) 126 174 T
(ContainerSeq;) 298.8 174 T
(    typedef  sequence<Contained>) 126 164 T
(ContainedSeq;) 298.8 164 T
(    // 6.1.1 Common Data Structures) 126 144 T
(    typedef  unsigned long) 126 124 T
(Flags;) 266.4 124 T
(    struct NamedValue {) 126 104 T
(Identif) 189 94 T
(ier) 226.8 94 T
(name;) 243 94 T
(// argument name) 270 94 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 87
%%Page: "88" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(88) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(any) 171 681.33 T
(argument;) 207 681.33 T
(// argument) 255.6 681.33 T
(long) 171 671.33 T
(len;) 207 671.33 T
(// length/count of argument value) 243 671.33 T
(Flags) 171 661.33 T
(arg_modes;) 207 661.33 T
(// argument mode f) 261 661.33 T
(lags) 358.2 661.33 T
(    };) 108 651.33 T
(    // 6.2 Request Routines) 108 631.33 T
(    interface Request {) 108 611.33 T
(Status add_arg \050) 171 591.33 T
(    in Identif) 171 581.33 T
(ier) 246.6 581.33 T
(name,) 262.8 581.33 T
(// argument name) 289.8 581.33 T
(    in TypeCode) 171 571.33 T
(arg_type,) 252 571.33 T
(// argument datatype) 300.6 571.33 T
(    in void) 171 561.33 T
(*value,) 230.4 561.33 T
(// argument value to be added) 268.2 561.33 T
(    in long) 171 551.33 T
(len,) 230.4 551.33 T
(// length/count of argument value) 261 551.33 T
(    in Flags) 171 541.33 T
(arg_f) 235.8 541.33 T
(lags) 262.8 541.33 T
(// argument f) 284.4 541.33 T
(lags) 354.6 541.33 T
(\051;) 171 531.33 T
(Status invoke \050) 171 521.33 T
(    in Flags) 171 511.33 T
(invoke_f) 235.8 511.33 T
(lags) 279 511.33 T
(// invocation f) 300.6 511.33 T
(lags) 381.6 511.33 T
(\051;) 171 501.33 T
(Status delete_X \050\051;) 171 491.33 T
(Status send \050) 171 481.33 T
(    in Flags) 171 471.33 T
(invoke_f) 235.8 471.33 T
(lags) 279 471.33 T
(// invocation f) 300.6 471.33 T
(lags) 381.6 471.33 T
(\051;) 171 461.33 T
(Status get_response \050) 171 451.33 T
(    in Flags) 171 441.33 T
(response_f) 235.8 441.33 T
(lags) 289.8 441.33 T
(// response f) 311.4 441.33 T
(lags) 381.6 441.33 T
(\051;) 171 431.33 T
(    };) 108 421.33 T
(    // 6.4 List Operations) 108 401.33 T
(    interface NVList {) 108 381.33 T
(Status add_item \050) 171 371.33 T
(    in Identif) 171 361.33 T
(ier) 246.6 361.33 T
(item_name,) 262.8 361.33 T
(// name of item) 316.8 361.33 T
(    in TypeCode) 171 351.33 T
(item_type,) 252 351.33 T
(// item datatype) 306 351.33 T
(    in void) 171 341.33 T
(*value,) 230.4 341.33 T
(// item value) 268.2 341.33 T
(    in long) 171 331.33 T
(value_len,) 230.4 331.33 T
(// length of item value) 284.4 331.33 T
(    in Flags) 171 321.33 T
(item_f) 235.8 321.33 T
(lags) 268.2 321.33 T
(// item f) 289.8 321.33 T
(lags) 338.4 321.33 T
(\051;) 171 311.33 T
(Status free \050\051;) 171 301.33 T
(Status free_memory \050\051;) 171 291.33 T
(Status get_count \050) 171 281.33 T
(    out long) 171 271.33 T
(count) 235.8 271.33 T
(// number of entries in the list) 262.8 271.33 T
(\051;) 171 261.33 T
(    };) 108 251.33 T
(    // 6.6 Context Objects) 108 231.33 T
(    interface Context {) 108 211.33 T
(Status set_one_value \050) 171 201.33 T
(    in Identif) 171 191.33 T
(ier) 246.6 191.33 T
(prop_name,) 262.8 191.33 T
(// property name to add) 316.8 191.33 T
(    in string) 171 181.33 T
(value) 241.2 181.33 T
(// property value to add) 268.2 181.33 T
(\051;) 171 171.33 T
(Status set_values \050) 171 161.33 T
(    in NVList) 171 151.33 T
(values) 241.2 151.33 T
(// property values to be changed) 273.6 151.33 T
(\051;) 171 141.33 T
(Status get_values \050) 171 131.33 T
(    in Identif) 171 121.33 T
(ier) 246.6 121.33 T
(start_scope,) 262.8 121.33 T
(// search scope) 327.6 121.33 T
(    in Flags) 171 111.33 T
(op_f) 235.8 111.33 T
(lags,) 257.4 111.33 T
(// operation f) 284.4 111.33 T
(lags) 360 111.33 T
(    in Identif) 171 101.33 T
(ier) 246.6 101.33 T
(prop_name,) 262.8 101.33 T
(// name of property\050s\051 to retrieve) 316.8 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 88
%%Page: "89" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(89) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(    out NVList) 189 681.33 T
(values) 264.6 681.33 T
(// requested property\050s\051) 297 681.33 T
(\051;) 189 671.33 T
(Status delete_values \050) 189 661.33 T
(    in Identif) 189 651.33 T
(ier) 264.6 651.33 T
(prop_name) 280.8 651.33 T
(// name of property\050s\051 to delete) 329.4 651.33 T
(\051;) 189 641.33 T
(Status create_child \050) 189 631.33 T
(    in Identif) 189 621.33 T
(ier) 264.6 621.33 T
(ctx_name,) 280.8 621.33 T
(// name of context object) 329.4 621.33 T
(    out Context) 189 611.33 T
(child_ctx) 270 611.33 T
(// newly created context object) 318.6 611.33 T
(\051;) 189 601.33 T
(Status delete_X \050) 189 591.33 T
(    in Flags) 189 581.33 T
(del_f) 253.8 581.33 T
(lags) 280.8 581.33 T
(// f) 302.4 581.33 T
(lags controlling deletion) 324 581.33 T
(\051;) 189 571.33 T
(    };) 126 561.33 T
(    // 7.5.1 Container and Contained Interfaces) 126 541.33 T
(    interface Contained {) 126 521.33 T
(struct Description {) 189 511.33 T
(    Identif) 189 501.33 T
(ier) 248.4 501.33 T
(name;) 264.6 501.33 T
(    any) 189 491.33 T
(value;) 226.8 491.33 T
(};) 189 481.33 T
(attribute Identif) 189 471.33 T
(ier) 280.8 471.33 T
(name;) 297 471.33 T
(attribute RepositoryId) 189 461.33 T
(id;) 307.8 461.33 T
(attribute RepositoryId) 189 451.33 T
(def) 307.8 451.33 T
(ined_in;) 324 451.33 T
(ContainerSeq within \050\051;) 189 441.33 T
(Description describe \050\051;) 189 431.33 T
(    };) 126 421.33 T
(    interface Container {) 126 401.33 T
(struct Description {) 189 391.33 T
(    Contained) 189 381.33 T
(contained_object;) 259.2 381.33 T
(    Identif) 189 371.33 T
(ier) 248.4 371.33 T
(name;) 264.6 371.33 T
(    any) 189 361.33 T
(value;) 226.8 361.33 T
(};) 189 351.33 T
(typedef sequence<Description>) 189 341.33 T
(DescriptionSeq;) 345.6 341.33 T
(ContainedSeq) 189 321.33 T
(contents \050) 253.8 321.33 T
(    in InterfaceName) 189 311.33 T
(limit_type,) 297 311.33 T
(    in boolean) 189 301.33 T
(exclude_inherited) 264.6 301.33 T
(\051;) 189 291.33 T
(ContainedSeq) 189 281.33 T
(lookup_name \050) 253.8 281.33 T
(    in Identif) 189 271.33 T
(ier) 264.6 271.33 T
(search_name,) 280.8 271.33 T
(    in long) 189 261.33 T
(levels_to_search,) 248.4 261.33 T
(    in InterfaceName) 189 251.33 T
(limit_type,) 297 251.33 T
(    in boolean) 189 241.33 T
(exclude_inherited) 264.6 241.33 T
(\051;) 189 231.33 T
(DescriptionSeq) 189 221.33 T
(describe_contents \050) 264.6 221.33 T
(    in InterfaceName) 189 211.33 T
(limit_type,) 297 211.33 T
(    in boolean) 189 201.33 T
(exclude_inherited,) 264.6 201.33 T
(    in long) 189 191.33 T
(max_returned_objs) 248.4 191.33 T
(\051;) 189 181.33 T
(    };) 126 171.33 T
(    // 7.5.2 Repository) 126 151.33 T
(    interface Repository : Container {) 126 131.33 T
(Contained lookup_id \050in RepositoryId search_id\051;) 189 121.33 T
(    };) 126 111.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 89
%%Page: "90" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(90) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(    struct RepositoryDescription {) 108 681.33 T
(Identif) 171 671.33 T
(ier) 208.8 671.33 T
(name;) 225 671.33 T
(Repository) 171 661.33 T
(id;) 225 661.33 T
(Repository) 171 651.33 T
(def) 225 651.33 T
(ined_in;) 241.2 651.33 T
(    };) 108 641.33 T
(    // 7.5.3 ModuleDef) 108 621.33 T
(    interface ModuleDef : Container, Contained {};) 108 601.33 T
(    struct ModuleDescription {) 108 581.33 T
(Identif) 171 571.33 T
(ier) 208.8 571.33 T
(name;) 225 571.33 T
(Repository) 171 561.33 T
(id;) 225 561.33 T
(Repository) 171 551.33 T
(def) 225 551.33 T
(ined_in;) 241.2 551.33 T
(    };) 108 541.33 T
(    // 7.5.7 ParameterDef) 108 521.33 T
(    enum ParameterMode {PARAM_IN, PARAM_OUT, PARAM_INOUT};) 108 501.33 T
(    interface ParameterDef : Contained {) 108 481.33 T
(attribute TypeCode) 171 461.33 T
(type;) 268.2 461.33 T
(attribute ParameterMode) 171 451.33 T
(mode;) 295.2 451.33 T
(    };) 108 441.33 T
(    struct ParameterDescription {) 108 421.33 T
(Identif) 171 411.33 T
(ier) 208.8 411.33 T
(name;) 225 411.33 T
(RepositoryId) 171 401.33 T
(id;) 235.8 401.33 T
(RepositoryId) 171 391.33 T
(def) 235.8 391.33 T
(ined_in;) 252 391.33 T
(TypeCode) 171 381.33 T
(type;) 225 381.33 T
(ParameterMode) 171 371.33 T
(mode;) 241.2 371.33 T
(    };) 108 361.33 T
(    typedef  sequence<ParameterDescription>) 108 351.33 T
(ParDescriptionSeq;) 340.2 351.33 T
(    // 7.5.10 ExceptionDef Interface) 108 331.33 T
(    interface ExceptionDef : Contained {) 108 311.33 T
(attribute TypeCode) 171 301.33 T
(type;) 268.2 301.33 T
(    };) 108 291.33 T
(    struct ExceptionDescription {) 108 271.33 T
(Identif) 171 261.33 T
(ier) 208.8 261.33 T
(name;) 225 261.33 T
(RepositoryId) 171 251.33 T
(id;) 235.8 251.33 T
(RepositoryId) 171 241.33 T
(def) 235.8 241.33 T
(ined_in;) 252 241.33 T
(TypeCode) 171 231.33 T
(type;) 225 231.33 T
(    };) 108 221.33 T
(    typedef  sequence<ExceptionDescription>) 108 211.33 T
(ExcDescriptionSeq;) 340.2 211.33 T
(    // 7.5.6 OperationDef) 108 191.33 T
(    enum OperationMode) 108 171.33 T
({OP_NORMAL, OP_ONEWAY};) 226.8 171.33 T
(    interface OperationDef : Contained {) 108 151.33 T
(attribute TypeCode) 171 141.33 T
(result;) 268.2 141.33 T
(attribute OperationMode) 171 131.33 T
(mode;) 295.2 131.33 T
(attribute Identif) 171 121.33 T
(ierSeq) 262.8 121.33 T
(contexts;) 295.2 121.33 T
(    };) 108 111.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 90
%%Page: "91" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(91) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(    struct OperationDescription {) 126 681.33 T
(Identif) 189 671.33 T
(ier) 226.8 671.33 T
(name;) 243 671.33 T
(RepositoryId) 189 661.33 T
(id;) 253.8 661.33 T
(RepositoryId) 189 651.33 T
(def) 253.8 651.33 T
(ined_in;) 270 651.33 T
(TypeCode) 189 641.33 T
(result;) 243 641.33 T
(OperationMode) 189 631.33 T
(mode;) 259.2 631.33 T
(StringSeq) 189 621.33 T
(contexts;) 243 621.33 T
(ParDescriptionSeq) 189 611.33 T
(parameters;) 280.8 611.33 T
(ExcDescriptionSeq) 189 601.33 T
(exceptions;) 280.8 601.33 T
(    };) 126 591.33 T
(    typedef  sequence<OperationDescription>) 126 581.33 T
(OpDescriptionSeq;) 358.2 581.33 T
(    // 7.5.5 AttributeDef) 126 561.33 T
(    enum AttributeMode {ATTR_NORMAL, ATTR_READONLY};) 126 541.33 T
(    interface AttributeDef : Contained {) 126 521.33 T
(attribute TypeCode) 189 501.33 T
(type;) 286.2 501.33 T
(attribute AttributeMode) 189 491.33 T
(mode;) 313.2 491.33 T
(    };) 126 481.33 T
(    struct AttributeDescription {) 126 461.33 T
(Identif) 189 451.33 T
(ier) 226.8 451.33 T
(name;) 243 451.33 T
(RepositoryId) 189 441.33 T
(id;) 253.8 441.33 T
(RepositoryId) 189 431.33 T
(def) 253.8 431.33 T
(ined_in;) 270 431.33 T
(TypeCode) 189 421.33 T
(type;) 232.2 421.33 T
(AttributeMode) 189 411.33 T
(mode;) 259.2 411.33 T
(    };) 126 401.33 T
(    typedef sequence<AttributeDescription>) 126 391.33 T
(AttrDescriptionSeq;) 352.8 391.33 T
(    // 7.5.4 InterfaceDef) 126 371.33 T
(    interface InterfaceDef : Container, Contained {) 126 351.33 T
(struct FullInterfaceDescription {) 189 331.33 T
(    Identif) 189 321.33 T
(ier) 248.4 321.33 T
(name;) 264.6 321.33 T
(    RepositoryId) 189 311.33 T
(id;) 275.4 311.33 T
(    RepositoryId) 189 301.33 T
(def) 275.4 301.33 T
(ined_id;) 291.6 301.33 T
(    OpDescriptionSeq) 189 291.33 T
(operations;) 297 291.33 T
(    AttrDescriptionSeq) 189 281.33 T
(attributes;) 307.8 281.33 T
(};) 189 271.33 T
(attribute RepositoryIdSeq) 189 261.33 T
(base_interfaces;) 324 261.33 T
(FullInterfaceDescription) 189 251.33 T
(describe_interface\050\051;) 318.6 251.33 T
(    };) 126 241.33 T
(    struct InterfaceDescription {) 126 221.33 T
(Identif) 189 211.33 T
(ier) 226.8 211.33 T
(name;) 243 211.33 T
(Repository) 189 201.33 T
(id;) 243 201.33 T
(Repository) 189 191.33 T
(def) 243 191.33 T
(ined_in;) 259.2 191.33 T
(    };) 126 181.33 T
(    // 7.5.8 TypedefDef Interface) 126 161.33 T
(    interface TypedefDef : Contained {) 126 141.33 T
(attribute TypeCode) 189 131.33 T
(type;) 286.2 131.33 T
(    };) 126 121.33 T
(    struct TypeDescription {) 126 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 91
%%Page: "92" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(92) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(Identif) 171 681.33 T
(ier) 208.8 681.33 T
(name;) 225 681.33 T
(RepositoryId) 171 671.33 T
(id;) 235.8 671.33 T
(RepositoryId) 171 661.33 T
(def) 235.8 661.33 T
(ined_in;) 252 661.33 T
(TypeCode) 171 651.33 T
(type;) 225 651.33 T
(    };) 108 641.33 T
(    typedef  sequence<TypeDescription>) 108 631.33 T
(TypeDescriptionSeq;) 313.2 631.33 T
(    // 7.5.9 ConstantDef Interface) 108 611.33 T
(    interface ConstantDef : Contained {) 108 591.33 T
(attribute TypeCode) 171 581.33 T
(type;) 268.2 581.33 T
(attribute any) 171 571.33 T
(value;) 241.2 571.33 T
(    };) 108 561.33 T
(    struct ConstantDescription {) 108 541.33 T
(Identif) 171 531.33 T
(ier) 208.8 531.33 T
(name;) 225 531.33 T
(RepositoryId) 171 521.33 T
(id;) 235.8 521.33 T
(RepositoryId) 171 511.33 T
(def) 235.8 511.33 T
(ined_in;) 252 511.33 T
(TypeCode) 171 501.33 T
(type;) 225 501.33 T
(any) 171 491.33 T
(value;) 243 491.33 T
(    };) 108 481.33 T
(    // 7.6.1 TypeCode Interface) 108 461.33 T
(    enum TCKind {) 108 441.33 T
(tk_null, tk_void,) 171 431.33 T
(tk_short, tk_long, tk_ushort, tk_ulong,) 171 421.33 T
(tk_f) 171 411.33 T
(loat, tk_double, tk_boolean, tk_char,) 192.6 411.33 T
(tk_octet, tk_any, tk_TypeCode, tk_Principal, tk_objref,) 171 401.33 T
(tk_struct, tk_union, tk_enum, tk_string,) 171 391.33 T
(tk_sequence, tk_array) 171 381.33 T
(    };) 108 371.33 T
(    interface TypeCode {) 108 351.33 T
(exception) 171 341.33 T
(Bounds {};) 225 341.33 T
(boolean) 171 331.33 T
(equal \050in TypeCode tc\051;) 208.8 331.33 T
(TCKind) 171 321.33 T
(kind \050\051;) 207 321.33 T
(long) 171 311.33 T
(param_count \050\051;) 207 311.33 T
(// The number of parameters for this TypeCode.) 207 301.33 T
(any) 171 291.33 T
(parameter \050in long index\051 raises \050Bounds\051;) 207 291.33 T
(// The index'th parameter.  Parameters are indexed from 0) 207 281.33 T
(// to \050param_count-1\051.) 207 271.33 T
(    };) 108 261.33 T
(    // 8.1 Converting Object References to Strings) 108 241.33 T
(    interface ORB {) 108 221.33 T
(string object_to_string \050in Object obj\051;) 171 211.33 T
(Object string_to_object \050in string str\051;) 171 201.33 T
(Status create_list \050) 171 181.33 T
(    in long) 171 171.33 T
(count,) 230.4 171.33 T
(    out NVList) 171 161.33 T
(new_list) 246.6 161.33 T
(\051;) 171 151.33 T
(Status create_operation_list \050) 171 131.33 T
(    in OperationDef) 171 121.33 T
(oper,) 273.6 121.33 T
(    out NVList) 171 111.33 T
(new_list) 246.6 111.33 T
(\051;) 171 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 92
%%Page: "93" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
2 10 Q
(93) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
6 F
(Status get_default_context \050out Context ctx\051;) 189 671.33 T
(      // from Initialisation Specif) 126 651.33 T
(ication 94-10-24) 315 651.33 T
(typedef sequence <string> arg_list;) 189 631.33 T
(typedef string OAid;) 189 621.33 T
(// Template fo OA initialisation operations) 189 601.33 T
(// <OA> <OA>_init \050 inout arg_list argv,) 189 591.33 T
(    in OAid oa_identif) 225 581.33 T
(ier\051;) 343.8 581.33 T
(BOA BOA_init \050inout arg_list argv,) 189 561.33 T
(      in OAid boa_identif) 207 551.33 T
(ier\051;) 342 551.33 T
(typedef string ObjectId;) 189 531.33 T
(typedef sequence <ObjectId> ObjectIdList;) 189 521.33 T
(exception InvalidName {};) 189 501.33 T
(ObjectIdList list_initial_services\050\051;) 189 481.33 T
(Object resolve_initial_references\050in ObjectId identif) 189 461.33 T
(ier\051) 475.2 461.33 T
(    raises \050InvalidName\051;) 189 451.33 T
(    };) 126 431.33 T
(    // 8.2 Object Reference Operations) 126 411.33 T
(    interface ImplementationDef;) 126 391.33 T
(// from Implementation Repository) 298.8 391.33 T
(    interface Principal;) 126 381.33 T
(// for the authentication service) 255.6 381.33 T
(    interface Environment;) 126 371.33 T
(    interface Object {) 126 351.33 T
(ImplementationDef get_implementation \050\051;) 189 341.33 T
(InterfaceDef get_interface \050\051;) 189 331.33 T
(boolean is_nil \050\051;) 189 321.33 T
(Object duplicate \050\051;) 189 311.33 T
(void release \050\051;) 189 301.33 T
(// 6.2.1 create_request) 189 281.33 T
(Status create_request \050) 189 271.33 T
(    in Context) 189 261.33 T
(ctx,) 264.6 261.33 T
(    in Identif) 189 251.33 T
(ier) 264.6 251.33 T
(operation,) 280.8 251.33 T
(    in NVList) 189 241.33 T
(arg_list,) 259.2 241.33 T
(    inout NamedValue) 189 231.33 T
(result,) 297 231.33 T
(    out Request) 189 221.33 T
(request_X,) 270 221.33 T
(    in Flags) 189 211.33 T
(req_f) 253.8 211.33 T
(lags) 280.8 211.33 T
(\051;) 189 201.33 T
(    };) 126 181.33 T
(    typedef sequence <octet, 1024> ReferenceData;) 126 161.33 T
(    // 9.2 Basic Object Adapter Interface) 126 141.33 T
(    interface BOA {) 126 121.33 T
(Object create\050) 189 111.33 T
(    in ReferenceData) 189 101.33 T
(id,) 297 101.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 93
%%Page: "94" 94
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(94) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
6 9 Q
(    in InterfaceDef) 171 681.33 T
(intf,) 273.6 681.33 T
(    in ImplementationDef) 171 671.33 T
(impl) 300.6 671.33 T
(\051;) 171 661.33 T
(void dispose \050in Object obj\051;) 171 641.33 T
(ReferenceData get_id \050in Object obj\051;) 171 631.33 T
(void change_implementation \050) 171 611.33 T
(    in Object) 171 601.33 T
(obj,) 241.2 601.33 T
(    in ImplementationDef) 171 591.33 T
(impl) 300.6 591.33 T
(\051;) 171 581.33 T
(Principal get_principal \050) 171 561.33 T
(    in Object) 171 551.33 T
(obj,) 241.2 551.33 T
(    in Environment) 171 541.33 T
(ev) 268.2 541.33 T
(\051;) 171 531.33 T
(enum exception_type {NO, USER, SYSTEM_EXCEPTION};) 171 511.33 T
(void set_exception \050) 171 491.33 T
(    in exception_type) 171 481.33 T
(major,) 284.4 481.33 T
(// NO, USER, or SYSTEM_EXCEPTION) 316.8 481.33 T
(    in string) 171 471.33 T
(userid,) 241.2 471.33 T
(// exception type id) 279 471.33 T
(    in void) 171 461.33 T
(*param) 230.4 461.33 T
(// pointer to associated data) 262.8 461.33 T
(\051;) 171 451.33 T
(void impl_is_ready \050in ImplementationDef impl\051;) 171 431.33 T
(void deactivate_impl \050in ImplementationDef impl\051;) 171 421.33 T
(void obj_is_ready \050in Object obj, in ImplementationDef impl\051;) 171 411.33 T
(void deactivate_obj \050in Object obj\051;) 171 401.33 T
(    };) 108 391.33 T
(    interface ImplementationDef {};) 108 371.33 T
(// from Implementation Repository) 297 371.33 T
(    interface Principal {};) 108 361.33 T
(// for the authentication service) 253.8 361.33 T
(    interface Environment {};) 108 351.33 T
(// from Initialisation Specif) 108 331.33 T
(ication 94-10-24) 264.6 331.33 T
(    typedef string ORBid;) 108 321.33 T
(    typedef sequence <string> arg_list;) 108 311.33 T
(    ORB ORB_init \050inout arg_list argv; in ORBid orb_identif) 108 291.33 T
(ier\051;) 426.6 291.33 T
(};) 108 271.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 94
%%Page: "95" 95
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
2 10 Q
(95) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
1 10 Q
1 (APPENDIX J) 207 677 S
4 24 Q
(Ada Reserved) 297 677 T
(W) 297 647 T
(or) 314.78 647 T
(ds) 335.23 647 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(1) 72 424.67 T
3 11 Q
(This Appendix lists the Ada reserved words. It is not a normative part of this speci\336cation.) 153 424.67 T
6 9 Q
(        abort          else           new            return) 126 408 T
(        abs            elsif          not            reverse) 126 398 T
(        abstract       end            null) 126 388 T
(        accept         entry                         select) 126 378 T
(        access         exception                     separate) 126 368 T
(        aliased        exit           of             subtype) 126 358 T
(        all                           or) 126 348 T
(        and            for            others         tagged) 126 338 T
(        array          function       out            task) 126 328 T
(        at                                           terminate) 126 318 T
(                       generic        package        then) 126 308 T
(        begin          goto           pragma         type) 126 298 T
(        body                          private) 126 288 T
(                       if             procedure) 126 278 T
(        case           in             protected      until) 126 268 T
(        constant       is                            use) 126 258 T
(                                      raise) 126 248 T
(        declare                       range          when) 126 238 T
(        delay          limited        record         while) 126 228 T
(        delta          loop           rem            with) 126 218 T
(        digits                        renames) 126 208 T
(        do             mod            requeue        xor) 126 198 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 95
%%Page: "96" 96
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
2 10 Q
(96) 54 61.63 T
2 8 Q
( of) 65.12 61.63 T
2 10 Q
( 99) 74.9 61.63 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 96
%%Page: "97" 97
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
72 444.68 558 444.68 2 L
2 Z
N
72 75.33 558 75.33 2 L
0.25 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(97) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 24 Q
(Index) 207 677 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Symbols) 72 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(\325SIZE) 72 417 T
(33) 98.5 417 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(A) 72 398 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Any) 72 389 T
(15, 41) 92 389 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 72 379 T
(guments, Passing) 81.33 379 T
(48) 148.34 379 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Arithmetic T) 72 369 T
(ypes) 118.12 369 T
(33) 139.11 369 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Arrays) 72 359 T
(39) 100.99 359 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Attributes) 72 349 T
(16, 47, 59) 112.5 349 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Attributes, Server Side) 72 339 T
(59) 158.74 339 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(B) 72 320 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(BOA) 72 311 T
(54) 95.5 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Boolean) 72 301 T
(34) 106.5 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(C) 72 282 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Calling Convention) 72 273 T
(18) 147.26 273 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class) 72 263 T
(12) 96 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Class-wide types) 72 253 T
(12) 137.74 253 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Comments) 72 243 T
(25) 115.51 243 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Constant Expressions) 72 233 T
(21) 154.25 233 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Constants) 72 223 T
(39) 112 223 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Context) 72 213 T
(52) 105 213 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Controlled type) 72 203 T
(12) 132.75 203 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(CORBA package) 72 193 T
(25) 139.24 193 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(E) 72 174 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Environment) 72 165 T
(57) 123.5 165 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptions) 72 155 T
(17, 42) 116.5 155 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptions, Application-Speci\336c) 72 145 T
(44) 195.49 145 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptions, Example) 72 135 T
(46) 152.99 135 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptions, Identi\336er) 72 125 T
(43) 153.99 125 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptions, Members) 72 115 T
(43) 154.99 115 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Exceptions, Standard) 72 105 T
(44) 152.99 105 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(F) 324 426 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Forward Declaration) 324 417 T
(30) 403.23 417 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Forward Declarations) 324 407 T
(16, 27) 406.73 407 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(G) 324 388 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Global Names) 324 379 T
(25) 380.24 379 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(I) 324 360 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Identi\336ers) 324 351 T
(19) 364.99 351 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IDL \336le) 324 341 T
(14, 25) 357.25 341 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(include) 324 331 T
(24) 355 331 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Inheritance) 324 321 T
(14, 16, 26) 368.98 321 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(interface package) 324 311 T
(26) 391.72 311 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interfaces) 324 301 T
(15, 26, 59) 363.98 301 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Interfaces, Server Side) 324 291 T
(59) 410.22 291 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(L) 324 272 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Literals) 324 263 T
(19) 355.99 263 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Literals, Character) 324 253 T
(20) 395.48 253 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Literals, Floating-Point) 324 243 T
(20) 412.51 243 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Literals, Integer) 324 233 T
(19) 385.98 233 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Literals, String) 324 223 T
(21) 382.5 223 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(M) 324 204 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Memory Management) 324 195 T
(18) 408.73 195 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Modules) 324 185 T
(26) 360 185 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(N) 324 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(NamedV) 324 157 T
(alue) 355.49 157 T
(50) 374.98 157 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Names) 324 147 T
(17, 23) 353.49 147 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Narrowing) 324 137 T
(28) 367.49 137 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Nil) 324 127 T
(28) 340 127 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(NVList) 324 117 T
(50) 355.5 117 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 97
%%Page: "98" 98
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(98) 54 60.96 T
2 9 Q
( of) 65.12 60.96 T
2 10 Q
( 99) 76.12 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(O) 54 681.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Object) 54 672.31 T
(29, 56) 82.49 672.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Reference) 54 662.31 T
(26) 121.22 662.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Reference Operations) 54 652.31 T
(27) 162.96 652.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Object Refernce) 54 642.31 T
(29) 117.22 642.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operations) 54 632.31 T
(16, 47, 59) 97.99 632.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operations, Server Side) 54 622.31 T
(59) 144.23 622.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operators) 54 612.31 T
(21) 93.99 612.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ORB) 54 602.31 T
(55) 77 602.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(P) 54 583.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Package) 54 574.31 T
(1) 88.49 574.31 T
(1) 92.65 574.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Primitive operations) 54 564.31 T
(1) 131.75 564.31 T
(1) 135.92 564.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Principal) 54 554.31 T
(53) 91 554.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(R) 54 535.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Request) 54 526.31 T
(51) 87.5 526.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(S) 54 507.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Sequence) 54 498.31 T
(36) 92.99 498.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sequence T) 54 488.31 T
(ypes) 95.61 488.31 T
(36) 116.6 488.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(server) 54 478.31 T
(59) 80.49 478.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(string) 54 468.31 T
(33) 79 468.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(String T) 54 458.31 T
(ypes) 83.12 458.31 T
(38) 104.12 458.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Subsystem) 54 448.31 T
(12, 24) 97.51 448.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(subsystem) 54 438.31 T
(13) 96 438.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Subsystem, mapping) 54 428.31 T
(24) 133.51 428.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Subsystem, specifying) 54 418.31 T
(24) 139.5 418.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(T) 54 399.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(T) 54 390.31 T
(agged type) 58.87 390.31 T
(1) 102.61 390.31 T
(1) 106.78 390.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 380.31 T
(asking) 58.87 380.31 T
(18, 48) 86.87 380.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 370.31 T
(ypeCode) 58.87 370.31 T
(41, 53) 95.36 370.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 360.31 T
(ypedefs) 58.87 360.31 T
(40) 91.36 360.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 350.31 T
(ypes) 58.87 350.31 T
(17) 79.87 350.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 340.31 T
(ypes, Any) 58.87 340.31 T
(41) 99.86 340.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 330.31 T
(ypes, Arithmetic) 58.87 330.31 T
(33) 123.36 330.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 320.31 T
(ypes, Array) 58.87 320.31 T
(39) 105.35 320.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 310.31 T
(ypes, Boolean) 58.87 310.31 T
(34) 114.36 310.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 300.31 T
(ypes, Enumeration) 58.87 300.31 T
(34) 130.86 300.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 290.31 T
(ypes, Exception) 58.87 290.31 T
(42) 120.86 290.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 280.31 T
(ypes, Sequence) 58.87 280.31 T
(36) 118.85 280.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 270.31 T
(ypes, Size Requirements) 58.87 270.31 T
(33) 152.11 270.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 260.31 T
(ypes, String) 58.87 260.31 T
(38) 106.37 260.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 250.31 T
(ypes, Structure) 58.87 250.31 T
(35) 117.36 250.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 240.31 T
(ypes, T) 58.87 240.31 T
(ypeCodes) 84.74 240.31 T
(41) 124.73 240.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 230.31 T
(ypes, T) 58.87 230.31 T
(ypedefs) 84.74 230.31 T
(40) 117.22 230.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 54 220.31 T
(ypes, Union) 58.87 220.31 T
(35) 106.87 220.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(W) 54 201.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(W) 54 192.31 T
(idening) 62.14 192.31 T
(28) 93.64 192.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 54 182.31 T
(ith) 62.14 182.31 T
(12) 76.14 182.31 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 98
%%Page: "99" 99
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 750.68 558 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Notes) 207 739.85 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 726.98 558 726.98 2 L
0.25 H
N
72 75.33 558 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 10 Q
(99) 523.37 60.96 T
2 9 Q
( of 99) 534.49 60.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 668.92 558 674.33 C
0 0 0 1 0 0 0 K
152.49 672.13 467.34 672.13 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
71.82 672.13 143.58 672.13 2 L
0 Z
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
0 X
0 0 0 1 0 0 0 K
(Notes) 341.89 678.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 99
%%Page: "100" 100
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 750.68 540 750.68 2 L
2 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 9 Q
(Notes) 189 739.85 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 726.98 540 726.98 2 L
0.25 H
N
54 75.33 540 75.33 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 100
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 100
%%DocumentFonts: Helvetica
%%+ Times-Bold
%%+ Helvetica-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier-Bold
%%+ Courier
%%+ Courier-Oblique
%%+ ZapfDingbats
%%EOF

